<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git命令工作机制</title>
      <link href="/posts/vcs/git/git-working-mechanism/"/>
      <url>/posts/vcs/git/git-working-mechanism/</url>
      
        <content type="html"><![CDATA[<p>Git 是当前最广泛使用的版本控制系统，具备非常强大的版本控制能力。Git 有非常多的命令，很多人被种类繁多的命令搞的非常头大，也会经常忘记。本文尝试从原理角度来介绍 Git 常用命令，以便于加深对 Git 原理的理解。只有理解了原理，才能知道这些命令到底对仓库做了什么，进而才能更好使用命令，也更加不容易忘记。作为一个版本控制系统，理解其原理也是十分必要的，否则，很多命令根本不敢用，用错了可能会造成严重后果，搞丢代码的成本是非常大的，谁都不想自己或他人做工作被一键抹除。知道原理后，即使一不小心操作错了，也可以坦然处之，轻松恢复。</p><p>相比命令行工具，可视化的 GUI 就要直观和方便很多，但是很多时候一样可能因为对于具体做什么不了解而操作错误，并且，目前常用的 GUI 软件，都未提供全部的命令行操作能力，GUI 很多时候，也没有命令方便快捷。</p><h2 id="仓库概述"><a href="#仓库概述" class="headerlink" title="仓库概述"></a>仓库概述</h2><p>Git 是一个分布式的版本控制系统，不同于 <strong>svn</strong> 只有一个<strong>中心仓库</strong>，必须能连接到 svn 服务才能提交，Git 可以随时提交而不依赖于中心仓库，因为本地存在一个独立的仓库，完全支持离线操作。本地仓库和远程仓库是一种比较松散的关系。</p><p>Git 中，每个仓库可以存在多个仓库副本，这个仓库暂且称为 “原始仓库”，“原始仓库” 因为需要备份或协作等方面的需要通常存储在托管服务器上。</p><p><strong>仓库副本</strong>通常是通过 <code>clone</code> 或 <code>Fork</code>（本质其实也是<code>clone</code>） 创建的，仓库副本和原始仓库是<strong>上下游</strong>关系，这些副本仓库可能在本地，也可能在某台服务器上。</p><p><strong>原始仓库</strong>如果托管在托管服务器上，通过 <code>Fork</code> 的方式可以创建很多位于托管服务上的副本，这些副本在不同的账户下，<code>Fork</code> 并不是 Git 提供的，而是托管服务提供的。<code>Fork</code> 出来的仓库副本与原始仓库之间的关系也由托管服务记录和维护的，这些副本仓库都有一个相同的 <code>上游仓库</code>（即原始仓库），同时副本仓库也可以继续被 <code>Fork</code> 产生多个 <code>下游仓库</code>，下游仓库可以通过 <code>PullRequest/MergeRequest</code> 向上游仓库发起跨仓库的 <code>merge</code> 请求，进行仓库间的交互。这些位于托管服务上的仓库，不论是原始仓库还是<code>Fork</code>出来的副本仓库，都可以被 <code>clone</code> 到本地创建本地仓库，本地仓库也是一个副本。</p><p><strong>本地仓库</strong>可以是<strong>原始仓库</strong>的副本，也可以是<strong>原始仓库</strong>的某副本的副本，相对于本地仓库，这些仓库称之为<strong>远程仓库</strong>，本地版本库可以同时对应多个远程仓库。本地仓库通过 <code>push</code>、<code>fetch</code> 等命令和远程仓库同步。</p><p>通过前面的描述，引申出了几个概念：原始仓库 &lt;-&gt; 副本仓库、上游仓库 &lt;-&gt; 下游仓库、远程仓库 &lt;-&gt; 本地仓库，这些概念都是相对而言的，便于进行角色区分。</p><p>仓库间的交互：</p><ol><li>远程仓库 和 本地仓库 之间，主要进行的是同步，本地修改同步到远程，或远程同步到本地。</li><li>远程仓库 和 远程仓库 之间，主要进行的是跨仓库的分支合并，也就是 <code>PullRequest/MergeRequest</code>。</li></ol><p>在未使用 <code>Fork</code> 的模式中，就没有 <code>2</code> 这种情况了。</p><p>本地仓库主要用来完成内容变更，远程仓库主要用来完成多人协作与数据备份。</p><p>托管服务上，<code>Fork</code> 创建的仓库副本关系如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">base</span>/<span class="built_in">Base</span></span><br><span class="line">├──── user_a1/<span class="built_in">Base</span></span><br><span class="line">├──── user_a2/<span class="built_in">Base</span></span><br><span class="line">├──── user_a3/<span class="built_in">Base</span></span><br><span class="line">├──── user_a4/<span class="built_in">Base</span></span><br><span class="line">│     ├─── user_b1/<span class="built_in">Base</span></span><br><span class="line">│     └─── user_b2/<span class="built_in">Base</span></span><br><span class="line">└──── user_a5/<span class="built_in">Base</span></span><br></pre></td></tr></table></figure><p>这些仓库都可被有权限的用户 <code>pull</code> 本地仓库，并正在修改之后 <code>push</code> 远程仓库。</p><p>为什么需要 <code>Fork</code>？</p><ol><li>避免分配原始仓库的访问权限给无关用户，防止仓库被破坏</li><li>本地仓库无法直接 Merge 到远程仓库，远程副本仓库能够提供了合并到原始仓库的能力</li><li>合并需要发起 <code>PullRequest/MergeRequest</code> 提供了代码审核的窗口</li></ol><p>Git 的单个仓库的工作原理是比较简单的，但是当多个不同角色的仓库同时存在协同工作的时候，确实非常复杂的，有非常多的玩法。只有真正的理解内部原理，方能运用自如。</p><p>Git 的命令是建立在这些底层模型上的，命令也正是为处理并维护这些关系而设计的。所以也只要有理解原理，才能熟练运用这些命令。</p><p>下面开始进入正题。</p><h2 id="仓库创建"><a href="#仓库创建" class="headerlink" title="仓库创建"></a>仓库创建</h2><p>任何操作开始前，首先要有个一个仓库。</p><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1pbml0" title="https://git-scm.com/docs/git-init">Init<i class="fa fa-external-link"></i></span></h3><p>核心功能：</p><ol><li>创建一个新的空 Git 仓库，或者重新初始化一个已经存在的 Git 仓库。</li></ol><p>常规方式创建一个仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ git init workspace</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/liuyanjie/git-learn/workspace/.git/</span><br><span class="line"></span><br><span class="line">$ tree -ar</span><br><span class="line">.</span><br><span class="line">└── workspace</span><br><span class="line">    └── .git</span><br><span class="line">        ├── refs</span><br><span class="line">        │   ├── tags</span><br><span class="line">        │   └── heads</span><br><span class="line">        ├── objects</span><br><span class="line">        │   ├── pack</span><br><span class="line">        │   └── info</span><br><span class="line">        ├── info</span><br><span class="line">        │   └── exclude</span><br><span class="line">        ├── hooks</span><br><span class="line">        │   ├── update.sample</span><br><span class="line">        │   ├── prepare-commit-msg.sample</span><br><span class="line">        │   ├── pre-receive.sample</span><br><span class="line">        │   ├── pre-rebase.sample</span><br><span class="line">        │   ├── pre-push.sample</span><br><span class="line">        │   ├── pre-commit.sample</span><br><span class="line">        │   ├── pre-applypatch.sample</span><br><span class="line">        │   ├── post-update.sample</span><br><span class="line">        │   ├── fsmonitor-watchman.sample</span><br><span class="line">        │   ├── commit-msg.sample</span><br><span class="line">        │   └── applypatch-msg.sample</span><br><span class="line">        ├── description</span><br><span class="line">        ├── config</span><br><span class="line">        └── HEAD</span><br><span class="line"></span><br><span class="line">10 directories, 15 files</span><br></pre></td></tr></table></figure><p>以上创建的仓库，仓库文件 存放在 工作区目录 <code>workspace</code> 的子目录 <code>.git</code> 下。</p><p>分离的方式创建一个仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ git init --separate-git-dir=.tig workspace</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/liuyanjie/git-learn/.tig/</span><br><span class="line"></span><br><span class="line">$ tree -ar</span><br><span class="line">.</span><br><span class="line">├── workspace</span><br><span class="line">│   └── .git</span><br><span class="line">└── .tig</span><br><span class="line">    ├── refs</span><br><span class="line">    │   ├── tags</span><br><span class="line">    │   └── heads</span><br><span class="line">    ├── objects</span><br><span class="line">    │   ├── pack</span><br><span class="line">    │   └── info</span><br><span class="line">    ├── info</span><br><span class="line">    │   └── exclude</span><br><span class="line">    ├── hooks</span><br><span class="line">    │   ├── update.sample</span><br><span class="line">    │   ├── prepare-commit-msg.sample</span><br><span class="line">    │   ├── pre-receive.sample</span><br><span class="line">    │   ├── pre-rebase.sample</span><br><span class="line">    │   ├── pre-push.sample</span><br><span class="line">    │   ├── pre-commit.sample</span><br><span class="line">    │   ├── pre-applypatch.sample</span><br><span class="line">    │   ├── post-update.sample</span><br><span class="line">    │   ├── fsmonitor-watchman.sample</span><br><span class="line">    │   ├── commit-msg.sample</span><br><span class="line">    │   └── applypatch-msg.sample</span><br><span class="line">    ├── description</span><br><span class="line">    ├── config</span><br><span class="line">    └── HEAD</span><br><span class="line"></span><br><span class="line">10 directories, 16 files</span><br><span class="line"></span><br><span class="line">$ cat workspace/.git</span><br><span class="line">gitdir: /Users/liuyanjie/git-learn/.tig</span><br></pre></td></tr></table></figure><p>从上面的目录结构可以看到，相比常规方式创建仓库，通过分离的方式创建的仓库将 <code>仓库(.git)</code> 从 <code>工作区目录(workspace)</code> 中分离出去。<code>仓库(.git)</code> 不再是一个目录，而是包含指向仓库路径的一个文件，实际上利用这一特性，可以创建多个工作区共享同一仓库，也就可以支持同一个仓库拥有多个工作区。</p><p>另外也可以通过环境变量 <code>GIT_DIR=path/to/repo.git</code> 指定 <code>仓库(.git)</code> 的路径，下面这种方式和上面的方式是等价的（注意：相对路径不同）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ GIT_DIR=../.tig git init workspace</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/liuyanjie/git-learn/.tig/</span><br></pre></td></tr></table></figure><p>不仅如此，Git 还支持将 Objects 从 <code>仓库(.git)</code> 中移出，通过 <code>GIT_OBJECT_DIRECTORY=$GIT_DIR/objects</code> Git 对象存储路径，不过这种用法在本地很少见。</p><p>有兴趣可以用以下命令做实验：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GIT_OBJECT_DIRECTORY=../objects GIT_DIR=../.tig git init workspace</span><br></pre></td></tr></table></figure><p>默认情况下，仓库在创建的过程中，拷贝了一些的模版文件到 <code>仓库(.git)</code> 目录下，默认的模版路径和文件示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree /usr/<span class="built_in">local</span>/Cellar/git/2.18.0/share/git-core/templates</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/git/2.18.0/share/git-core/templates</span><br><span class="line">├── description</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">└── info</span><br><span class="line">    └── exclude</span><br><span class="line"></span><br><span class="line">2 directories, 13 files</span><br></pre></td></tr></table></figure><p>可以看到，模版目录里面的内容，和实际仓库的内容相同的，用模版创建仓库时，就是原封不动的将仓库内容拷贝到仓库目录下。<br>基于这一点，我们可以以一个已经存在的仓库作为模版，创建另一个仓库，Git 会把模板路径下的文件的拷贝到新的仓库下。</p><p>可以在运行的时候通过 <code>--template=</code> 或 <code>GIT_TEMPLATE_DIR</code> 环境变量 或 <code>init.templateDir</code> 配置 指定模版路径位置。</p><p>还可以通过 <code>git init --bare</code> 参数创建一个裸仓库，裸仓库的指没有工作区的仓库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git init --bare          </span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/liuyanjie/git-learn/</span><br><span class="line"></span><br><span class="line"><span class="comment"># liuyanjie @ bogon in /Users/liuyanjie/git-learn on git:master o [16:48:01] </span></span><br><span class="line">$ ls</span><br><span class="line">HEAD        config      description hooks       info        objects     refs</span><br></pre></td></tr></table></figure><p>因为无工作区，仓库文件直接放在当前目录下了，可以手动创建工作区并链接到仓库目录。</p><p>在一个已经存在的仓库目录中运行 <code>init</code> 命令是安全的，它不会覆盖原来已经存在的文件（包括仓库和工作区）。<br>重新运行 <code>init</code> 的可以用来安装新添加的模版，或者用来将仓库分离到其他的位置。</p><p>新创建的仓库的仓库配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[core]</span></span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = true</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">ignorecase = true</span><br><span class="line">precomposeunicode = true</span><br></pre></td></tr></table></figure><p>只有 <code>core</code> 相关的几个配置项。</p><p>通过以上对命令及参数的效果的参考，可以了解到 Git 文档中不为人知的一些内容。</p><p>初始化仓库是 Git 工作流中的第一步，通常发生在本地，在托管服务创建仓库之后，仓库并未初始化，需要在本地创建并初始化仓库后，同步到远程，然后再同步本地。</p><p>通常情况下，都是需要两个仓库的，一个本地仓库，一个远程仓库，以支持复杂的开发工作流。</p><h3 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jbG9uZQ==" title="https://git-scm.com/docs/git-clone">Clone<i class="fa fa-external-link"></i></span></h3><p>核心功能：</p><ol><li>初始化并配置仓库，记录本地仓库和远程仓库的对应关系，包括仓库和分支映射关系<ol><li>克隆仓库到一个新的目录，实际上就是 <code>git init</code></li><li>为每一个被克隆仓库中的分支创建对应的远程追踪分支</li><li>从克隆仓库的当前活动分支创建并检出初始分支到工作区目录</li></ol></li><li>同步仓库<ol><li>通过 <code>git fetch</code> 更新所有远程追踪分支</li><li>通过 <code>git pull</code> 合并远程 <code>master</code> 分支到本地 <code>master</code> 分支，快速合并</li></ol></li></ol><p>类似于如下过程：</p><p><code>git init</code> -&gt; <code>git remote set-url origin git://...</code> -&gt; <code>git fetch</code> -&gt; <code>git pull</code> -&gt; <code>git checkout HEAD</code></p><p>通过以上核心功能可以看到，<code>Clone</code> 实际上是对多个命令功能的组合，并进行了一些配置工作。这样我们可以猜测，<code>Clone</code> 命令的很多参数应该是从其他命令继承过来的。</p><p>克隆一个远程仓库需要存在一个远程仓库，并且有一个可以访问的远程仓库的地址，Git支持多种访问协议，最常见的如 <code>git://</code> 和 <code>https://</code>。<br>详见：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jbG9uZSNfZ2l0X3VybHNfYV9pZF91cmxzX2E=" title="https://git-scm.com/docs/git-clone#_git_urls_a_id_urls_a">GIT-URLS<i class="fa fa-external-link"></i></span></p><p>下面是一个常见的 <code>clone</code> 操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:liuyanjie/spec.git</span><br><span class="line">Cloning into <span class="string">'spec'</span>...</span><br><span class="line">remote: Counting objects: 49, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 49 (delta 0), reused 0 (delta 0), pack-reused 49</span><br><span class="line">Receiving objects: 100% (49/49), 49.83 KiB | 25.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (15/15), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>通过输出内容可以看到，<code>Clone</code> 主要都做了哪些事情，可以对比上面的过程描述。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat spec/.git/config</span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">url = git@github.com:liuyanjie/spec.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br></pre></td></tr></table></figure><p><code>git clone</code> 之后的仓库配置中，可以看到多出了以上内容，配置了对应的远程仓库地址及追踪关系，配置了本地 <code>master</code> 对应的远程分支，该配置为 Git 默认配置，一般不需要修改。</p><p>常见用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆本地仓库 默认是硬链接的，关闭需要加 --no-hardlinks</span></span><br><span class="line">git <span class="built_in">clone</span> path/to/<span class="built_in">local</span>/git/repository</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程仓库</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:liuyanjie/knowledge.git</span><br><span class="line">Cloning into <span class="string">'knowledge'</span>...</span><br><span class="line">remote: Counting objects: 495, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (141/141), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程仓库 只克隆最后一个Commit提速</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:liuyanjie/knowledge.git --depth=1</span><br><span class="line">Cloning into <span class="string">'knowledge'</span>...</span><br><span class="line">remote: Counting objects: 300, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (247/247), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程仓库 只克隆最后一个Commit提速，并通过另外一个仓库加速</span></span><br><span class="line">$ git <span class="built_in">clone</span> \</span><br><span class="line">  --depth=1 \</span><br><span class="line">  --reference-if-able=/Volumes/Data/Data/ws/knowledge \</span><br><span class="line">  git@github.com:liuyanjie/knowledge.git</span><br><span class="line">Cloning into <span class="string">'knowledge'</span>...</span><br><span class="line">remote: Total 0 (delta 0), reused 0 (delta 0), pack-reused 0</span><br></pre></td></tr></table></figure><p>在 <code>Clone</code> 的过程中，通过一些参数可以有效的减少 <code>Clone</code> 的等待时间，如在 CI 的构建流程中，可以提高构建时间。</p><p>了解 <code>git clone</code> 命令的实际工作流程，能够了解 <code>clone</code> 的过程做了什么以及能做到什么，日常使用也用不到很多复杂的操作，关于更多的命令参数，可自行通过文档了解。</p><h2 id="仓库同步"><a href="#仓库同步" class="headerlink" title="仓库同步"></a>仓库同步</h2><p>因为 Git 是一个分布式的版本控制系统，同时存在多个仓库副本，仓库副本之间的同步是非常重要的一环。不同于许多分布式系统（例如分布式数据库）能够自动完成节点间的数据同步，Git 无法自动的完成仓库同步，所以仓库同步完全依赖于使用者自行通过各类操作界面完成。</p><p>数据同步的内容主要有：分支、标签、数据等内容</p><p>数据同步基于 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YxL0dpdC3lhoXpg6jljp/nkIYtVGhlLVJlZnNwZWM=" title="https://git-scm.com/book/zh/v1/Git-内部原理-The-Refspec">RefSpec<i class="fa fa-external-link"></i></span> ，它描述了本地仓库与远程仓库间分支和标签的映射关系及同步策略。</p><p>下面示例中 <code>+refs/heads/*:refs/remotes/origin/*</code> 即为 <code>RefSpec</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/config</span><br><span class="line">[core]</span><br><span class="line">        ...</span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">        url = git@github.com:liuyanjie/knowledge.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure><p><code>Ref</code></p><p>示例中的 <code>RefSpec</code> 表明：远程仓库中所有分支 <code>refs/heads/*</code>，对应到本地仓库下所有分支 <code>refs/remotes/origin/*</code>，分支名称不变。如果需要改变分支名称，则需要配置针对分支特定的 <code>RefSpec</code>。</p><p>在了解 <code>RefSpec</code> 之前，需要先了解下 <code>Ref</code>：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YxL0dpdC3lhoXpg6jljp/nkIYtR2l0LVJlZmVyZW5jZXM=" title="https://git-scm.com/book/zh/v1/Git-内部原理-Git-References">Git 内部原理 - Git References<i class="fa fa-external-link"></i></span></p><p>如同描述的一样，<code>RefSpec</code> 描述了 <code>remote-refs</code> 和 <code>local-refs</code> 的对应关系。</p><p>RefSpec 写法示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+refs/heads/*:refs/remotes/origin/*</span><br><span class="line">+refs/heads/master:master</span><br><span class="line">+master:refs/remotes/origin/master</span><br><span class="line">master:master</span><br><span class="line">:master</span><br><span class="line">master:</span><br></pre></td></tr></table></figure><p><code>RefSpec</code> 的格式是一个可选的 <code>+</code> 号，接着是 <code>&lt;src&gt;:&lt;dst&gt;</code> 的格式，这里 <code>&lt;src&gt;</code> 是远程仓库的引用格式，<code>&lt;dst&gt;</code> 是将要记录在本地仓库的引用格式。可选的 <code>+</code> 号告诉 Git 在即使不能快速演进的情况下，也去强制更新它，也就是与远程保持强一致的同步。</p><p>从远程仓库获取指定数据到本地仓库，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">branch master &lt;==&gt; +refs/heads/master:+refs/remotes/origin/master</span><br><span class="line">branch    A:a &lt;==&gt; +refs/heads/A:+refs/remotes/origin/a</span><br><span class="line">tag     &lt;tag&gt; &lt;==&gt; +refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/config</span><br><span class="line">[core]</span><br><span class="line">        ...</span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">        url = git@github.com:liuyanjie/knowledge.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line"></span><br><span class="line">$ tree .git/refs</span><br><span class="line">.git/refs</span><br><span class="line">├── heads</span><br><span class="line">│   ├── feature</span><br><span class="line">│   │   └── travis-ci</span><br><span class="line">│   └── master</span><br><span class="line">├── remotes</span><br><span class="line">│   └── origin</span><br><span class="line">│       ├── feature</span><br><span class="line">│       │   └── travis-ci</span><br><span class="line">│       └── master</span><br><span class="line">└── tags</span><br><span class="line">    └── v0.0.0</span><br></pre></td></tr></table></figure><p>以上对应关系：</p><table><thead><tr><th>local-branch@local</th><th>remote-branch@local</th><th>remote-branch@remote</th></tr></thead><tbody><tr><td><code>master</code></td><td><code>origin/master</code></td><td><code>master</code></td></tr><tr><td><code>feature/travis-ci</code></td><td><code>origin/feature/travis-ci</code></td><td><code>feature/travis-ci</code></td></tr><tr><td><code>refs/heads/feature/travis-ci</code></td><td><code>refs/remotes/origin/feature/travis-ci</code></td><td><code>refs/heads/feature/travis-ci</code></td></tr></tbody></table><p>表格中，只描述了存在一个远程仓库 <code>origin</code> 的情形，实际上是可能存在多个远程仓库的。</p><p>注意：<code>RefSpec</code> 描述了 <code>remote-branch@local</code> 和 <code>remote-branch@remote</code> 之间的对应关系，并不是 <code>local-branch@local</code> 和 <code>remote-branch@remote</code> 之间的关系，它们之间的存在的追踪关系在其他配置项中描述。</p><p><code>local-branch@local</code> 下的 分支，是在本地存在的分支，可能从远程某个分支 <code>checkout</code>，也可能是本地新建的。</p><p><code>RefSpec</code> 可以应用在命令行中，但是一般不会出现在命令行中，而是由某些命令自动写在配置文件中，并在某些命令执行时自动应用配置。</p><p>例如：<code>git remote add remote-name</code>，Git 会获取远端上 <code>refs/heads/</code> 下面的所有引用，并将它写入到本地的 <code>refs/remotes/remote-name</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git remote add liuyanjie git@github.com:liuyanjie/knowledge.git</span><br><span class="line"></span><br><span class="line">$ cat .git/config</span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">        url = git@github.com:liuyanjie/knowledge.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line"></span><br><span class="line">[remote <span class="string">"liuyanjie"</span>]</span><br><span class="line">        url = git@github.com:liuyanjie/knowledge.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/liuyanjie/*</span><br></pre></td></tr></table></figure><p>以下几种方式是等价的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> master</span><br><span class="line">git <span class="built_in">log</span> heads/master</span><br><span class="line">git <span class="built_in">log</span> refs/heads/master</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> origin/master</span><br><span class="line">git <span class="built_in">log</span> remotes/origin/master</span><br><span class="line">git <span class="built_in">log</span> refs/remotes/origin/master</span><br></pre></td></tr></table></figure><p>通常都是使用省略 <code>refs/heads/</code> 和 <code>refs/remotes/</code> 的形式。</p><p>以上示例中 <code>RefSpec</code> 中包含 <code>*</code> 会使 Git 拉取所有远程分支到本地，如果想让Git只拉取固定的分支，可以将 <code>*</code> 修改为指定的分支名。</p><p>也可以在命令行上指定多个 <code>RefSpec</code>，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master:refs/remotes/origin/master topic:refs/remotes/origin/topic</span><br></pre></td></tr></table></figure><p>同样，也可以将以上命令行中的 <code>RefSpec</code> 写入配置中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[remote "origin"]</span></span><br><span class="line">       url = git@github.com:liuyanjie/knowledge.git</span><br><span class="line">       fetch = +refs/heads/master:refs/remotes/origin/master</span><br><span class="line">       fetch = +refs/heads/develop:refs/remotes/origin/develop</span><br><span class="line">       fetch = +refs/heads/feature/*:refs/remotes/origin/feature/*</span><br></pre></td></tr></table></figure><p>以上，<code>feature</code> 可以看做是命名空间，划分不同的分支类型。</p><p>上面描述都是拉取时 <code>RefSpec</code> 的作用，同样推送是也需要 <code>RefSpec</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master:refs/heads/qa/master</span><br></pre></td></tr></table></figure><p>推送一个空分支可以删除远程分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/heads/qa/master</span><br></pre></td></tr></table></figure><p><code>RefSpec</code> 描述了本地仓库分支和远程仓库分支的对应关系。很多时候可以省略，因为 Git 包含了很多默认行为。</p><p>远程仓库 <code>refs/heads/*</code> 中 的分支大都是 其他 <code>本地仓库</code> 同步到远程的。</p><p>远程仓库 <code>refs/heads/*</code> 中 <code>创建</code> 的新分支，在同步数据的时候默认会被拉到本地，<code>删除</code> 的分支默认不会在本地进行同步删除，<code>修改</code> 的分支会被更新，并与本地追踪的开发分支进行合并。</p><p>更多阅读：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YxL0dpdC3lhoXpg6jljp/nkIYtVGhlLVJlZnNwZWM=" title="https://git-scm.com/book/zh/v1/Git-内部原理-The-Refspec">Git 内部原理 - The Refspec<i class="fa fa-external-link"></i></span></p><p>以上，通过 <code>RefSpec</code> 描述的 本地仓库 和 远程仓库 中 分支 是如何对应的，了解了 本地仓库 和 远程仓库 之间的对应关系。</p><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1yZW1vdGU=" title="https://git-scm.com/docs/git-remote">git remote<i class="fa fa-external-link"></i></span></h3><blockquote><p>管理本地仓库对应的一组远程仓库，包括 查看、更新、添加、删除、重命名、设置 等一系列操作</p></blockquote><p>该命令的主要工作是在维护配置文件，也就是维护 <code>.git/config</code>，通常当不记得命令的时候，可以直接修改配置文件，因为配置文件格式很简单，很容易记忆。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git remote [-v | --verbose]</span><br><span class="line">git remote [-v | --verbose] show [-n] &lt;name&gt;…​</span><br><span class="line">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]</span><br><span class="line"></span><br><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote remove   &lt;name&gt;</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt;</span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class="line">git remote <span class="built_in">set</span>-branches  [--add] &lt;name&gt; &lt;branch&gt;…​</span><br><span class="line"></span><br><span class="line">git remote get-url       [--push] [--all] &lt;name&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url       [--push] &lt;name&gt; &lt;new-url&gt; [&lt;old-url&gt;]</span><br><span class="line">git remote <span class="built_in">set</span>-url --add [--push] &lt;name&gt; &lt;new-url&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line">git remote [-v | --verbose] show [-n] &lt;name&gt;…​</span><br><span class="line"></span><br><span class="line">git remote prune [-n | --dry-run] &lt;name&gt;…​</span><br><span class="line"></span><br><span class="line">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">git remote                                                  <span class="comment"># 列出已经存在的远程分支</span></span><br><span class="line">git remote -v                                               <span class="comment"># 查看远程主机的地址</span></span><br><span class="line">git remote show   remote_name                               <span class="comment"># 查看该远程主机的详细信息</span></span><br><span class="line">git remote add    remote_name remote_url                    <span class="comment"># 添加远程主机</span></span><br><span class="line">git remote remove remote_name                               <span class="comment"># 删除远程主机</span></span><br><span class="line">git remote rename remote_name new_remote_name               <span class="comment"># 重命名远程主机</span></span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-head remote_name branch_name --auto          <span class="comment"># 查询远程获得默认分支</span></span><br><span class="line">git remote <span class="built_in">set</span>-head remote_name branch_name --delete        <span class="comment"># 删除默认分支</span></span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-branches [--add] remote_name branch_name     <span class="comment"># 设置 RefSpec， [remote "remote_name"].fetch</span></span><br><span class="line"></span><br><span class="line">git remote get-url remote_name                              <span class="comment"># 查看远程主机地址 [remote "remote_name"].url</span></span><br><span class="line">git remote <span class="built_in">set</span>-url remote_name git://new.url.here           <span class="comment"># 设置远程主机地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url remote_name --push   git://new.url.here  <span class="comment"># 修改远程主机地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url remote_name --add    git://new.url.here  <span class="comment"># 修改远程主机地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url remote_name --delete git://new.url.here  <span class="comment"># 删除远程主机地址</span></span><br><span class="line"></span><br><span class="line">git remote prune [-n | --dry-run] &lt;remote_name&gt;…​            <span class="comment"># 删除某个远程名下过期（即不存在）的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># see http://stackoverflow.com/questions/1856499/differences-between-git-remote-update-and-fetch</span></span><br><span class="line">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: git@github.com:liuyanjie/knowledge.git</span><br><span class="line">  Push  URL: git@github.com:liuyanjie/knowledge.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    feature/travis-ci tracked</span><br><span class="line">    master            tracked</span><br><span class="line">  Local branches configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</span><br><span class="line">    feature/travis-ci merges with remote feature/travis-ci</span><br><span class="line">    master            merges with remote master</span><br><span class="line">  Local refs configured <span class="keyword">for</span> <span class="string">'git push'</span>:</span><br><span class="line">    feature/travis-ci pushes to feature/travis-ci (up to date)</span><br><span class="line">    master            pushes to master            (up to date)</span><br></pre></td></tr></table></figure><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1mZXRjaA==" title="https://git-scm.com/docs/git-fetch">git fetch<i class="fa fa-external-link"></i></span></h3><blockquote><p>从另外一个仓库下载 <strong>Refs</strong>，以及完成他们的变更历史所需要的 <strong>Objects</strong>，追踪的远程分支将会被更新。</p></blockquote><p><code>git fetch</code> 的主要工作就是和远程同步 <code>Refs</code>，而 <code>Refs</code> 可以 被 <code>创建、修改、删除</code>，所以 <code>fetch</code> 操作必然应该能够同步这些变化。</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1mZXRjaCNfcmVtb3Rlc19hX2lkX3JlbW90ZXNfYQ==" title="https://git-scm.com/docs/git-fetch#_remotes_a_id_remotes_a">REMOTES<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1mZXRjaCNfY29uZmlndXJlZF9yZW1vdGVfdHJhY2tpbmdfYnJhbmNoZXNfYV9pZF9jcnRiX2E=" title="https://git-scm.com/docs/git-fetch#_configured_remote_tracking_branches_a_id_crtb_a">CONFIGURED REMOTE-TRACKING BRANCHES<i class="fa fa-external-link"></i></span></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;…​]]</span><br><span class="line">git fetch [&lt;options&gt;] &lt;group&gt;</span><br><span class="line">git fetch --multiple [&lt;options&gt;] [(&lt;repository&gt; | &lt;group&gt;)…​]</span><br><span class="line">git fetch --all [&lt;options&gt;]</span><br></pre></td></tr></table></figure><p><code>.git/FETCH_HEAD</code>：是一个版本链接，记录在本地的一个文件中，指向着目前已经从远程仓库取下来的分支的末端版本。</p><p>执行过 <code>fetch</code> 操作的项目都会存在一个 <code>FETCH_HEAD</code> 列表，其中每一行对应于远程服务器的一个分支。</p><p>当前分支指向的 <code>FETCH_HEAD</code>，就是这个文件第一行对应的那个分支。</p><p>从本质上来说，唯一能从服务器下拉取数据的只有 <code>fetch</code>，其他命令的下拉数据的操作都是基于 <code>fetch</code> 的，所以 <code>fetch</code> 必然需要能够尽可能处理所有下拉数据时可能出现的情况。</p><p>Options:</p><ul><li><p>[shallow] 限制下拉指定的提交数：</p><ul><li><code>--depth=&lt;depth&gt;</code></li><li><code>--deepen=&lt;depth&gt;</code></li></ul></li><li><p>[shallow]限制下拉指定的提交时间：</p><ul><li><code>--shallow-since=&lt;date&gt;</code></li><li><code>--shallow-exclude=&lt;revision&gt;</code></li></ul></li><li><p>[deep]</p><ul><li><code>--unshallow</code>，<code>deep clone</code></li><li><code>--update-shallow</code></li></ul></li><li><p>[prune] 剪枝操作</p><p>远程仓库可能对已有的分支标签进行删除，而本地仓库并未删除，需要同步删除操作</p><ul><li><code>-p</code> <code>--prune</code></li><li><code>-p</code> <code>--prune-tags</code></li></ul></li><li><p>[tags] 默认情况下，<code>git fetch</code> 会下拉 <code>tag</code></p><ul><li><code>-t</code> <code>--tags</code> 【默认】下拉标签</li><li><code>-n</code> <code>--no-tags</code> 不下拉标签</li></ul></li><li><p>子模块</p><ul><li><code>--recurse-submodules-default=[yes|on-demand]</code></li><li><code>--recurse-submodules[=yes|on-demand|no]</code></li><li><code>--no-recurse-submodules</code></li><li><code>--submodule-prefix=&lt;path&gt;</code></li></ul></li></ul><p>再看对应关系：</p><table><thead><tr><th>local-branch@local</th><th>remote-branch@local</th><th>remote-branch@remote</th></tr></thead><tbody><tr><td><code>master</code></td><td><code>origin/master</code></td><td><code>master</code></td></tr><tr><td><code>feature/travis-ci</code></td><td><code>origin/feature/travis-ci</code></td><td><code>feature/travis-ci</code></td></tr><tr><td><code>refs/heads/feature/travis-ci</code></td><td><code>refs/remotes/origin/feature/travis-ci</code></td><td><code>refs/heads/feature/travis-ci</code></td></tr></tbody></table><p><code>git fetch</code> 将 <code>remote-branch@remote</code> fetch <code>remote-branch@local</code>，而 <code>RefSpec（+refs/heads/*:refs/remotes/origin/*）</code> 前面的 <code>+</code> 使 Git 在不能快速前进的情况下也强制更新，所以不会出现 <code>remote-branch@remote --merge--&gt; remote-branch@local</code> 的情况，实际上合并是不合理的行为，因为本地的 <code>refs/remotes/origin/*</code> 就是与远程保持同步的，如果合并了，就不同步了，更重要的是，远程分支可能修改了分支历史，如果合并，修改前的内容又合并进版本库了，有可能还需要解决冲突，而之后的 <code>remote-branch@local --merge--&gt; local-branch@local</code> 又会有可能合并。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git fetch                                         <span class="comment"># 获取 所有远程仓库 上的所有分支，将其记录到 .git/FETCH_HEAD 文件中</span></span><br><span class="line">git fetch -all                                    <span class="comment"># 获取 所有远程仓库 上的所有分支</span></span><br><span class="line">git fetch remote                                  <span class="comment"># 获取 remote 上的所有分支</span></span><br><span class="line">git fetch remote branch-name                      <span class="comment"># 获取 remote 上的分支：branch-name</span></span><br><span class="line">git fetch remote branch-name:<span class="built_in">local</span>-branch-name    <span class="comment"># 获取 remote 上的分支：branch-name，并在本地创建对应分支</span></span><br><span class="line">git fetch remote branch-name:<span class="built_in">local</span>-branch-name -f <span class="comment"># 获取 remote 上的分支：branch-name，并在本地创建对应分支，[强制]</span></span><br><span class="line">git fetch -f | --force                            <span class="comment"># 当使用 refspec(&lt;branch&gt;:&lt;branch&gt;) 时，跳过亲子关系检查，强制更新本地分支</span></span><br><span class="line">git fetch -p | --prune                            <span class="comment"># 获取所有远程分支并清除服务器上已删掉的分支</span></span><br><span class="line">git fetch -t | --tags                             <span class="comment"># 从远程获取数据时获取tags</span></span><br><span class="line">git fetch -n | --no-tags                          <span class="comment"># 从远程获取数据时去除tags</span></span><br><span class="line">git fetch --progress --verbose                    <span class="comment"># 显示进度及冗长日志</span></span><br><span class="line">git fetch --dry-run                               <span class="comment"># 显示做了什么，但是并不实际修改</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --depth=3 --no-tags --progress origin +refs/heads/master:refs/remotes/origin/master  +refs/heads/release/*:refs/remotes/origin/release/*</span><br><span class="line">git fetch --depth=3 --no-tags --progress git@github.com:liuyanjie/knowledge.git +refs/heads/master:refs/remotes/origin/master  +refs/heads/release/*:refs/remotes/origin/release/*</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch --prune --progress --verbose --dry-run</span><br><span class="line">From github.com:remote-name/branch-name</span><br><span class="line"> - [deleted]             (none)     -&gt; origin/feature/abcd</span><br><span class="line"> - [deleted]             (none)     -&gt; origin/feature/efg</span><br><span class="line">remote: Counting objects: 34, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (18/18), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 34 (delta 18), reused 24 (delta 16), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (34/34), <span class="keyword">done</span>.</span><br><span class="line">   f4e75b13a..6a338066c  master              -&gt; origin/master</span><br><span class="line"> + c29324269...641076244 develop             -&gt; origin/develop  (forced update)</span><br><span class="line"> = [up to date]          release/1.0.0       -&gt; origin/release/1.0.0</span><br><span class="line"> * [new branch]          release/1.1.0       -&gt; origin/release/1.1.0</span><br><span class="line"> * [new tag]             v1.1.0              -&gt; v1.1.0</span><br></pre></td></tr></table></figure><p><code>--prune</code> 只能清理 <code>.git/refs/remotes/remote-name</code> 目录下的远程追踪分支，而不会删除 <code>.git/refs/heads</code> 下的本地分支，即使这些分支已经合并，这些分支的清理需要特定的命令。</p><p>清理本地已合并的分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged | egrep -v <span class="string">"(^\*|master|develop|release)"</span> <span class="comment"># 查看确认</span></span><br><span class="line">git branch --merged | egrep -v <span class="string">"(^\*|master|develop|release)"</span> | xargs git branch -d</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merged | egrep -v <span class="string">"(^\*|master|develop|release)"</span> | xargs git branch -d</span><br><span class="line">Deleted branch feature/auto-tag-ci (was 98147f0e3).</span><br><span class="line">Deleted branch feature/build-optimize (was d359f4179).</span><br><span class="line">Deleted branch feature/contract (was c0c4bdaa8).</span><br><span class="line">Deleted branch feature/cross-domain (was 2e9b25c82).</span><br><span class="line">Deleted branch feature/deploy (was 3650db271).</span><br><span class="line">Deleted branch feature/nvmrc (was 1d174fcd8).</span><br><span class="line">Deleted branch feature/winston-logstash (was f13700c66).</span><br></pre></td></tr></table></figure><p>清理远程已合并的分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r --merged | egrep -v <span class="string">"(^\*|master|develop|release)"</span> | sed <span class="string">'s/origin\//:/'</span> <span class="comment"># 查看确认</span></span><br><span class="line">$ git branch -r --merged | egrep -v <span class="string">"(^\*|master|develop|release)"</span> | sed <span class="string">'s/origin\//:/'</span> | xargs -n 1 git push origin</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r --merged | egrep -v <span class="string">"(^\*|master|develop|release)"</span> | sed <span class="string">'s/origin\//:/'</span> | xargs -n 1 git push origin</span><br><span class="line">To github.com:liuyanjie/knowledge.git</span><br><span class="line"> - [deleted]             feature/xxxx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin master:refs/remotes/origin/master topic:refs/remotes/origin/topic</span><br><span class="line">From git@github.com:schacon/simple</span><br><span class="line"> ! [rejected]        master     -&gt; origin/master  (non fast forward)</span><br><span class="line"> * [new branch]      topic      -&gt; origin/topic</span><br></pre></td></tr></table></figure><p>在上面这个例子中， <code>master</code> 分支因为不是一个可以 <code>快速演进</code> 的引用而拉取操作被拒绝。你可以在 <code>RefSpec</code> 之前使用一个 <code>+</code> 号来重载这种行为。</p><p>输出格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;flag&gt; &lt;summary&gt; &lt;from&gt; -&gt; &lt;to&gt; [&lt;reason&gt;]</span><br></pre></td></tr></table></figure><p>输出格式详细介绍见：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1mZXRjaCNfb3V0cHV0" title="https://git-scm.com/docs/git-fetch#_output">OUTPUT<i class="fa fa-external-link"></i></span></p><p><code>fetch</code> 负责将 远程仓库 更新到 远程仓库在本地的对应部分，其他工作又其他 命令 负责。</p><p>在实际使用中，大多数时候都是使用 <code>pull</code> 间接的使用 <code>fetch</code>。</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1wdWxs" title="https://git-scm.com/docs/git-pull">git pull<i class="fa fa-external-link"></i></span></h3><blockquote><p>将来自远程存储库的更改合并到当前分支中</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [options] [&lt;repository&gt; [&lt;refspec&gt;…​]]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master  <span class="comment"># 获取远程分支 master 并 merge 到当前分支</span></span><br></pre></td></tr></table></figure><p>默认模式下，<code>git pull</code> 等价于以下两步:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure><p>特例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git checkout master</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p>更确切的说，<code>git pull</code> 已指定的参数运行 <code>git fetch</code>，然后 调用 <code>git merge</code> 合并 检索到的分支头到当前分支，通过 <code>--rebase</code> 参数，<code>git merge</code> 也可以被替换成 <code>git rebase</code>。</p><p>假定有如下的历史，并且当前分支是 <code>master</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C</span><br><span class="line">     /</span><br><span class="line">D---E---F---G ← master</span><br><span class="line">    ↑</span><br><span class="line">    origin/master in your repository</span><br></pre></td></tr></table></figure><p>调用 <code>git pull</code> 时，首先需要 <code>fetch</code> 变更从远处分支，下拉之后的仓库状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C ← origin/master in your repository</span><br><span class="line">     /</span><br><span class="line">D---E---F---G ← master</span><br></pre></td></tr></table></figure><p>因为 远程分支 master (C) 已经和 本地分支 master (G) 已经处于分离状态，此时，<code>git merge</code> 合并 <code>origin/master</code> 到 <code>master</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C ← origin/master</span><br><span class="line">     /         \</span><br><span class="line">D---E---F---G---H ← master</span><br></pre></td></tr></table></figure><p>以上过程发生了一次 <code>远程</code> 合并到 <code>本地</code> 的情形，git 会自动生成类似下面的 <code>commit message</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Merge branch &apos;master&apos; of github.com:liuyanjie/knowledge into master</span><br></pre></td></tr></table></figure><p>出现 <code>远程</code> 合并到 <code>本地</code> 的情形 在 Git 中是一种不良好的实践，应该极力避免甚至是禁止出现，这种情形在多个人同时在同一个分支上开发的时候非常容易出现。</p><p>记住一点：一般来书，<code>分支</code>是要合并到远程服务器上的分支，而不是远程服务分支合并到本地分支的。</p><p>在实际开发过程中，所有的合并操作都应该发生在远程服务器上，保持所有的分支有清晰的历史。同样，也应该避免不必要的合并，甚至是禁止合并。</p><blockquote><p>一般情况下，创建了分支必然需要通过合并来将分支上的内容整合到分支的基上，但是也有不合并的其他方法</p></blockquote><p>合并产生的 <code>Commit</code> 并未给版本库带来新的改变，但是却使版本历史不够清晰了。</p><p>合并使分支历史从单向链表变成了有向图，一堆线杂乱无章交错，分支历史难以理解。</p><p>合并产生的 <code>Commit</code> 有两个或多个父 <code>Commit</code>， <code>Reset</code> 难以进行。</p><p>如何避免 本地合并？</p><ol><li>在 <code>commit</code> 之前先 <code>pull</code>，避免分叉。</li><li>在 <code>commit</code> 之后立即 <code>push</code>，使其他人的本地仓库能及时获取到最新的 <code>commit</code>。</li></ol><p>知道一定会 发生本地 合并时如何处理？</p><ol><li><code>git pull --ff-only</code> or <code>git fetch</code></li><li><code>git rebase origin/master</code></li></ol><p>已经出现 本地合并 如何解决？</p><ol><li><code>git reset C</code> 重置当前分支到 <code>C</code>，<code>F</code> <code>G</code> 会重新回到暂存区。</li><li><code>git commit -am &quot;commit message&quot;</code> 重新提交。</li><li><code>git push</code></li></ol><p>解决之后的分支图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">              origin/master</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C---F---G ← master</span><br><span class="line">     /</span><br><span class="line">D---E</span><br></pre></td></tr></table></figure><p>假设版本库当前的状态如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C</span><br><span class="line">     /</span><br><span class="line">D---E ← master</span><br><span class="line">    ↑</span><br><span class="line">    origin/master in your repository</span><br></pre></td></tr></table></figure><p>以上版本库库满足快速前进的条件，可以进行快速前进 <code>--ff</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C ← master</span><br><span class="line">     /        ↑</span><br><span class="line">D---E         origin/master in your repository</span><br></pre></td></tr></table></figure><p>以上版本库满足快速前进的条件，可以进行快速前进 <code>--ff</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C</span><br><span class="line">     /</span><br><span class="line">D---E ← master</span><br><span class="line">    ↑</span><br><span class="line">    origin/master in your repository</span><br></pre></td></tr></table></figure><p>快速前进不产生新的 <code>Commit</code>，效果上只移动分支头即可，默认情况下进行就是快速前进</p><p>在能够进行快速前进的情况下，也可以强制进行合并，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">              master on origin</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C ← origin/master</span><br><span class="line">     /         \</span><br><span class="line">D---E-----------H ← master</span><br></pre></td></tr></table></figure><p>所以 <code>git pull</code> 的参数主要由 <code>git fetch</code> 和 <code>git merge</code> 的参数组成。</p><p><code>git pull</code> 的运行过程：</p><ol><li>首先，基于本地的 <code>FETCH_HEAD</code> 记录，比对本地的 <code>FETCH_HEAD</code> 记录与远程仓库的版本号</li><li>然后通过 <code>git fetch</code> 获得当前指向的远程分支的后续版本的数据</li><li>最后通过 <code>git merge</code> 将其与本地的当前分支合并</li></ol><p>若有多个 remote，git pull remote_name 所做的事情是：</p><ul><li>获取 <code>[remote_name]</code> 下的所有分支</li><li>寻找本地分支有没有 <code>tracking</code> 这些分支的，若有则 <code>merge</code> 这些分支，若没有则 <code>merge</code> 当前分支</li></ul><p>另外，若只有一个 remote，假设叫 origin，那么 git pull 等价于 git pull origin；平时养成好习惯，没谱的时候都把【来源】带上。</p><p>怎么知道 <code>tracking</code> 了没有？</p><ul><li>如果你曾经这么推过：<code>git push -u origin master</code>，那么你执行这条命令时所在的分支就已经 <code>tracking to origin/master</code> 了</li><li>如果你记不清了：<code>cat .git/config</code>，由此可见，<code>tracking</code> 的本质就是指明 <code>pull</code> 的 <code>merge</code> 动作来源</li></ul><p>总结:</p><ul><li><code>git pull = git fetch + git merge</code></li><li><code>git fetch</code> 拿到了远程所有分支的更新，<code>cat .git/FETCH_HEAD</code> 可以看到其状态，若是 <code>not-for-merge</code> 则不会有接下来的 <code>merge</code> 动作</li><li><code>merge</code> 动作的默认目标是当前分支，若要切换目标，可以直接切换分支</li><li><code>merge</code> 动作的来源则取决于你是否有 <code>tracking</code>，若有则读取配置自动完成，若无则请指明【来源】</li></ul><p><code>pull</code> 时还可能存在远程分支不存在的情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b <span class="built_in">test</span></span><br><span class="line">$ git pull</span><br><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(1) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line"></span><br><span class="line">    git branch --<span class="built_in">set</span>-upstream-to=origin/&lt;branch&gt; <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream-to=origin/<span class="built_in">test</span> <span class="built_in">test</span></span><br><span class="line">error: the requested upstream branch <span class="string">'origin/test'</span> does not exist</span><br><span class="line">hint:</span><br><span class="line">hint: If you are planning on basing your work on an upstream</span><br><span class="line">hint: branch that already exists at the remote, you may need to</span><br><span class="line">hint: run <span class="string">"git fetch"</span> to retrieve it.</span><br><span class="line">hint:</span><br><span class="line">hint: If you are planning to push out a new <span class="built_in">local</span> branch that</span><br><span class="line">hint: will track its remote counterpart, you may want to use</span><br><span class="line">hint: <span class="string">"git push -u"</span> to <span class="built_in">set</span> the upstream config as you push.</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">remote: Counting objects: 81, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (29/29), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 81 (delta 42), reused 81 (delta 42), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (81/81), <span class="keyword">done</span>.</span><br><span class="line">From github.com:liuyanjie/knowledge</span><br><span class="line">   2f977e2..be00fff  feature/x -&gt; origin/feature/x</span><br><span class="line">Your configuration specifies to merge with the ref <span class="string">'refs/heads/feature/abc'</span></span><br><span class="line">from the remote, but no such ref was fetched.</span><br></pre></td></tr></table></figure><p>需要提及的一点是：</p><p><code>pull</code> 操作，不应该涉及 <code>合并</code> 或 <code>变基</code> 操作，即 <code>pull</code> 应该总是 快速前进 的。</p><p>再看对应关系：</p><table><thead><tr><th>head@local</th><th>remote@local</th><th>remote@remote</th></tr></thead><tbody><tr><td><code>master</code></td><td><code>origin/master</code></td><td><code>master</code></td></tr><tr><td><code>feature/travis-ci</code></td><td><code>origin/feature/travis-ci</code></td><td><code>feature/travis-ci</code></td></tr><tr><td><code>refs/heads/feature/travis-ci</code></td><td><code>refs/remotes/origin/feature/travis-ci</code></td><td><code>refs/heads/feature/travis-ci</code></td></tr></tbody></table><p><code>git pull</code> 在 <code>git fetch</code> 的基础之上增加了 <code>git merge</code>，将 <code>远程分支对应的本地分支</code> 合并到 <code>追踪的本地开发分支</code></p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1wdXNo" title="https://git-scm.com/docs/git-push">git push<i class="fa fa-external-link"></i></span></h3><blockquote><p>使用本地引用更新远程引用，同时发送完成给定引用所必需的对象。</p></blockquote><p><code>git push</code> 是与 <code>git pull</code> 相对应的推送操作，同样需要能够推送本地的多种情形的变更到远程仓库。git 向远程仓库推送的操作只有 <code>push</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line">     [--all | --mirror | --tags]</span><br><span class="line">     [--follow-tags]</span><br><span class="line">     [--atomic]</span><br><span class="line">     [-n | --dry-run]</span><br><span class="line">     [--receive-pack=&lt;git-receive-pack&gt;]</span><br><span class="line">     [--repo=&lt;repository&gt;]</span><br><span class="line">     [-f | --force]</span><br><span class="line">     [-d | --delete]</span><br><span class="line">     [--prune]</span><br><span class="line">     [-v | --verbose]</span><br><span class="line">     [-u | --<span class="built_in">set</span>-upstream]</span><br><span class="line">     [--push-option=&lt;string&gt;]</span><br><span class="line">     [--[no-]signed|--sign=(<span class="literal">true</span>|<span class="literal">false</span>|<span class="keyword">if</span>-asked)]</span><br><span class="line">     [--force-with-lease[=&lt;ref-name&gt;[:&lt;expect&gt;]]]</span><br><span class="line">     [--no-verify]</span><br><span class="line">     [&lt;repository&gt; [&lt;refspec&gt;…​]]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git push                                 <span class="comment"># 如果当前分支只有一个追踪分支，那么主机名都可以省略</span></span><br><span class="line">git push origin HEAD                     <span class="comment"># 将 当前 分支 推送 到远程 master 分支</span></span><br><span class="line">git push origin master                   <span class="comment"># 将 master 分支 推送 到远程 master 分支</span></span><br><span class="line">git push origin master -u                <span class="comment"># 将 master 分支 推送 到远程 master 分支，并建立追踪关系</span></span><br><span class="line">git push origin master --<span class="built_in">set</span>-upstream    <span class="comment"># 同上</span></span><br><span class="line">git push origin --all                    <span class="comment"># 将所有本地分支都推送到origin主机</span></span><br><span class="line">git push origin --force                  <span class="comment"># 强制推送更新远程分支</span></span><br><span class="line"></span><br><span class="line">git push origin :hotfix/xxxx             <span class="comment"># 删除远程仓库的 hotfix/xxxx 分支</span></span><br><span class="line">git push origin :master                  <span class="comment"># 删除远程仓库的 master 分支</span></span><br><span class="line">git push origin --delete master          <span class="comment"># 删除远程仓库的 master 分支</span></span><br><span class="line"></span><br><span class="line">git push origin --prune                  <span class="comment"># 删除在本地没有对应分支的远程分支</span></span><br><span class="line"></span><br><span class="line">git push --tags                          <span class="comment"># 把所有tag推送到远程仓库</span></span><br></pre></td></tr></table></figure><p>推送模式：</p><ul><li>simple  模式: 不带任何参数的git push，默认只推送当前分支。2.0以上版本，默认此方式。</li><li>matching模式: 会推送所有有对应的远程分支的本地分支。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global push.default matching</span><br><span class="line">git config --global push.default simple</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Enumerating objects: 9, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 1.25 KiB | 1.25 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2/2), completed with 2 <span class="built_in">local</span> objects.</span><br><span class="line">To github.com:liuyanjie/knowledge.git</span><br><span class="line">   d26f671..e081fb3  master -&gt; master</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --delete ref...</span><br></pre></td></tr></table></figure><p>推送代码到服务器与拉取代码到本地其实是相同的，所以服务代码推送到服务全之后，同样有可能出现需要合并的情况，如推送者本地仓库在没有 <code>pull</code> 后进行 <code>commit</code> 后 <code>push</code>，导致本地代码和远程服务器代码分叉，此时服务端也要面临合并问题，合并就有可能产生冲突，但是服务端没有解决冲突的能力，所以实质上服务端是禁止发生合并的，只能进行快速前进。当不能快速前进，服务端会返回错误给客户端，错误会提示先 <code>pull</code> 再 <code>push</code>。此时，<code>pull</code> 操作是一定会进行 <code>merge</code> 的，可能需要处理 <code>merge</code>，此时就需要处理前面提到的处理本地合并的问题了。</p><h3 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1zdWJtb2R1bGU=" title="https://git-scm.com/docs/git-submodule">git submodule<i class="fa fa-external-link"></i></span></h3><blockquote><p>初始化、更新或检查子模块</p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdHN1Ym1vZHVsZXM=" title="https://git-scm.com/docs/gitsubmodules">gitsubmodules<i class="fa fa-external-link"></i></span>  - mounting one repository inside another</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] add [-b &lt;branch&gt;] [-f|--force] [--name &lt;name&gt;]</span><br><span class="line">        [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--] &lt;repository&gt; [&lt;path&gt;]</span><br><span class="line">git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;…​]</span><br><span class="line">git submodule [--quiet] init [--] [&lt;path&gt;…​]</span><br><span class="line">git submodule [--quiet] deinit [-f|--force] (--all|[--] &lt;path&gt;…​)</span><br><span class="line">git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]</span><br><span class="line">        [--[no-]recommend-shallow] [-f|--force] [--rebase|--merge]</span><br><span class="line">        [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--recursive]</span><br><span class="line">        [--<span class="built_in">jobs</span> &lt;n&gt;] [--] [&lt;path&gt;…​]</span><br><span class="line">git submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) &lt;n&gt;]</span><br><span class="line">        [commit] [--] [&lt;path&gt;…​]</span><br><span class="line">git submodule [--quiet] foreach [--recursive] &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">git submodule [--quiet] sync [--recursive] [--] [&lt;path&gt;…​]</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add -b master --name knowledge --reference=/Volumes/Data/Data/ws/knowledge -- git@github.com:liuyanjie/knowledge.git ./third_parts/knowledge</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">'origin/master'</span> by 1 commit.</span><br><span class="line">  (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   .gitmodules</span><br><span class="line">new file:   third_parts</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"..."</span></span><br><span class="line">[master 83506db] ...</span><br><span class="line"> 2 files changed, 5 insertions(+)</span><br><span class="line"> create mode 100644 .gitmodules</span><br><span class="line"> create mode 160000 third_parts</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Enumerating objects: 7, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (7/7), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 5.31 KiB | 5.31 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">To github.com:liuyanjie/about.git</span><br><span class="line">   53abb09..83506db  master -&gt; master</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>Git 是一个分布式的结构，有本地版本库和远程版本库，便有了本地分支和远程分支的区别了。</p><p>本地分支和远程分支在 <code>git push</code> 的时候可以随意指定，交错对应，只要不出现版本从图即可。</p><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git-branch"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1icmFuY2g=" title="https://git-scm.com/docs/git-branch">git-branch<i class="fa fa-external-link"></i></span></h3><blockquote><p>创建、修改、删除、查看、重命名、复制分支</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch (-t | --[no-]track) (-l | --[no-]create-reflog) [-f | --force] &lt;branch-name&gt; [&lt;start-point&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置/修改上游分支</span></span><br><span class="line">git branch [-u | --<span class="built_in">set</span>-upstream-to=] &lt;upstream&gt; [&lt;branch-name&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch -a --all</span><br><span class="line">git branch -r</span><br><span class="line">git branch --list &lt;pattern&gt;...</span><br><span class="line">git branch --list --[no-]contains [&lt;commit&gt;]</span><br><span class="line">git branch --list --[no-]merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置分支</span></span><br><span class="line">git branch (-f --force) &lt;branch-name&gt; &lt;start-point&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名分支</span></span><br><span class="line">git branch (-m --move | -M) [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br><span class="line">git branch (-m --move) --force [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br><span class="line">git branch -M [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制分支</span></span><br><span class="line">git branch (-c --copy) [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br><span class="line">git branch (-c --copy) --force [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br><span class="line">git branch -C [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"><span class="comment"># -r 可以同时删除远程追踪分支，但是只有在远程分支删除的情况下才有意义，否则会fetch回来</span></span><br><span class="line">git branch (-d --delete) [-r] &lt;branchname&gt;…​</span><br><span class="line">git branch (-d --delete)  --force [-r] &lt;branchname&gt;…​</span><br><span class="line">git branch -D [-r] &lt;branchname&gt;…​</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑分支描述</span></span><br><span class="line">git branch --edit-description [&lt;branchname&gt;]</span><br></pre></td></tr></table></figure><p><code>git branch</code> 只能操作本地仓库，无法直接操作远程仓库，操作远程仓库必须通过 <code>git push</code>。</p><p><code>remotes/origin/*</code> 下的分支删除：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push --delete &lt;branch-name&gt;</span><br><span class="line">git push :&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>以上命令在删除远程仓库的分支的同时，同步删除 <code>remotes/origin/*</code> 下的分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;remote-name&gt;/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><p>以上命令删除 <code>remotes/origin/*</code> 下的分支，但是远程分支并未删除，在 <code>git fetch</code> 后还会拉下来，所以这种删除无意义。</p><p>分支类型：</p><ul><li>远程分支（remote-branch），远程服务器上的分支，<code>refs/heads/*</code>@remote，是<code>远程追踪分支</code>的<code>上游分支</code>。</li><li>远程追踪分支（remote-tracking branch），远程服务器对应在本地的分支，与<code>远程分支</code>存在<code>追踪</code>关系，可能是<code>本地分支</code>的<code>上游分支</code>。</li><li>本地分支（local branch），<code>refs/heads/*</code>@local，可能与<code>远程追踪分支</code>存在<code>追踪</code>关系。</li></ul><p>分支关系：</p><ul><li>追踪分支（tracking branch），能够主动追踪其他分支，自动跟随其他分支变化更新的分支。</li><li>上游分支（upstream branch），被追踪的分支。</li></ul><blockquote><p>Checking out a <code>local branch</code> from a <code>remote-tracking branch</code> automatically creates what is called a <code>“tracking branch”</code> (and the branch it tracks is called an <code>“upstream branch”</code>).</p></blockquote><p>只有把概念定义清楚，才能够进行准确的描述，要不然都可能带来理解上的偏差。</p><h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git-tag"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC10YWc=" title="https://git-scm.com/docs/git-tag">git-tag<i class="fa fa-external-link"></i></span></h3><blockquote><p>创建、删除、查看、校验标签</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;] [-e] &lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]</span><br><span class="line">git tag -d &lt;tagname&gt;…​</span><br><span class="line">git tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--no-contains &lt;commit&gt;]</span><br><span class="line">  [--points-at &lt;object&gt;] [--column[=&lt;options&gt;] | --no-column]</span><br><span class="line">  [--create-reflog] [--sort=&lt;key&gt;] [--format=&lt;format&gt;]</span><br><span class="line">  [--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;…​]</span><br><span class="line">git tag -v [--format=&lt;format&gt;] &lt;tagname&gt;…​</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git tag</span><br><span class="line">git tag -l --list <span class="string">"v*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git tag -a v1.0.0 -m <span class="string">"tagging version 1.0.0"</span></span><br><span class="line">git tag -a --force v1.0.0 -m <span class="string">"tagging version 1.0.0"</span></span><br><span class="line">git tag -a v1.0.0 --file=&lt;file&gt;</span><br><span class="line">git tag -a v1.0.0 &lt;commit-id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git tag -d v1.0.0</span><br></pre></td></tr></table></figure><p>与分支不同，<code>git push</code> 默认不推送标签到远程，所以需要主动推送标签：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>同样，<code>git tag</code> 只能操作本地仓库，无法直接操作远程仓库，操作远程仓库必须通过 <code>git push</code>，通常也不会直接操作远程仓库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push --delete &lt;tag-name&gt;</span><br><span class="line">git push --delete v1.0.0</span><br></pre></td></tr></table></figure><p>清理 远程不能存在本地存在 的标签：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -l | xargs git tag -d ; git fetch --tags</span><br></pre></td></tr></table></figure><p>标签并不像分支那样，存在远程标签/本地标签等区分，所以也不存在本地标签与远程标签之间的对应关系，自然也就不需要维护对应关系。</p><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git-checkout"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jaGVja291dA==" title="https://git-scm.com/docs/git-checkout">git-checkout<i class="fa fa-external-link"></i></span></h3><ul><li>切换分支并检出内容到工作区，也可创建分支</li></ul><p>检出已存在的分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout    &lt;branch&gt;</span><br><span class="line">git checkout -b &lt;branch&gt; --track &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure><p>创建并检出分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b|-B &lt;new_branch&gt; [&lt;start-point&gt;]</span><br></pre></td></tr></table></figure><p>检出<code>tree-ish</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [&lt;tree-ish&gt;] [--] &lt;pathspec&gt;…​</span><br></pre></td></tr></table></figure><p>检出内容到本地的时候会发生什么？</p><ol><li>本地是干净的，无任何修改</li><li>本地存在新增加的文件</li><li>本地存在修改后未提交的文件</li></ol><p>Ref：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jaGVja291dCNfZGV0YWNoZWRfaGVhZA==" title="https://git-scm.com/docs/git-checkout#_detached_head">DETACHED HEAD<i class="fa fa-external-link"></i></span></p><p>HEAD 通常指向某一个分支，这一分支即是当前工作的分支。当 HEAD 不再指向分支的时候，仓库即处于 <code>DETACHED HEAD</code> 状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout ccdd28a</span><br><span class="line">Note: checking out <span class="string">'ccdd28a'</span>.</span><br><span class="line"></span><br><span class="line">You are <span class="keyword">in</span> <span class="string">'detached HEAD'</span> state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make <span class="keyword">in</span> this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line"><span class="keyword">do</span> so (now or later) by using -b with the checkout <span class="built_in">command</span> again. Example:</span><br><span class="line"></span><br><span class="line">  git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line">HEAD is now at ccdd28a git update</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">HEAD detached at ccdd28a</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>处于这种状态下的仓库，如果进行修改并且提交，就会很危险，因为没有任何分支指向新的提交，当 <code>HEAD</code> 切换到其他位置的时候，当前的修改就不容易找不到了。</p><p>如果需要基于此节点进行修改，需要先基于此节点创建分支。</p><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git-merge"></a><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1tZXJnZQ==" title="https://git-scm.com/docs/git-merge">git-merge<i class="fa fa-external-link"></i></span></h3><blockquote><p>将两个或多个分支历史合并在一起</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br><span class="line">  [-q --quiet]</span><br><span class="line">  [-v --verbose]</span><br><span class="line">  [--[no-]progress]</span><br><span class="line">  [--commit] [--no-commit]</span><br><span class="line">  [-e | --edit] [--no-edit]</span><br><span class="line">  [-ff] [--no-ff] [--ff-only]</span><br><span class="line">  [--<span class="built_in">log</span>[=&lt;n&gt;]] [--no-log]</span><br><span class="line">  [-n] [--<span class="built_in">stat</span>] [--no-stat]</span><br><span class="line">  [--[no-]squash]</span><br><span class="line">  [--[no-]signoff]</span><br><span class="line">  [-s &lt;strategy&gt;] [--strategy=&lt;strategy&gt;]</span><br><span class="line">  [-X &lt;strategy-option&gt;] [--strategy-option=&lt;option&gt;]</span><br><span class="line">  [-S[&lt;keyid&gt;]] --gpg-sign[=&lt;keyid&gt;]</span><br><span class="line">  [--[no-]verify-signatures]</span><br><span class="line">  [--[no-]summary]</span><br><span class="line">  [--[no-]allow-unrelated-histories]</span><br><span class="line">  [--[no-]rerere-autoupdate]</span><br><span class="line">  [-m &lt;msg&gt;]</span><br><span class="line">  [&lt;commit&gt;…​]</span><br><span class="line"></span><br><span class="line">https://stackoverflow.com/questions/11646107/you-have-not-concluded-your-merge-merge-head-exists</span><br><span class="line"></span><br><span class="line"><span class="comment"># git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.</span></span><br><span class="line"><span class="comment"># 中断 merge，当发生冲突时，可以通过中断合并回到合并前的状态</span></span><br><span class="line">git merge --abort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续 merge，当发生冲突时，需要解决冲突，解决冲突后，继续执行合并</span></span><br><span class="line">git merge --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>有如下版本库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      A---B---C topic</span><br><span class="line">     /</span><br><span class="line">D---E---F---G master</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge topic</span><br></pre></td></tr></table></figure><p>合并后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      A---B---C topic</span><br><span class="line">     /         \</span><br><span class="line">D---E---F---G---H master</span><br></pre></td></tr></table></figure><p>squash mode</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge --squash topic</span><br><span class="line">git commit -m <span class="string">"message"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      A---B---C topic</span><br><span class="line">     /</span><br><span class="line">D---E---F---G---(ABC) master</span><br></pre></td></tr></table></figure><p><code>--squash</code> 效果相当于将 topic 分支上的多个 commit A-B-C 合并成一个 ABC，放在当前分支上，原来的 commit 历史则没有拿过来。</p><p>判断是否使用 <code>--squash</code> 选项最根本的标准是，待合并分支上的历史是否有意义。版本历史记录的应该是代码的发展，而不是开发者在编码时的活动。</p><p>只有在开发分支上每个 commit 都有其独自存在的意义，并且能够编译通过的情况下，才应该选择缺省的合并方式来保留 commit 历史。</p><p>fast forward mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              A---B---C topic</span><br><span class="line">             /</span><br><span class="line">D---E---F---G master</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --ff topic</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              A---B---C topic master</span><br><span class="line">             /</span><br><span class="line">D---E---F---G</span><br></pre></td></tr></table></figure><p>合并的前提是：准备合并的两个 <code>commit</code> 不在一条直线上，在一条直线上可以进行快速前进，也可以使用 <code>--no-ff</code> 强制合并（无意义）。</p><p>合并的过程中需要处理可能得冲突，未冲突的文件将会进行自动合并，在新版本的<code>tree</code>中产生一个新版本的<code>blob</code>，所以Git能够完整检出不需要依赖历史中的<code>commit</code>，只需要当前的<code>commit</code>。</p><p>合并的结果是：产生一个新的 <code>commit</code>，实际上，<code>squash mode</code> <code>fast forward mode</code> 并不是真正意义上的合并。</p><p>冲突：</p><p>冲突有两种类型，一种是树冲突，修改/删除同一文件，另一种是文件冲突，修改了同一文件中的相同内容。</p><p>冲突是如何判断的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      A---B---C topic</span><br><span class="line">     /</span><br><span class="line">D---E---F---G master</span><br></pre></td></tr></table></figure><p>假如有文件 <code>README.md</code> 在 <code>E</code>，且 <code>topic</code> 和 <code>master</code> 都有修改此文件，合并 <code>topic</code> 到 <code>master</code> 时，冲突检查的依据不是对比 <code>README.md@topic</code> 和 <code>README.md@master</code> 是否相同，而是对比 <code>README.md@topic</code> 和 <code>README.md@master</code> 相对于 <code>E</code> 的变化。即使是 <code>README.md</code> 文件在被修改后的内容是相同的，也会产生冲突。而冲突产生的文件，就是将 相对于 <code>E</code>，都合并到同一个文件中，并交由用户解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt</span><br><span class="line">Git makes conflict resolution easy.</span><br><span class="line">=======</span><br><span class="line">Git makes conflict resolution easy.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt</span><br></pre></td></tr></table></figure><p>最佳实践：</p><ol><li>尽量避免在本地使用 <code>merge</code>，也尽量避免在本地发生 <code>Merge</code>。</li><li><code>merge</code> 时，本地不要有未提交的更改，这些修改可能会在中断合并时丢失。</li></ol><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><blockquote><p>添加文件到索引中，为下一次提交准备内容。</p></blockquote><p>将工作区的修改添加到暂存区中，此命令使用在工作树中找到的最新内容更新索引，以准备为下次提交暂存内容。</p><p>典型的情况下，将整个文件添加到暂存区中，通过特定的选项，也可以将工作区修改的部分内容加到暂存区中。</p><p>暂存区保存工作树内容的快照，并将此快照作为下一次提交的内容。因此，在对工作树进行任何更改之后，在运行commit命令之前，必须使用add命令将任何新的或修改的文件添加到索引中。</p><p>默认情况下，<code>git add</code> 不会添加忽略的文件，<code>git add -f</code> 会进行强制添加。</p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><blockquote><p>从工作区和暂存区移除文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] &lt;file&gt;…​</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm *.txt</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm *.txt</span><br><span class="line">git add *.txt</span><br></pre></td></tr></table></figure><p>仅从暂存区删除内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached *.txt</span><br></pre></td></tr></table></figure><h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><blockquote><p>重命名或移动文件，同步更新暂存区</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git mv &lt;options&gt;…​ &lt;args&gt;…​</span><br><span class="line">git mv [-v] [-f] [-n] [-k] &lt;<span class="built_in">source</span>&gt; &lt;destination&gt;</span><br><span class="line">git mv [-v] [-f] [-n] [-k] &lt;<span class="built_in">source</span>&gt; ... &lt;destination directory&gt;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git mv old_name new_name            <span class="comment"># 重命名</span></span><br><span class="line">git mv -f old_name new_name         <span class="comment"># 强制重命名，即时目标名称已经存在</span></span><br><span class="line">git mv -k old_name new_name         <span class="comment"># 跳过会导致错误的动作</span></span><br><span class="line">git mv -v old_name new_name         <span class="comment"># 报告被移动文件</span></span><br><span class="line">git mv --dry-run old_name new_name  <span class="comment"># 只显示将会发生什么</span></span><br></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><blockquote><p>Show changes between commits, commit and working tree, etc</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git diff [options] [&lt;commit&gt;] [--] [&lt;path&gt;…​]</span><br><span class="line">git diff [options] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…​]</span><br><span class="line">git diff [options] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…​]</span><br><span class="line">git diff [options] &lt;blob&gt; &lt;blob&gt;</span><br><span class="line">git diff [options] [--no-index] [--] &lt;path&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git diff                <span class="comment"># 查看尚未暂存的文件更新了哪些部分，不加参数直接输入。</span></span><br><span class="line">git diff --cached       <span class="comment"># 查看已经暂存起来的文件(staged)和上次提交时的快照之间(HEAD)的差异</span></span><br><span class="line">git diff --staged       <span class="comment"># 显示的是下一次 commit 时会提交到HEAD的内容(不带-a情况下)</span></span><br><span class="line">git diff HEAD           <span class="comment"># 显示工作版本(Working tree)和HEAD的差别</span></span><br><span class="line">git diff topic master   <span class="comment"># 直接将两个分支上最新的提交做diff</span></span><br><span class="line">git diff topic...master <span class="comment"># 输出自 topic 和 master 分别开发以来，master 分支上的 changed。</span></span><br><span class="line">git diff --<span class="built_in">stat</span>         <span class="comment"># 查看简单的diff结果，可以加上--stat参数</span></span><br><span class="line">git diff <span class="built_in">test</span>           <span class="comment"># 查看当前目录和另外一个分支的差别 显示当前目录和另一个叫 test 分支的差别</span></span><br><span class="line">git diff HEAD -- ./lib  <span class="comment"># 显示当前目录下的lib目录和上次提交之间的差别（更准确的说是在当前分支下）</span></span><br><span class="line">git diff HEAD^ HEAD     <span class="comment"># 比较上次提交commit和上上次提交</span></span><br><span class="line">git diff SHA1 SHA2      <span class="comment"># 比较两个历史版本之间的差异</span></span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlmZl91dGlsaXR5" title="https://en.wikipedia.org/wiki/Diff_utility">Diff_utility<i class="fa fa-external-link"></i></span></p><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><blockquote><p>Record changes to the repository</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git commit                          <span class="comment"># 提交的是暂存区里面的内容，也就是 Changes to be committed 中的文件。</span></span><br><span class="line">git commit -a                       <span class="comment"># 除了将暂存区里的文件提交外，还提交 Changes bu not updated 中的文件。</span></span><br><span class="line">git commit -a -m <span class="string">'commit info'</span>      <span class="comment"># 注释，如果没有 -m，会默认会使用vi编辑注释。</span></span><br><span class="line">git commit -am <span class="string">"This is a commit"</span>   <span class="comment"># 同上，合并提交，将 add 和 commit 合为一步</span></span><br><span class="line">git commit --amend                  <span class="comment"># 对上一次提交进行修改，合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit --amend -a               <span class="comment"># 提交时忘记使用 -a 选项，导致 Changes bu not updated 中的内容没有被提交</span></span><br><span class="line">git commit --author=&lt;author&gt;        <span class="comment"># 设置作者，与提交者分开</span></span><br><span class="line">git commit --file=&lt;file&gt;            <span class="comment"># 注释从文件中读取</span></span><br></pre></td></tr></table></figure><p>对于 commit 来说，最重要的是，每一次 commit 都应该是一个完整的提交，而且应该有个规范清晰的注释。</p><p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDEvY29tbWl0X21lc3NhZ2VfY2hhbmdlX2xvZy5odG1s" title="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南<i class="fa fa-external-link"></i></span></p><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><blockquote><p>显示工作树状态</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status [&lt;options&gt;…​] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status     <span class="comment"># 显示状态</span></span><br><span class="line">git status -s  <span class="comment"># 显示简短信息</span></span><br><span class="line">git status -b  <span class="comment"># 显示分支状态</span></span><br></pre></td></tr></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><blockquote><p>重置工作区，将当前分支回退到某一节点</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…​</span><br><span class="line">git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;…​]</span><br><span class="line">git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure><p><code>git reset</code> 会修改当前分支头从某一个 <code>&lt;commit-id&gt;</code> 移动到另外的一个指定的 <code>&lt;commit-id&gt;</code></p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">              HEAD</span><br><span class="line">              ↓</span><br><span class="line">              topic</span><br><span class="line">              ↓</span><br><span class="line">      A---B---C</span><br><span class="line">     /</span><br><span class="line">D---E---F---G master</span><br></pre></td></tr></table></figure><p>当前活跃的分支是 <code>topic</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset A</span><br></pre></td></tr></table></figure><p>执行以上操作后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      HEAD</span><br><span class="line">      ↓</span><br><span class="line">      topic</span><br><span class="line">      ↓</span><br><span class="line">      A---B---C</span><br><span class="line">     /</span><br><span class="line">D---E---F---G master</span><br></pre></td></tr></table></figure><p>此时，<code>HEAD -&gt; topic -&gt; A</code>，B、C 此时处于悬挂状态，如同普通的对象一样，没有任何引用后，会被 Git GC 回收。</p><p>执行此操作后，B、C 两点虽然依然存在于仓库中，但是它们已经逻辑上脱离了Git。</p><p>此时，B、C 两点提交的内容怎么办？是不是就丢失了呢？</p><p>Git 给了我们多种选择：</p><ul><li>–soft，B、C 提交的内容不会回到工作区和暂存区。因为当前工作区内容是基于 C 修改的，所以实际上并无内容丢失。</li><li>–mixed，B、C 提交的内容回到暂存区，但是工作区内容不变，也就是某些文件处于 <code>修改未提交状态</code>。同上，也无内容丢失。</li><li>–hard，B、C 提交的内容不会回到工作区和暂存区，同时暂存区和工作区回到A点状态，B、C 提交的内容以及工作区后续的修改全部丢失。</li></ul><p>如果 <code>reset</code> 误操作操作怎么办？</p><ol><li><p>如果存在上游分支，可以通过上游分支恢复</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset master^2</span><br><span class="line">git reset origin/master</span><br></pre></td></tr></table></figure></li><li><p>可以通过 <code>reflog</code> 恢复</p><p> <code>reflog</code> 记录 HEAD 的变化，所以可以通过 <code>reflog</code> 找到 <code>reset</code> 之前的 <code>HEAD</code> 的位置，但是前提是后续节点未被垃圾回收。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">58c1d5d (HEAD -&gt; master, origin/master) HEAD@&#123;0&#125;: commit: update git</span><br><span class="line">ccdd28a (test2, test1, <span class="built_in">test</span>) HEAD@&#123;1&#125;: checkout: moving from <span class="built_in">test</span> to master</span><br><span class="line">ccdd28a (test2, test1, <span class="built_in">test</span>) HEAD@&#123;2&#125;: checkout: moving from master to <span class="built_in">test</span></span><br><span class="line">ccdd28a (test2, test1, <span class="built_in">test</span>) HEAD@&#123;3&#125;: commit: git update</span><br><span class="line">e081fb3 HEAD@&#123;4&#125;: commit: update python</span><br><span class="line">d26f671 HEAD@&#123;5&#125;: commit: update</span><br><span class="line">33db13f HEAD@&#123;6&#125;: commit (amend): update and format</span><br><span class="line">5c41033 HEAD@&#123;7&#125;: commit: update and format</span><br><span class="line">e56ec4e HEAD@&#123;8&#125;: commit: 移除乱码字符</span><br><span class="line">6595b95 HEAD@&#123;9&#125;: commit: feat(): add hexo.yaml</span><br></pre></td></tr></table></figure></li></ol><p>未提交的内容是很难就行恢复的，所有在进行 <code>reset</code> 操作时，要将工作区的内容提交。</p><p>reset 除了将工作区回退到某个节点之外，常用的应用就是将后续的多个提交合并为一个提交，因为后续提交的内容可以回到暂存区或工作区中。</p><p>在某些Git工作流中，要求将多个提交合并成一个之后才能合并到上游分支。</p><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[&lt;keyid&gt;]] &lt;commit&gt;…​</span><br><span class="line">git revert --<span class="built_in">continue</span></span><br><span class="line">git revert --quit</span><br><span class="line">git revert --abort</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD~3</span><br><span class="line">git revert -n master~5..master~2</span><br></pre></td></tr></table></figure><p><code>git revert</code> 用于撤销一个或多个提交，并建立一个新的提交。<code>commit</code> 中所做的修改都会被移除掉，相当于 <code>commit</code> 反向操作。</p><p><code>git revert</code> 通常用户快速回滚。</p><p>示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">            HEAD</span><br><span class="line">            ↓</span><br><span class="line">            master</span><br><span class="line">            ↓</span><br><span class="line">A---B---C---D</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert C</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                HEAD</span><br><span class="line">                ↓</span><br><span class="line">                master</span><br><span class="line">                ↓</span><br><span class="line">A---B---C---D---C<span class="string">'</span></span><br></pre></td></tr></table></figure><p><code>C&#39;</code> 是一个全新的 <code>Commit</code> 与 <code>C</code> 是不同的，但是这种情况下，<code>C&#39;</code> 与 <code>C</code> 中的 <code>tree</code> 是相同的。</p><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><blockquote><p>变基操作，基指的是起始提交，即参数中常见的 <start-point></start-point></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git rebase [-i | --interactive] [&lt;options&gt;] [--<span class="built_in">exec</span> &lt;cmd&gt;] [--onto &lt;newbase&gt;] [&lt;upstream&gt; [&lt;branch&gt;]]</span><br><span class="line">git rebase [-i | --interactive] [&lt;options&gt;] [--<span class="built_in">exec</span> &lt;cmd&gt;] [--onto &lt;newbase&gt;] --root [&lt;branch&gt;]</span><br><span class="line">git rebase --<span class="built_in">continue</span> | --skip | --abort | --quit | --edit-todo | --show-current-patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决冲突之后继续 rebase</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过</span></span><br><span class="line">git rebase --skip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中断 rebase</span></span><br><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      A---B---C ← topic</span><br><span class="line">     /</span><br><span class="line">D---E---F---G ← master</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              A&apos;--B&apos;--C&apos; ← topic</span><br><span class="line">             /</span><br><span class="line">D---E---F---G ← master</span><br></pre></td></tr></table></figure><p>以上，通过变基操作，将topic分支的 <start-point> 从 <code>E</code> 调整到了 <code>G</code>。</start-point></p><p>变基操作的原理：将 A B C 基于 G 重新提交，提交的过程可能与 F G 存在冲突，需要解决冲突。</p><p>变基操作的应用：</p><ol><li>保持与上游分支同步，同步上游分支的最新版本</li><li>合并时存在冲突，通过变基操作解决冲突</li></ol><h3 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h3><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvdmNzL2dpdC9naXQtd29ya2luZy1tZWNoYW5pc20ubWQ=" title="https://github.com/liuyanjie/knowledge/tree/master/vcs/git/git-working-mechanism.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvdmNzL2dpdC9naXQtd29ya2luZy1tZWNoYW5pc20ubWQ=" title="https://github.com/liuyanjie/knowledge/edit/master/vcs/git/git-working-mechanism.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vcs </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git对象模型：一步一步分析Git底层对象模型</title>
      <link href="/posts/vcs/git/git-object-model/"/>
      <url>/posts/vcs/git/git-object-model/</url>
      
        <content type="html"><![CDATA[<p>Git是一个非常强大的版本管理工具，有非常多的概念和命令，也有非常多且复杂的用法。但是其底层模型相对而言却非常简单，了解底层对象模型将非常有助于理解上层命令到底对仓库做了什么。如果想要精通Git，了解底层对象模型也是必不可少的。本文将会通过基本的命令操作，分析每一步操作对仓库数据做了哪些改动，进而分析出Git底层对象模型。</p><h2 id="Git基本概念"><a href="#Git基本概念" class="headerlink" title="Git基本概念"></a>Git基本概念</h2><h3 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h3><p>所有用来表示项目历史信息的文件，都是通过一个40个字符的（40-digit）“对象名”来索引的，对象名看起来像这样:</p><blockquote><p>6ff87c4664981e4397625791c8ea3bbb5f2279a3</p></blockquote><p>在后边使用对象名时，只使用前面几个字符即可，但是最少需要4个。</p><p>你会在Git里到处看到这种“40个字符”字符串。每一个“对象名”都是对“对象”内容做SHA1哈希计算得来的。这样就意味着两个不同内容的对象几乎不可能（理论上是可能发生碰撞的）有相同的“对象名”。</p><p>这样做会有几个好处：</p><ul><li><p>只要比较对象名，就可以很快的判断两个对象是否相同。</p><p>因为在每个仓库（repository）的“对象名”的计算方法都完全一样，如果同样的内容存在两个不同的仓库中，就会存在相同的“对象名”下。</p></li><li><p>还可以通过检查对象内容的SHA1的哈希值和“对象名”是否相同，来判断对象内容是否正确。</p></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>每个对象(object) 包括三个部分：类型、大小和内容。大小就是指内容的大小，内容取决于对象的类型。</p><p>有四种类型的对象：<code>&quot;blob&quot;</code>、<code>&quot;tree&quot;</code>、<code>&quot;commit&quot;</code> 和 <code>&quot;tag&quot;</code>。</p><p>几乎所有的Git功能都是使用这四个简单的对象类型来完成的。它就像是在你本机的文件系统之上构建一个小的文件系统。</p><h4 id="blob-文件-对象"><a href="#blob-文件-对象" class="headerlink" title="blob (文件) 对象"></a>blob (文件) 对象</h4><p><code>blob</code> 用来存储文件数据，通常是一个文件。</p><p><img src="https://raw.githubusercontent.com/liuyanjie/knowledge/master/vcs/git/images/object-blob.png" alt="blob"></p><h4 id="tree-目录-对象"><a href="#tree-目录-对象" class="headerlink" title="tree (目录) 对象"></a>tree (目录) 对象</h4><p><code>tree</code> 像一个目录，管理 <code>tree（子目录）</code> 或 <code>blob（文件）</code></p><p><img src="https://raw.githubusercontent.com/liuyanjie/knowledge/master/vcs/git/images/object-tree.png" alt="tree"></p><h4 id="commit-提交-对象"><a href="#commit-提交-对象" class="headerlink" title="commit (提交) 对象"></a>commit (提交) 对象</h4><p>一个 <code>commit</code> 只指向一个 <code>tree</code>，它用来标记项目某一个特定时间点的状态。<code>commit</code> 保存了树根的 <code>对象名</code>。</p><p>它包括一些关于时间点的元数据，如 <code>时间戳</code>、<code>最近一次提交的作者</code>、<code>指向上次提交（commits）的指针</code> 等等。</p><p><img src="https://raw.githubusercontent.com/liuyanjie/knowledge/master/vcs/git/images/object-commit.png" alt="tree"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p <span class="number">830</span>f<span class="number">4857e9</span>f<span class="number">579818</span><span class="keyword">c</span><span class="number">5e69104</span>d<span class="number">3e2</span><span class="keyword">cc</span><span class="number">30</span>f<span class="number">1</span>f<span class="number">0</span>d<span class="number">0</span>d</span><br><span class="line">tree f<span class="number">25061</span>fa<span class="number">4</span>f<span class="number">8</span>b<span class="number">3</span>bffbf<span class="number">8</span>ebcc<span class="number">3</span>ab<span class="number">2351</span>efdad<span class="number">2</span>f<span class="number">605</span></span><br><span class="line">parent <span class="number">06e13701</span>ac<span class="number">86</span>eb<span class="number">09</span><span class="keyword">c</span><span class="number">2035329</span>a<span class="number">5e1</span><span class="keyword">c</span><span class="number">18</span>f<span class="number">95898</span>cf<span class="number">2</span></span><br><span class="line">author liuyanjie &lt;<span class="keyword">x</span><span class="title">@gmail.com</span>&gt; <span class="number">1526828841</span> +<span class="number">0800</span></span><br><span class="line">committer liuyanjie &lt;<span class="keyword">x</span><span class="title">@gmail.com</span>&gt; <span class="number">1526828841</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">commit message</span><br></pre></td></tr></table></figure><h4 id="tag-标签-对象"><a href="#tag-标签-对象" class="headerlink" title="tag (标签) 对象"></a>tag (标签) 对象</h4><p><img src="https://raw.githubusercontent.com/liuyanjie/knowledge/master/vcs/git/images/object-tag.png" alt="tag"></p><p>一个 <code>tag</code> 是来标记某一个 <code>commit</code> 的方法。</p><p>实际上 <code>tag</code> 本身是文件名，内容是 <code>commit</code> 的对象名。<code>tag</code> 是 <code>commit</code> 的别名，类似于域名和ip地址的关系。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/tags/v0<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">830</span>f4857e9f579818c5e69104d3e2cc30f1f0d0d</span><br></pre></td></tr></table></figure><h4 id="commit-gt-tree-gt-blob"><a href="#commit-gt-tree-gt-blob" class="headerlink" title="commit -&gt; tree -&gt; blob"></a>commit -&gt; tree -&gt; blob</h4><p><img src="https://raw.githubusercontent.com/liuyanjie/knowledge/master/vcs/git/images/object-c-t-b.png" alt="object-c-t-b"></p><p>从图上可以看出：一个 <code>commit</code> 指向了一棵由 <code>tree</code> 和 <code>blob</code> 构成的 Git 对象树。</p><h3 id="与其他版本控制系统的区别"><a href="#与其他版本控制系统的区别" class="headerlink" title="与其他版本控制系统的区别"></a>与其他版本控制系统的区别</h3><p>Git与你熟悉的大部分版本控制系统的差别是很大的。</p><p>也许你熟悉 <code>Subversion</code>、<code>CVS</code>、<code>Perforce</code>、<code>Mercurial</code> 等等，他们使用 “增量文件系统” （Delta Storage systems）, 就是说它们存储每次提交(commit)之间的差异。</p><p>Git正好与之相反，它会把你的每次提交的文件的全部内容（snapshot）都会记录下来。</p><p>这会是在使用Git时的一个很重要的理念。</p><p>综上，Git对象模型非常简单，与普通的文件系统非常的相似。</p><h2 id="一步一步了解Git在做什么"><a href="#一步一步了解Git在做什么" class="headerlink" title="一步一步了解Git在做什么"></a>一步一步了解Git在做什么</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><p>初始化目录并创建一个Git仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> git-obj-model</span><br><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/liuyanjie/git-obj-model/.git/</span><br></pre></td></tr></table></figure><p>看一下初始化的git仓库中到底有些什么内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br><span class="line"></span><br><span class="line">8 directories, 15 files</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/config</span><br><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = <span class="literal">true</span></span><br><span class="line">bare = <span class="literal">false</span></span><br><span class="line">logallrefupdates = <span class="literal">true</span></span><br><span class="line">ignorecase = <span class="literal">true</span></span><br><span class="line">precomposeunicode = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>查看仓库状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure><p>后面忽略 <code>.git/hooks/</code> 下的文件。</p><h3 id="增加一个文件README-md"><a href="#增加一个文件README-md" class="headerlink" title="增加一个文件README.md"></a>增加一个文件README.md</h3><p>现在创建一个 <code>README.md</code>，查看 <code>.git</code> 目录，发现没有什么变化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"# Readme"</span> &gt; README.md</span><br><span class="line"></span><br><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br><span class="line"></span><br><span class="line">8 directories, 15 files</span><br></pre></td></tr></table></figure><p>查看当前状态，可以看到，此时有一个未追踪的 <code>README.md</code> 文件，此文件存在于 <code>工作区</code> 中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">README.md</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure><p>执行 <code>git add</code> 命令后，可以看到增加了两个文件：</p><ul><li>.git/index</li><li>.git/objects/f3/954314c1026028e77ea3a765aadefa67b45195</li></ul><blockquote><p>git add 把文件暂存到索引中为下一次提交做准备，git commit 创建新的提交。</p></blockquote><p>应该知道，这应该是一个 <code>blob</code> 类型的文件，里面存储文件内容。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md</span><br><span class="line"></span><br><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── f3</span><br><span class="line">│   │   └── 954314c1026028e77ea3a765aadefa67b45195</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br><span class="line"></span><br><span class="line">9 directories, 17 files</span><br></pre></td></tr></table></figure><p>查看当前状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   README.md</span><br></pre></td></tr></table></figure><p>查看对象内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p f39543</span><br><span class="line"><span class="comment"># Readme</span></span><br></pre></td></tr></table></figure><p>查看暂存区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git ls-files --stage</span><br><span class="line">100644 f3954314c1026028e77ea3a765aadefa67b45195 0README.md</span><br></pre></td></tr></table></figure><p>.git/index 是 Git索引文件，是一个在 <code>工作区</code> 和 <code>仓库</code> 间的 <code>暂存区域(staging area)</code>。</p><p>索引是一个二进制格式的文件，里面存放了与当前暂存内容相关的信息，包括暂存的<code>文件名</code>、<code>文件内容的SHA1哈希串值</code> 和 <code>文件访问权限</code>，整个索引文件的内容以暂存的文件名进行排git ls-files –stage序保存的。</p><p>因为这个文件记录了将要提交的文件, 所以我们才能够多次修改一起提交(commit)。</p><p>所以创建了一个新的提交(commit)，提交的一般是暂存区里的内容, 而不是工作目录中的内容。</p><p>一个Git项目中文件的状态大概分成下面的两大类，而第二大类又分为三小类：</p><ol><li>未被跟踪的文件（Untracked files）</li><li>已被跟踪的文件（Tracked files）<ol><li>被修改 未暂存 的文件（Changed but not updated 或 Modified）</li><li>被修改 已暂存 可以 被提交 的文件（Changes to be committed 或 Staged）</li><li>未修改 的文件（自上次提交以来）(Clean 或 Unmodified)</li></ol></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Changes to be committed:</span><br><span class="line">  (no files)</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (no files)</span><br><span class="line">Untracked files:</span><br><span class="line">? .gitignore</span><br></pre></td></tr></table></figure><p>执行 <code>git commit</code> 命令，发现路径下又增加了两个文件：</p><ul><li>.git/objects/9d/978d59f2f22062c0382c859f4c3ef929026303</li><li>.git/objects/c1/067ba0a7ba51f937518c9bc051ea744ca748fe</li></ul><p>从上面的结构图，可以想到：</p><p>提交可定会产生一个提交对象，提交对象指向一个树对象，树对象包含上一步添加的<code>blob</code>对象。</p><p>下面将通过查看文件内容验证这一点。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"First Commmit"</span> README.md</span><br><span class="line"></span><br><span class="line">[master (root-commit) 033fa1a] First Commmit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"></span><br><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── COMMIT_EDITMSG</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           └── master</span><br><span class="line">├── objects</span><br><span class="line">│   ├── 03</span><br><span class="line">│   │   └── 3fa1ab71f0d54f348f07a3a0ffcefd52804df5 +</span><br><span class="line">│   ├── c1</span><br><span class="line">│   │   └── 067ba0a7ba51f937518c9bc051ea744ca748fe +</span><br><span class="line">│   ├── f3</span><br><span class="line">│   │   └── 954314c1026028e77ea3a765aadefa67b45195</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br><span class="line"></span><br><span class="line">14 directories, 23 files</span><br></pre></td></tr></table></figure><p>查看 <code>033f</code> 对象内容，此时不知道这个文件类型及内容是什么</p><p>此时，<code>commit</code> 对象为初始提交，所以并无 <code>parent</code> 引用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 033f</span><br><span class="line">tree c1067ba0a7ba51f937518c9bc051ea744ca748fe</span><br><span class="line">author liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800</span><br><span class="line">committer liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800</span><br><span class="line"></span><br><span class="line">First Commmit</span><br></pre></td></tr></table></figure><p>查看 <code>c106</code> 对象内容，通过上一步，已知此对象是一个 <code>tree</code> 类型的对象，通过内容可以看到，树类型的对象实际就是存储每行一条数据的列表。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p c106</span><br><span class="line">100644 blob f3954314c1026028e77ea3a765aadefa67b45195README.md</span><br></pre></td></tr></table></figure><p>再看 <code>.git/refs/heads/master</code> 文件内容</p><p>文件内容只有一行，内容是 <code>033f</code> 对象。<code>master</code> 即是 <code>master</code> 分支的物理表示。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">033fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br></pre></td></tr></table></figure><p>同时，还可看到，新增了 <code>.git/logs</code> 目录及内容</p><p>该目录下保存了各个分支的提交记录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/logs/refs/heads/master</span><br><span class="line">0000000000000000000000000000000000000000 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800commit (initial): First Commmit</span><br><span class="line"></span><br><span class="line">$ cat .git/logs/HEAD</span><br><span class="line">0000000000000000000000000000000000000000 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800commit (initial): First Commmit</span><br></pre></td></tr></table></figure><p>Tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v0.0.1 -m <span class="string">'tag v0.0.1'</span></span><br></pre></td></tr></table></figure><p>查看目录文件变化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── COMMIT_EDITMSG</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           └── master</span><br><span class="line">├── objects</span><br><span class="line">│   ├── 03</span><br><span class="line">│   │   └── 3fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br><span class="line">│   ├── c1</span><br><span class="line">│   │   └── 067ba0a7ba51f937518c9bc051ea744ca748fe</span><br><span class="line">│   ├── cc</span><br><span class="line">│   │   └── f88a6f1649213499841c33f9bb36d1d8756fb7</span><br><span class="line">│   ├── f3</span><br><span class="line">│   │   └── 954314c1026028e77ea3a765aadefa67b45195</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br><span class="line">        └── v0.0.1</span><br><span class="line"></span><br><span class="line">15 directories, 25 files</span><br></pre></td></tr></table></figure><p>查看 <code>.git/refs/tags/v0.0.1</code> 文件内容，可以看到内容恰好是新增的 objects <code>对象名</code>，所以可想而知 <code>ccf8</code> 是一个 <code>tag</code> 类型的对象</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/tags/v0.0.1</span><br><span class="line">ccf88a6f1649213499841c33f9bb36d1d8756fb7</span><br></pre></td></tr></table></figure><p>查看新增的 <code>ccf8</code> 文件内容，文件指向了 <code>commit</code> 对象 <code>033f</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p ccf8</span><br><span class="line">object 033fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br><span class="line">type commit</span><br><span class="line">tag v0.0.1</span><br><span class="line">tagger liuyanjie &lt;x@gmail.com&gt; 1527523284 +0800</span><br><span class="line"></span><br><span class="line">tag v0.0.1</span><br></pre></td></tr></table></figure><p>通过以上查看 <code>.git</code> 目录的变化过程，可以大致分析出Git是如何存储这些文件内容的。</p><p>上面只执行了 <code>git add</code> 和 <code>git commit</code> 两条操作。</p><h3 id="继续添加文件"><a href="#继续添加文件" class="headerlink" title="继续添加文件"></a>继续添加文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"# CHANGELOG"</span> &gt; CHANGELOG.md</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"# CONTRIBUTING"</span> &gt; CONTRIBUTING.md</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">CHANGELOG.md</span><br><span class="line">CONTRIBUTING.md</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br><span class="line"></span><br><span class="line">$ git add CHANGELOG.md CONTRIBUTING.md</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   CHANGELOG.md</span><br><span class="line">new file:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── COMMIT_EDITMSG</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           └── master</span><br><span class="line">├── objects</span><br><span class="line">│   ├── 03</span><br><span class="line">│   │   └── 3fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br><span class="line">│   ├── a0</span><br><span class="line">│   │   └── cf709bc0991b5340080f944d02894dc1596d46</span><br><span class="line">│   ├── c1</span><br><span class="line">│   │   └── 067ba0a7ba51f937518c9bc051ea744ca748fe</span><br><span class="line">│   ├── c6</span><br><span class="line">│   │   └── b9e95b39b8cd8ead8bbf4b118104741017de1b</span><br><span class="line">│   ├── cc</span><br><span class="line">│   │   └── f88a6f1649213499841c33f9bb36d1d8756fb7</span><br><span class="line">│   ├── f3</span><br><span class="line">│   │   └── 954314c1026028e77ea3a765aadefa67b45195</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br><span class="line">        └── v0.0.1</span><br><span class="line"></span><br><span class="line">17 directories, 27 files</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git ls-files --stage</span><br><span class="line">100644 a0cf709bc0991b5340080f944d02894dc1596d46 0CHANGELOG.md</span><br><span class="line">100644 c6b9e95b39b8cd8ead8bbf4b118104741017de1b 0CONTRIBUTING.md</span><br><span class="line">100644 f3954314c1026028e77ea3a765aadefa67b45195 0README.md</span><br></pre></td></tr></table></figure><p>分别查看一下各个文件的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p a0cf</span><br><span class="line"><span class="comment"># CHANGELOG</span></span><br><span class="line"></span><br><span class="line">$ git cat-file -p c6b9</span><br><span class="line"><span class="comment"># CONTRIBUTING</span></span><br><span class="line"></span><br><span class="line">$ git cat-file -p f395</span><br><span class="line"><span class="comment"># Readme</span></span><br></pre></td></tr></table></figure><p>再查看一下树对象的内容，然而并没有任何变化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p c106</span><br><span class="line">100644 blob f3954314c1026028e77ea3a765aadefa67b45195README.md</span><br></pre></td></tr></table></figure><p>下面提交这两个文件，可以通过日志方便的查看信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --all -m <span class="string">"add CHANGELOG.md and CONTRIBUTING.md files"</span></span><br><span class="line">[master 28baf4f] add CHANGELOG.md and CONTRIBUTING.md files</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 CHANGELOG.md</span><br><span class="line"> create mode 100644 CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>同样再看一下<code>.git</code>目录下的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── COMMIT_EDITMSG</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           └── master</span><br><span class="line">├── objects</span><br><span class="line">│   ├── 03</span><br><span class="line">│   │   └── 3fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br><span class="line">│   ├── 28</span><br><span class="line">│   │   └── baf4f77fb49abf99c18bc1c12363d898f3ced7</span><br><span class="line">│   ├── 2c</span><br><span class="line">│   │   └── affd90cd736e58f516e3988e3af84f5fa42b4f</span><br><span class="line">│   ├── a0</span><br><span class="line">│   │   └── cf709bc0991b5340080f944d02894dc1596d46</span><br><span class="line">│   ├── c1</span><br><span class="line">│   │   └── 067ba0a7ba51f937518c9bc051ea744ca748fe</span><br><span class="line">│   ├── c6</span><br><span class="line">│   │   └── b9e95b39b8cd8ead8bbf4b118104741017de1b</span><br><span class="line">│   ├── cc</span><br><span class="line">│   │   └── f88a6f1649213499841c33f9bb36d1d8756fb7</span><br><span class="line">│   ├── f3</span><br><span class="line">│   │   └── 954314c1026028e77ea3a765aadefa67b45195</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br><span class="line">        └── v0.0.1</span><br><span class="line"></span><br><span class="line">19 directories, 29 files</span><br></pre></td></tr></table></figure><p>查看一下master上的提交日志，刚刚提交内容在新的一行，与首次提交稍微有点差别，首次提交是commit (initial)。</p><p>还可以发现第二次提交的第一列和第一次提交的第二列一样，可以猜到，第一列指向上一次的提交对象。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/logs/refs/heads/master</span><br><span class="line">0000000000000000000000000000000000000000 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800commit (initial): First Commmit</span><br><span class="line">033fa1ab71f0d54f348f07a3a0ffcefd52804df5 28baf4f77fb49abf99c18bc1c12363d898f3ced7 liuyanjie &lt;x@gmail.com&gt; 1527524452 +0800commit: add CHANGELOG.md and CONTRIBUTING.md files</span><br></pre></td></tr></table></figure><p>查看 <code>28ba</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 28ba</span><br><span class="line">tree 2caffd90cd736e58f516e3988e3af84f5fa42b4f</span><br><span class="line">parent 033fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br><span class="line">author liuyanjie &lt;x@gmail.com&gt; 1527524452 +0800</span><br><span class="line">committer liuyanjie &lt;x@gmail.com&gt; 1527524452 +0800</span><br><span class="line"></span><br><span class="line">add CHANGELOG.md and CONTRIBUTING.md files</span><br></pre></td></tr></table></figure><p>相比 <code>033f</code>，<code>28ba</code> 多了 parent 字段 且 parent 字段值是 <code>033f</code></p><p>同时 <code>master</code> 也指向了新的提交对象。</p><p>第一次产生的提交对象同样存在于目录当中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">28baf4f77fb49abf99c18bc1c12363d898f3ced7</span><br></pre></td></tr></table></figure><p>在看树对象<code>2caf</code>，发现相比之前，多了两行，分别指向新增加的文件。</p><p><code>README.md</code> 文件出现在了 <code>2caf</code> 对象中，实际上，它同时还存在于 <code>c106</code> 对象中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 2caf</span><br><span class="line">100644 blob a0cf709bc0991b5340080f944d02894dc1596d46CHANGELOG.md</span><br><span class="line">100644 blob c6b9e95b39b8cd8ead8bbf4b118104741017de1bCONTRIBUTING.md</span><br><span class="line">100644 blob f3954314c1026028e77ea3a765aadefa67b45195README.md</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p c106</span><br><span class="line">100644 blob f3954314c1026028e77ea3a765aadefa67b45195README.md</span><br></pre></td></tr></table></figure><p>到现在为止，整个目录下有3个文件，而 <code>.git</code> 目录下已经有多个文件，为了跟踪记录版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">CHANGELOG.md CONTRIBUTING.md README.md</span><br></pre></td></tr></table></figure><p>通过以上 <code>.git</code> 目录变化，可以发现：</p><p>每次提交都会产出一 <code>commit</code> 对象，这些 <code>commit</code> 通过 <code>parent</code>，形成一个由高版本到低版本的链表，追溯这个链表，可以回溯到任意版本。</p><p><code>commit</code> 对象保存一个 <code>tree</code> 的根节点，根节点下面再包含 <code>blob</code> 或 <code>tree</code>，类似普通文件系统结构，和上面的图一致，从根节点开始，可以找到某一般版本下的所有文件。</p><p>在每一颗树下，因为都是使用类似指针的结构，所以每次修改都是将变化的文件，重新创建一个blob文件，并修改相应指针。</p><p>目录中的 <code>.git/refs/heads/master</code> 指向某一次提交，当由另外一个分支的时候，会有 <code>.git/refs/heads/branch-xxx</code> 文件指向另外一次提交，而初始时与父分支指向相同。</p><h3 id="再添加一个带有目录文件"><a href="#再添加一个带有目录文件" class="headerlink" title="再添加一个带有目录文件"></a>再添加一个带有目录文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir lib</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"// Author: liuyanjie"</span> &gt; ./lib/index.js</span><br><span class="line"></span><br><span class="line">$ git add lib/index.js</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">"add lib/index.js"</span> lib/index.js</span><br><span class="line">[master 2b9fc85] add lib/index.js</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 lib/index.js</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 2b9fc85</span><br><span class="line">tree 9609811e44367d44f2915435f4454716e1e535fd</span><br><span class="line">parent 28baf4f77fb49abf99c18bc1c12363d898f3ced7</span><br><span class="line">author liuyanjie &lt;x@gmail.com&gt; 1527556745 +0800</span><br><span class="line">committer liuyanjie &lt;x@gmail.com&gt; 1527556745 +0800</span><br><span class="line"></span><br><span class="line">add lib/index.js</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 9609</span><br><span class="line">100644 blob a0cf709bc0991b5340080f944d02894dc1596d46CHANGELOG.md</span><br><span class="line">100644 blob c6b9e95b39b8cd8ead8bbf4b118104741017de1bCONTRIBUTING.md</span><br><span class="line">100644 blob f3954314c1026028e77ea3a765aadefa67b45195README.md</span><br><span class="line">040000 tree 2fb9045bb558889ea2bd8cc5d8fe45e7247706dalib</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 2fb9</span><br><span class="line">100644 blob 39a204af28de9b4f0411735e597e0da7416ca35aindex.js</span><br></pre></td></tr></table></figure><p>上面连续几步和之前的效果一样，但是可以看到，在树对象 <code>9609</code> 中，包含了另一个树对象 <code>2fb9</code> ，这个对象的内容指向<code>index.js</code>文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/logs/refs/heads/master</span><br><span class="line">0000000000000000000000000000000000000000 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800commit (initial): First Commmit</span><br><span class="line">033fa1ab71f0d54f348f07a3a0ffcefd52804df5 28baf4f77fb49abf99c18bc1c12363d898f3ced7 liuyanjie &lt;x@gmail.com&gt; 1527524452 +0800commit: add CHANGELOG.md and CONTRIBUTING.md files</span><br><span class="line">28baf4f77fb49abf99c18bc1c12363d898f3ced7 2b9fc8524bac21d5d5c2f988b5793315ce93abc6 liuyanjie &lt;x@gmail.com&gt; 1527556745 +0800commit: add lib/index.js</span><br></pre></td></tr></table></figure><p>git log</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">commit 2b9fc8524bac21d5d5c2f988b5793315ce93abc6 (HEAD -&gt; master)</span><br><span class="line">Author: liuyanjie &lt;x@gmail.com&gt;</span><br><span class="line">Date:   Tue May 29 09:19:05 2018 +0800</span><br><span class="line"></span><br><span class="line">    add lib/index.js</span><br><span class="line"></span><br><span class="line">commit 28baf4f77fb49abf99c18bc1c12363d898f3ced7</span><br><span class="line">Author: liuyanjie &lt;x@gmail.com&gt;</span><br><span class="line">Date:   Tue May 29 00:20:52 2018 +0800</span><br><span class="line"></span><br><span class="line">    add CHANGELOG.md and CONTRIBUTING.md files</span><br><span class="line"></span><br><span class="line">commit 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 (tag: v0.0.1)</span><br><span class="line">Author: liuyanjie &lt;x@gmail.com&gt;</span><br><span class="line">Date:   Mon May 28 23:38:14 2018 +0800</span><br><span class="line"></span><br><span class="line">    First Commmit</span><br></pre></td></tr></table></figure><h3 id="开始创建分支"><a href="#开始创建分支" class="headerlink" title="开始创建分支"></a>开始创建分支</h3><p>创建并切换到分支 <code>feature-a</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line">* master 2b9fc85 add lib/index.js</span><br><span class="line"></span><br><span class="line">$ git checkout -b feature<span class="_">-a</span></span><br><span class="line">Switched to a new branch <span class="string">'feature-a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># liuyanjie @ bmw in ~/git-obj-model on git:feature-a o [9:25:01]</span></span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line">* feature<span class="_">-a</span> 2b9fc85 add lib/index.js</span><br><span class="line">  master    2b9fc85 add lib/index.js</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch feature<span class="_">-a</span></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── COMMIT_EDITMSG</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           ├── feature<span class="_">-a</span></span><br><span class="line">│           └── master</span><br><span class="line">├── objects</span><br><span class="line">│   ├── 03</span><br><span class="line">│   │   └── 3fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br><span class="line">│   ├── 28</span><br><span class="line">│   │   └── baf4f77fb49abf99c18bc1c12363d898f3ced7</span><br><span class="line">│   ├── 2b</span><br><span class="line">│   │   └── 9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br><span class="line">│   ├── 2c</span><br><span class="line">│   │   └── affd90cd736e58f516e3988e3af84f5fa42b4f</span><br><span class="line">│   ├── 2f</span><br><span class="line">│   │   └── b9045bb558889ea2bd8cc5d8fe45e7247706da</span><br><span class="line">│   ├── 39</span><br><span class="line">│   │   └── a204af28de9b4f0411735e597e0da7416ca35a</span><br><span class="line">│   ├── 96</span><br><span class="line">│   │   └── 09811e44367d44f2915435f4454716e1e535fd</span><br><span class="line">│   ├── a0</span><br><span class="line">│   │   └── cf709bc0991b5340080f944d02894dc1596d46</span><br><span class="line">│   ├── c1</span><br><span class="line">│   │   └── 067ba0a7ba51f937518c9bc051ea744ca748fe</span><br><span class="line">│   ├── c6</span><br><span class="line">│   │   └── b9e95b39b8cd8ead8bbf4b118104741017de1b</span><br><span class="line">│   ├── cc</span><br><span class="line">│   │   └── f88a6f1649213499841c33f9bb36d1d8756fb7</span><br><span class="line">│   ├── f3</span><br><span class="line">│   │   └── 954314c1026028e77ea3a765aadefa67b45195</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   ├── feature<span class="_">-a</span></span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br><span class="line">        └── v0.0.1</span><br><span class="line"></span><br><span class="line">23 directories, 35 files</span><br></pre></td></tr></table></figure><p>看一下<code>.git</code>文件内容，可以看到<code>.git/refs/heads</code>目录下多了个<code>feature-a</code></p><p>查看一下 <code>feature-a</code> 的相关内容，指向的提交对象和 <code>master</code> 一样，并指明 <code>Created from HEAD</code>。</p><p>从内容中可以看出，两个分支指向同一个提交对象 <code>1ad0e5</code>，但是两个分支的日志不同。</p><p>日志记录了分支的历史，而提交对象记录了分支的数据内容和所有分支的历史。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/heads/feature<span class="_">-a</span></span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/logs/refs/heads/feature<span class="_">-a</span></span><br><span class="line">0000000000000000000000000000000000000000 2b9fc8524bac21d5d5c2f988b5793315ce93abc6 liuyanjie &lt;x@gmail.com&gt; 1527557101 +0800branch: Created from HEAD</span><br><span class="line"></span><br><span class="line">$ cat .git/logs/refs/heads/master</span><br><span class="line">0000000000000000000000000000000000000000 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800commit (initial): First Commmit</span><br><span class="line">033fa1ab71f0d54f348f07a3a0ffcefd52804df5 28baf4f77fb49abf99c18bc1c12363d898f3ced7 liuyanjie &lt;x@gmail.com&gt; 1527524452 +0800commit: add CHANGELOG.md and CONTRIBUTING.md files</span><br><span class="line">28baf4f77fb49abf99c18bc1c12363d898f3ced7 2b9fc8524bac21d5d5c2f988b5793315ce93abc6 liuyanjie &lt;x@gmail.com&gt; 1527556745 +0800commit: add lib/index.js</span><br></pre></td></tr></table></figure><p>初始化<code>package.json</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">Is this ok? (yes)</span><br></pre></td></tr></table></figure><p>安装 <code>bluebird</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install bluebird --save</span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm WARN git-obj-model@1.0.0 No description</span><br><span class="line">npm WARN git-obj-model@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ bluebird@3.5.1</span><br><span class="line">added 1 package <span class="keyword">in</span> 1.999s</span><br></pre></td></tr></table></figure><p>添加文件到版本库，并查看变化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git add package.json</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/feature<span class="_">-a</span></span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br></pre></td></tr></table></figure><p>提交文件到版本库，并查看变化，提交指针已经指向新的提交对象，分支的版本超前于master，因为parent指向<code>1ad0e5</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ git commit package.json -m <span class="string">'add package.json'</span></span><br><span class="line">[feature<span class="_">-a</span> 74ce192] add package.json</span><br><span class="line"> 1 file changed, 17 insertions(+)</span><br><span class="line"> create mode 100644 package.json</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/feature<span class="_">-a</span></span><br><span class="line">74ce19245be785772b33e1193df0d2c6a940ed10</span><br><span class="line"></span><br><span class="line">$ git cat-file -p 74ce</span><br><span class="line">tree 9d23f8ad2ecc9f8e49d78174bcc6e4668ca7f031</span><br><span class="line">parent 2b9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br><span class="line">author liuyanjie &lt;x@gmail.com&gt; 1527557656 +0800</span><br><span class="line">committer liuyanjie &lt;x@gmail.com&gt; 1527557656 +0800</span><br><span class="line"></span><br><span class="line">add package.json</span><br><span class="line"></span><br><span class="line">$ git cat-file -p 9d23</span><br><span class="line">100644 blob a0cf709bc0991b5340080f944d02894dc1596d46CHANGELOG.md</span><br><span class="line">100644 blob c6b9e95b39b8cd8ead8bbf4b118104741017de1bCONTRIBUTING.md</span><br><span class="line">100644 blob f3954314c1026028e77ea3a765aadefa67b45195README.md</span><br><span class="line">040000 tree 2fb9045bb558889ea2bd8cc5d8fe45e7247706dalib</span><br><span class="line">100644 blob 5ee275ce022007c38d187c58aef13f8d9e04b553package.json</span><br></pre></td></tr></table></figure><p>合并分支 <code>feature-a</code> 到 <code>master</code> 分支，可以看到 <code>master</code> 分支跟上了 <code>feature-a</code>，只改指针既可，非常快。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line"></span><br><span class="line">$ git merge feature<span class="_">-a</span> --no-ff</span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> package.json | 17 +++++++++++++++++</span><br><span class="line"> 1 file changed, 17 insertions(+)</span><br><span class="line"> create mode 100644 package.json</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">b98c36254dba6e169429c2be57b1bbeccb6e1f28</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/feature<span class="_">-a</span></span><br><span class="line">74ce19245be785772b33e1193df0d2c6a940ed10</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tig</span><br><span class="line"></span><br><span class="line">2018-05-29 09:37 liuyanjie M─┐ [master] Merge branch <span class="string">'feature-a'</span></span><br><span class="line">2018-05-29 09:34 liuyanjie │ o [feature<span class="_">-a</span>] add package.json</span><br><span class="line">2018-05-29 09:19 liuyanjie o─┘ add lib/index.js</span><br><span class="line">2018-05-29 00:20 liuyanjie o add CHANGELOG.md and CONTRIBUTING.md files</span><br><span class="line">2018-05-28 23:38 liuyanjie I &lt;v0.0.1&gt; First Commmit</span><br></pre></td></tr></table></figure><p>修改 <code>master</code> 分支，编辑文件并提交</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Already on <span class="string">'master'</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">"\n\n# About"</span> &gt;&gt; README.md</span><br><span class="line"></span><br><span class="line">$ git commit README.md -m <span class="string">"add About Me"</span></span><br><span class="line">[master cc52745] add About Me</span><br><span class="line"> 1 file changed, 4 insertions(+)</span><br><span class="line"></span><br><span class="line">$ cat README.md</span><br><span class="line"><span class="comment"># Readme</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># About</span></span><br></pre></td></tr></table></figure><p>修改 <code>feature-a</code> 分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout feature<span class="_">-a</span></span><br><span class="line">Switched to branch <span class="string">'feature-a'</span></span><br><span class="line"></span><br><span class="line">$ cat README.md</span><br><span class="line"><span class="comment"># Readme</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">"\n\n# About"</span> &gt;&gt; README.md</span><br><span class="line"></span><br><span class="line">$ cat README.md</span><br><span class="line"><span class="comment"># Readme</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># About</span></span><br><span class="line"></span><br><span class="line">$ git add README.md</span><br><span class="line"></span><br><span class="line">$ git commit README.md -m <span class="string">"add About Me"</span></span><br><span class="line">[feature<span class="_">-a</span> fd885cf] add About Me</span><br><span class="line"> 1 file changed, 3 insertions(+)</span><br></pre></td></tr></table></figure><p>查看分支头和历史记录，可以看到分支头指向不同的提交对象，而提交对象，又来源于同一个提交对象<code>0cb214741c044af3fb4677fe72e3ae175f3e0358</code>，两个分支之间存在交叉。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/heads/feature<span class="_">-a</span></span><br><span class="line">74ce19245be785772b33e1193df0d2c6a940ed10</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">cc52745b13b00c672c7ac9b1dc42336953293b7a</span><br><span class="line"></span><br><span class="line">$ cat .git/logs/refs/heads/feature<span class="_">-a</span></span><br><span class="line">0000000000000000000000000000000000000000 2b9fc8524bac21d5d5c2f988b5793315ce93abc6 liuyanjie &lt;x@gmail.com&gt; 1527557101 +0800branch: Created from HEAD</span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6 74ce19245be785772b33e1193df0d2c6a940ed10 liuyanjie &lt;x@gmail.com&gt; 1527557656 +0800commit: add package.json</span><br><span class="line">74ce19245be785772b33e1193df0d2c6a940ed10 fd885cfcd548a24fabb2f5b49ea60beadc8c5912 liuyanjie &lt;x@gmail.com&gt; 1527558668 +0800commit: add About Me</span><br><span class="line"></span><br><span class="line">$ cat .git/logs/refs/heads/master</span><br><span class="line">0000000000000000000000000000000000000000 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800commit (initial): First Commmit</span><br><span class="line">033fa1ab71f0d54f348f07a3a0ffcefd52804df5 28baf4f77fb49abf99c18bc1c12363d898f3ced7 liuyanjie &lt;x@gmail.com&gt; 1527524452 +0800commit: add CHANGELOG.md and CONTRIBUTING.md files</span><br><span class="line">28baf4f77fb49abf99c18bc1c12363d898f3ced7 2b9fc8524bac21d5d5c2f988b5793315ce93abc6 liuyanjie &lt;x@gmail.com&gt; 1527556745 +0800commit: add lib/index.js</span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6 b98c36254dba6e169429c2be57b1bbeccb6e1f28 liuyanjie &lt;x@gmail.com&gt; 1527557853 +0800merge feature<span class="_">-a</span>: Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line">b98c36254dba6e169429c2be57b1bbeccb6e1f28 cc52745b13b00c672c7ac9b1dc42336953293b7a liuyanjie &lt;x@gmail.com&gt; 1527558514 +0800commit: add About Me</span><br></pre></td></tr></table></figure><p>切换到 <code>master</code> 分支，再次合并 <code>feature-a</code> 到 <code>master</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line"></span><br><span class="line">$ git merge feature<span class="_">-a</span></span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"></span><br><span class="line">$ cat README.md</span><br><span class="line"><span class="comment"># Readme</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="comment">## About</span></span><br><span class="line"></span><br><span class="line">=======</span><br><span class="line"><span class="comment">## About</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature<span class="_">-a</span></span><br></pre></td></tr></table></figure><p>解决冲突之后的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat README.md</span><br><span class="line"><span class="comment"># Readme</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## About</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">"git commit"</span>)</span><br><span class="line">  (use <span class="string">"git merge --abort"</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">both modified:   README.md</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit README.md -m <span class="string">'fix conflict'</span></span><br><span class="line">fatal: cannot <span class="keyword">do</span> a partial commit during a merge.</span><br><span class="line"></span><br><span class="line">$ git commit -a</span><br><span class="line">[master 5a68c74] Merge branch <span class="string">'feature-a'</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/refs/heads/feature<span class="_">-a</span></span><br><span class="line">fd885cfcd548a24fabb2f5b49ea60beadc8c5912</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">5a68c7402c30ae44fd82dadba2d8f148efb75541</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/logs/refs/heads/master</span><br><span class="line">0000000000000000000000000000000000000000 033fa1ab71f0d54f348f07a3a0ffcefd52804df5 liuyanjie &lt;x@gmail.com&gt; 1527521894 +0800commit (initial): First Commmit</span><br><span class="line">033fa1ab71f0d54f348f07a3a0ffcefd52804df5 28baf4f77fb49abf99c18bc1c12363d898f3ced7 liuyanjie &lt;x@gmail.com&gt; 1527524452 +0800commit: add CHANGELOG.md and CONTRIBUTING.md files</span><br><span class="line">28baf4f77fb49abf99c18bc1c12363d898f3ced7 2b9fc8524bac21d5d5c2f988b5793315ce93abc6 liuyanjie &lt;x@gmail.com&gt; 1527556745 +0800commit: add lib/index.js</span><br><span class="line">2b9fc8524bac21d5d5c2f988b5793315ce93abc6 b98c36254dba6e169429c2be57b1bbeccb6e1f28 liuyanjie &lt;x@gmail.com&gt; 1527557853 +0800merge feature<span class="_">-a</span>: Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line">b98c36254dba6e169429c2be57b1bbeccb6e1f28 cc52745b13b00c672c7ac9b1dc42336953293b7a liuyanjie &lt;x@gmail.com&gt; 1527558514 +0800commit: add About Me</span><br><span class="line">cc52745b13b00c672c7ac9b1dc42336953293b7a 5a68c7402c30ae44fd82dadba2d8f148efb75541 liuyanjie &lt;x@gmail.com&gt; 1527559277 +0800commit (merge): Merge branch <span class="string">'feature-a'</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --<span class="built_in">stat</span> feature<span class="_">-a</span></span><br><span class="line">Already up to date.</span><br><span class="line"></span><br><span class="line">$ git branch -d feature<span class="_">-a</span></span><br><span class="line">Deleted branch feature<span class="_">-a</span> (was fd885cf).</span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line">$ git cat-file -p fd88</span><br><span class="line">tree 82e47e13f87031cab7c47b455744bc4ed3fdba3c</span><br><span class="line">parent 74ce19245be785772b33e1193df0d2c6a940ed10</span><br><span class="line">author liuyanjie &lt;x@gmail.com&gt; 1527558668 +0800</span><br><span class="line">committer liuyanjie &lt;x@gmail.com&gt; 1527558668 +0800</span><br><span class="line"></span><br><span class="line">add About Me</span><br><span class="line"></span><br><span class="line">$ git cat-file -p 5a68</span><br><span class="line">tree 42564bab966d59e3501a1903c1cb2066adc2bd2d</span><br><span class="line">parent cc52745b13b00c672c7ac9b1dc42336953293b7a</span><br><span class="line">parent fd885cfcd548a24fabb2f5b49ea60beadc8c5912</span><br><span class="line">author liuyanjie &lt;x@gmail.com&gt; 1527559277 +0800</span><br><span class="line">committer liuyanjie &lt;x@gmail.com&gt; 1527559277 +0800</span><br><span class="line"></span><br><span class="line">Merge branch <span class="string">'feature-a'</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --all --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class="line">*   5a68c74 - (HEAD -&gt; master) Merge branch <span class="string">'feature-a'</span> (7 minutes ago) &lt;liuyanjie&gt;</span><br><span class="line">|\</span><br><span class="line">| * fd885cf - add About Me (17 minutes ago) &lt;liuyanjie&gt;</span><br><span class="line">* | cc52745 - add About Me (20 minutes ago) &lt;liuyanjie&gt;</span><br><span class="line">* |   b98c362 - Merge branch <span class="string">'feature-a'</span> (31 minutes ago) &lt;liuyanjie&gt;</span><br><span class="line">|\ \</span><br><span class="line">| |/</span><br><span class="line">| * 74ce192 - add package.json (34 minutes ago) &lt;liuyanjie&gt;</span><br><span class="line">|/</span><br><span class="line">* 2b9fc85 - add lib/index.js (49 minutes ago) &lt;liuyanjie&gt;</span><br><span class="line">* 28baf4f - add CHANGELOG.md and CONTRIBUTING.md files (10 hours ago) &lt;liuyanjie&gt;</span><br><span class="line">* 033fa1a - (tag: v0.0.1) First Commmit (11 hours ago) &lt;liuyanjie&gt;</span><br></pre></td></tr></table></figure><p>配置命令别名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.lg <span class="string">"log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span></span><br><span class="line">git lg</span><br></pre></td></tr></table></figure><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.0.2 -m <span class="string">"v0.0.2"</span></span><br><span class="line">v0.0.1</span><br><span class="line">v0.0.2</span><br><span class="line"></span><br><span class="line">$ cat .git/refs/tags/v0.0.2</span><br><span class="line">174c530154ab3b4d4d322bcbd66cdde18882eb00</span><br><span class="line"></span><br><span class="line">$ git cat-file -p 174c</span><br><span class="line">object 5a68c7402c30ae44fd82dadba2d8f148efb75541</span><br><span class="line"><span class="built_in">type</span> commit</span><br><span class="line">tag v0.0.2</span><br><span class="line">tagger liuyanjie &lt;x@gmail.com&gt; 1527559851 +0800</span><br><span class="line"></span><br><span class="line">v0.0.2</span><br><span class="line"></span><br><span class="line">$ git cat-file -p 5a68</span><br><span class="line">tree 42564bab966d59e3501a1903c1cb2066adc2bd2d</span><br><span class="line">parent cc52745b13b00c672c7ac9b1dc42336953293b7a</span><br><span class="line">parent fd885cfcd548a24fabb2f5b49ea60beadc8c5912</span><br><span class="line">author liuyanjie &lt;x@gmail.com&gt; 1527559277 +0800</span><br><span class="line">committer liuyanjie &lt;x@gmail.com&gt; 1527559277 +0800</span><br><span class="line"></span><br><span class="line">Merge branch <span class="string">'feature-a'</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">$ tree .git</span><br><span class="line">.git</span><br><span class="line">├── COMMIT_EDITMSG</span><br><span class="line">├── HEAD</span><br><span class="line">├── ORIG_HEAD</span><br><span class="line">├── co.gitup.mac</span><br><span class="line">│   ├── cache.db</span><br><span class="line">│   ├── info.plist</span><br><span class="line">│   └── snapshots.data</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── index</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── logs</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   └── refs</span><br><span class="line">│       └── heads</span><br><span class="line">│           └── master</span><br><span class="line">├── objects</span><br><span class="line">│   ├── 03</span><br><span class="line">│   │   └── 3fa1ab71f0d54f348f07a3a0ffcefd52804df5</span><br><span class="line">│   ├── 17</span><br><span class="line">│   │   └── 4c530154ab3b4d4d322bcbd66cdde18882eb00</span><br><span class="line">│   ├── 28</span><br><span class="line">│   │   └── baf4f77fb49abf99c18bc1c12363d898f3ced7</span><br><span class="line">│   ├── 2b</span><br><span class="line">│   │   └── 9fc8524bac21d5d5c2f988b5793315ce93abc6</span><br><span class="line">│   ├── 2c</span><br><span class="line">│   │   └── affd90cd736e58f516e3988e3af84f5fa42b4f</span><br><span class="line">│   ├── 2f</span><br><span class="line">│   │   └── b9045bb558889ea2bd8cc5d8fe45e7247706da</span><br><span class="line">│   ├── 30</span><br><span class="line">│   │   └── be8054b61a4a124e4cd8a1201de8474cb45e12</span><br><span class="line">│   ├── 39</span><br><span class="line">│   │   └── a204af28de9b4f0411735e597e0da7416ca35a</span><br><span class="line">│   ├── 42</span><br><span class="line">│   │   └── 564bab966d59e3501a1903c1cb2066adc2bd2d</span><br><span class="line">│   ├── 44</span><br><span class="line">│   │   └── 2b821b9b4acb5b0e632042542b3b29e2cf721e</span><br><span class="line">│   ├── 48</span><br><span class="line">│   │   └── 1cab7467cdb697bf7affdba0f2a5673a03366d</span><br><span class="line">│   ├── 5a</span><br><span class="line">│   │   └── 68c7402c30ae44fd82dadba2d8f148efb75541</span><br><span class="line">│   ├── 5e</span><br><span class="line">│   │   └── e275ce022007c38d187c58aef13f8d9e04b553</span><br><span class="line">│   ├── 74</span><br><span class="line">│   │   └── ce19245be785772b33e1193df0d2c6a940ed10</span><br><span class="line">│   ├── 82</span><br><span class="line">│   │   └── e47e13f87031cab7c47b455744bc4ed3fdba3c</span><br><span class="line">│   ├── 96</span><br><span class="line">│   │   └── 09811e44367d44f2915435f4454716e1e535fd</span><br><span class="line">│   ├── 9d</span><br><span class="line">│   │   └── 23f8ad2ecc9f8e49d78174bcc6e4668ca7f031</span><br><span class="line">│   ├── a0</span><br><span class="line">│   │   └── cf709bc0991b5340080f944d02894dc1596d46</span><br><span class="line">│   ├── b9</span><br><span class="line">│   │   └── 8c36254dba6e169429c2be57b1bbeccb6e1f28</span><br><span class="line">│   ├── c1</span><br><span class="line">│   │   └── 067ba0a7ba51f937518c9bc051ea744ca748fe</span><br><span class="line">│   ├── c6</span><br><span class="line">│   │   └── b9e95b39b8cd8ead8bbf4b118104741017de1b</span><br><span class="line">│   ├── cc</span><br><span class="line">│   │   ├── 52745b13b00c672c7ac9b1dc42336953293b7a</span><br><span class="line">│   │   └── f88a6f1649213499841c33f9bb36d1d8756fb7</span><br><span class="line">│   ├── f3</span><br><span class="line">│   │   └── 954314c1026028e77ea3a765aadefa67b45195</span><br><span class="line">│   ├── fd</span><br><span class="line">│   │   └── 885cfcd548a24fabb2f5b49ea60beadc8c5912</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │   └── master</span><br><span class="line">    └── tags</span><br><span class="line">        ├── v0.0.1</span><br><span class="line">        └── v0.0.2</span><br><span class="line"></span><br><span class="line">36 directories, 51 files</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTY0ODc2L2hlYWQtYW5kLW9yaWctaGVhZC1pbi1naXQ=" title="https://stackoverflow.com/questions/964876/head-and-orig-head-in-git">https://stackoverflow.com/questions/964876/head-and-orig-head-in-git<i class="fa fa-external-link"></i></span></p><p>.git/HEAD 指明了当前活跃分支是哪个分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p><a href="images/git-obj-model.svg">svg版</a></p><p><img src="https://raw.githubusercontent.com/liuyanjie/knowledge/master/vcs/git/images/git-obj-model.png" alt="git-obj-model"></p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvdmNzL2dpdC9naXQtb2JqZWN0LW1vZGVsLm1k" title="https://github.com/liuyanjie/knowledge/tree/master/vcs/git/git-object-model.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvdmNzL2dpdC9naXQtb2JqZWN0LW1vZGVsLm1k" title="https://github.com/liuyanjie/knowledge/edit/master/vcs/git/git-object-model.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vcs </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（八）线程池（Threadpool）</title>
      <link href="/posts/node.js/libuv/8-libuv-threadpool/"/>
      <url>/posts/node.js/libuv/8-libuv-threadpool/</url>
      
        <content type="html"><![CDATA[<ul><li><span class="exturl" data-url="aHR0cDovL2RvY3MubGlidXYub3JnL2VuL3YxLngvdGhyZWFkcG9vbC5odG1s" title="http://docs.libuv.org/en/v1.x/threadpool.html">http://docs.libuv.org/en/v1.x/threadpool.html<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2RvY3MubGlidXYub3JnL2VuL3YxLngvZG5zLmh0bWw=" title="http://docs.libuv.org/en/v1.x/dns.html">http://docs.libuv.org/en/v1.x/dns.html<i class="fa fa-external-link"></i></span></li></ul><p>线程池在程序设计中是常用的提升并发计算能力、提升吞吐量的常用手段，在 libnv 也不例外，并且结合事件循环，实现了异步支持。</p><p>libuv 提供可用于执行用户代码的线程池，并且能够在任务完成时，向事件循环线程发送消息通知主线程完成收尾工作。</p><p>默认情况下，线程池的大小是 <code>4</code>，但是可以在启动阶段通过设置 <code>UV_THREADPOOL_SIZE</code> 环境变量进行修改，最大为 <code>128</code>。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>线程池全局的并且跨所有事件循环共享，当特定的函数使用线程池时（例如，调用 <code>uv_queue_work()</code>），libuv 通过 <code>init_threads</code> 函数预分配和初始化一定数量的线程，初始化函数只会被调用一次，这会带来一定的内存开销，但是可以提升运行时性能。</p><h3 id="线程池初始化"><a href="#线程池初始化" class="headerlink" title="线程池初始化"></a>线程池初始化</h3><p>线程池是由 <code>init_threads</code> 函数初始化的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init_threads</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* val;</span><br><span class="line">  <span class="keyword">uv_sem_t</span> sem;</span><br><span class="line"></span><br><span class="line">  nthreads = ARRAY_SIZE(default_threads);</span><br><span class="line">  val = getenv(<span class="string">"UV_THREADPOOL_SIZE"</span>);</span><br><span class="line">  <span class="keyword">if</span> (val != <span class="literal">NULL</span>)</span><br><span class="line">    nthreads = atoi(val);</span><br><span class="line">  <span class="keyword">if</span> (nthreads == <span class="number">0</span>)</span><br><span class="line">    nthreads = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (nthreads &gt; MAX_THREADPOOL_SIZE)</span><br><span class="line">    nthreads = MAX_THREADPOOL_SIZE;</span><br><span class="line"></span><br><span class="line">  threads = default_threads;</span><br><span class="line">  <span class="keyword">if</span> (nthreads &gt; ARRAY_SIZE(default_threads)) &#123;</span><br><span class="line">    threads = uv__malloc(nthreads * <span class="keyword">sizeof</span>(threads[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">if</span> (threads == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      nthreads = ARRAY_SIZE(default_threads);</span><br><span class="line">      threads = default_threads;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (uv_cond_init(&amp;cond))</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (uv_mutex_init(&amp;mutex))</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  QUEUE_INIT(&amp;wq);</span><br><span class="line">  QUEUE_INIT(&amp;slow_io_pending_wq);</span><br><span class="line">  QUEUE_INIT(&amp;run_slow_work_message);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (uv_sem_init(&amp;sem, <span class="number">0</span>))</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nthreads; i++)</span><br><span class="line">    <span class="keyword">if</span> (uv_thread_create(threads + i, worker, &amp;sem))</span><br><span class="line">      <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nthreads; i++)</span><br><span class="line">    uv_sem_wait(&amp;sem);</span><br><span class="line"></span><br><span class="line">  uv_sem_destroy(&amp;sem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化逻辑如下：</p><ol><li>线程池中线程数量，并分配用于存储线程信息的内存空间；</li><li>初始化静态全局的 <code>线程锁</code> 和 <code>线程条件变量</code>；</li><li>初始化静态全局 <code>uv__work</code> 队列；<ol><li><code>wq</code> 待执行的任务队列，未执行完毕，<code>loop-&gt;wq</code> 同为任务队列，但是保持的是执行完毕的任务；</li><li><code>slow_io_pending_wq</code> 慢IO延迟任务队列；</li><li><code>run_slow_work_message</code> 慢IO延迟任务队列代表，当存在慢IO延迟任务队列时，<code>run_slow_work_message</code> 被插入到 <code>wq</code> 中代替所有慢IO任务排队；</li></ol></li><li>创建一定数量的线程；</li><li>等待所以线程创建完成。</li></ol><p>在创建线程的时候，线程执行的函数是 <code>worker</code>，该函数负责在线程中处理 <code>wq</code> 上的任务。</p><p><code>worker</code> 实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* To avoid deadlock with uv_cancel() it's crucial that the worker</span></span><br><span class="line"><span class="comment"> * never holds the global mutex and the loop-local mutex at the same time.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">worker</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">uv__work</span>* <span class="title">w</span>;</span></span><br><span class="line">  QUEUE* q;</span><br><span class="line">  <span class="keyword">int</span> is_slow_work;</span><br><span class="line"></span><br><span class="line">  uv_sem_post((<span class="keyword">uv_sem_t</span>*) arg);</span><br><span class="line">  arg = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加锁 mutex</span></span><br><span class="line">  <span class="comment">// 因为只有一个线程能抢占锁，所以多个线程也只能一个接一个的进入循环</span></span><br><span class="line">  <span class="comment">// 因为整个线程池中线程创建过程中不会出现其他线程在其他位置抢占并锁定 mutex 的情形出现，</span></span><br><span class="line">  <span class="comment">// 所以只有该位置会抢占加锁，而后很快释放锁，所以线程池中的线程之后短暂的阻塞在这里。</span></span><br><span class="line">  <span class="comment">// 工作线程需要不断的等待处理任务，所以需要进入死循环</span></span><br><span class="line">  uv_mutex_lock(&amp;mutex);</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">/* `mutex` should always be locked at this point. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Keep waiting while either no work is present or only slow I/O</span></span><br><span class="line"><span class="comment">       and we're at the threshold for that. */</span></span><br><span class="line">    <span class="comment">// 条件满足时，没有任务需要处理，线程进入挂起等待状态，等待被唤醒。</span></span><br><span class="line">    <span class="keyword">while</span> (</span><br><span class="line">      <span class="comment">// 任务队列为空</span></span><br><span class="line">      QUEUE_EMPTY(&amp;wq) ||</span><br><span class="line">      <span class="comment">// 任务队列非空，但是</span></span><br><span class="line">           <span class="comment">// 队列头部被标记为慢速IO任务</span></span><br><span class="line">           <span class="comment">// 且该队列中只有run_slow_work_message一个数据节点</span></span><br><span class="line">           <span class="comment">// 且正在处理的慢IO任务超过阈值（默认2）</span></span><br><span class="line">           <span class="comment">//   该一个条件避免太多线程同时都在处理慢IO操作</span></span><br><span class="line">           <span class="comment">//   达到阈值后空闲的线程不再接慢IO任务而是挂起，等待非慢IO操作任务 能有机会尽快得到处理</span></span><br><span class="line">           <span class="comment">//   正在进行的慢IO任务完成后，阈值限制解除，可以接慢IO任务</span></span><br><span class="line">           <span class="comment">//   最终，保证了最多只有 `(nthreads + 1) / 2` 个线程处理慢IO</span></span><br><span class="line">           <span class="comment">//   区分了快车道和慢车道后，能有效避免慢车堵快车，提升性能</span></span><br><span class="line">           (QUEUE_HEAD(&amp;wq) == &amp;run_slow_work_message</span><br><span class="line">           &amp;&amp; QUEUE_NEXT(&amp;run_slow_work_message) == &amp;wq </span><br><span class="line">           &amp;&amp; slow_io_work_running &gt;= slow_work_thread_threshold())) &#123;</span><br><span class="line">      <span class="comment">// 进入休息区，注意某线程在执行 while 循环时该线程一定抢占了 mutex，不论是首次还是后续执行</span></span><br><span class="line">      <span class="comment">// 线程挂起，等待唤醒</span></span><br><span class="line">      <span class="comment">// uv_cond_wait 会使线程挂起等待cond上的信号，为防止多线程同时调用 uv_cond_wait，必须提前加锁</span></span><br><span class="line">      <span class="comment">// uv_cond_wait 在挂起前会释放 mutex，其他阻塞在 mutex 上的线程会在 mutex 释放时被唤醒，并在唤醒时重新抢占 mutex，即只能唤醒一个</span></span><br><span class="line">      <span class="comment">// 所以，阻塞在for循环外的多个线程中的某一个会重新抢占 mutex 执行到达此处挂起，又继续唤醒其他线程</span></span><br><span class="line">      <span class="comment">//   也可能唤醒 阻塞在 uv__work_submit -&gt; post 函数提交任务的抢占锁的位置的线程（通常为主事件循环线程）</span></span><br><span class="line">      <span class="comment">// 挂起的线程都是空闲的线程，被唤醒后为非空闲的线程，所以需要更新空闲线程计数</span></span><br><span class="line">      idle_threads += <span class="number">1</span>;</span><br><span class="line">      uv_cond_wait(&amp;cond, &amp;mutex);    </span><br><span class="line">      idle_threads -= <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 挂起的线程在被唤醒后，一定不满足再次进入循环的条件，会继续向下执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 进入工作区，一共有三个区间，前后两个区间都有锁，中间的区间执行用户代码无锁</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程被唤醒，开始干活</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下操作因线程被唤醒时会自动对mutex上锁</span></span><br><span class="line">    <span class="comment">// 所以以下解锁前的区域对共享变量的操作都是安全的</span></span><br><span class="line">    <span class="comment">// 锁定区间代码同一时段只能有一个线程在执行</span></span><br><span class="line">    <span class="comment">// 因并无耗时任务，所以不会影响性能</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取任务</span></span><br><span class="line">    q = QUEUE_HEAD(&amp;wq);</span><br><span class="line">    <span class="comment">// 如果收到线程退出消息，跳出循环，线程声明周期结束</span></span><br><span class="line">    <span class="comment">// 在外部发送消息通知线程主动退出，也可在外部kill线程</span></span><br><span class="line">    <span class="keyword">if</span> (q == &amp;exit_message) &#123;</span><br><span class="line">      uv_cond_signal(&amp;cond);</span><br><span class="line">      uv_mutex_unlock(&amp;mutex);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将任务摘出来</span></span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);  <span class="comment">/* Signal uv_cancel() that the work req is executing. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化慢IO操作标记为0，即非慢IO操作</span></span><br><span class="line">    is_slow_work = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (q == &amp;run_slow_work_message) &#123;</span><br><span class="line">      <span class="comment">// 该任务为慢IO任务</span></span><br><span class="line">      <span class="comment">// 通常情况下，while 的第二个条件成立才能进入此段代码</span></span><br><span class="line">      <span class="comment">// 此时 q 只是一个慢IO任务标记，真正的任务在 slow_io_pending_wq 中</span></span><br><span class="line">      <span class="comment">// 所以需要特殊处理，获取真正的任务 q</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* If we're at the slow I/O threshold, re-schedule until after all</span></span><br><span class="line"><span class="comment">         other work in the queue is done. */</span></span><br><span class="line">      <span class="comment">// 如果当前运行的慢IO操作的线程数达到阈值（2个线程）</span></span><br><span class="line">      <span class="comment">// 则将这些操作插入到 wq 队列末尾，延迟处理</span></span><br><span class="line">      <span class="comment">// 避免多个线程同时处理慢IO</span></span><br><span class="line">      <span class="comment">// 临界状态：已经有达到阈值限制个数的线程进入工作区处理慢IO任务，但是还没执行更新慢IO线程计数器代码，</span></span><br><span class="line">      <span class="comment">//         后续被慢IO任务唤醒的线程线程可能因为慢IO线程计数器未更新而满足进入条件。</span></span><br><span class="line">      <span class="comment">//         但是，因为该区间锁定了 mutex，阻塞在 uv_cond_wait 处的代码无法抢占锁无法执行，也就是无法跳出 while 循环，</span></span><br><span class="line">      <span class="comment">//         到 mutex 释放时，被唤醒的线程能够抢占锁时，计数器已经被更新了，前面所说的进入条件不再满足了。</span></span><br><span class="line">      <span class="comment">//    所以，条件满足时不能动，能动了条件又不满足了，本质上，两次判断在同一段锁定区间，所以以下情形应该难以出现，难道还有其他情况？</span></span><br><span class="line">      <span class="keyword">if</span> (slow_io_work_running &gt;= slow_work_thread_threshold()) &#123;</span><br><span class="line">        QUEUE_INSERT_TAIL(&amp;wq, q);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* If we encountered a request to run slow I/O work but there is none</span></span><br><span class="line"><span class="comment">         to run, that means it's cancelled =&gt; Start over. */</span></span><br><span class="line">      <span class="comment">// 如果慢IO队列为空，可能任务被取消</span></span><br><span class="line">      <span class="keyword">if</span> (QUEUE_EMPTY(&amp;slow_io_pending_wq))</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注意以上两处不需要 uv_mutex_unlock(&amp;mutex)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 标记该线程正在处理慢IO操作，同时增加慢IO线程计数器</span></span><br><span class="line">      is_slow_work = <span class="number">1</span>;</span><br><span class="line">      slow_io_work_running++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 从慢IO队列中重新获取任务</span></span><br><span class="line">      q = QUEUE_HEAD(&amp;slow_io_pending_wq);</span><br><span class="line">      QUEUE_REMOVE(q);</span><br><span class="line">      QUEUE_INIT(q);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* If there is more slow I/O work, schedule it to be run as well. */</span></span><br><span class="line">      <span class="comment">// 如果还有更多的慢IO操作，则将这些任务插入到 wq 队列末尾，本次只能处理 q 这一个任务</span></span><br><span class="line">      <span class="keyword">if</span> (!QUEUE_EMPTY(&amp;slow_io_pending_wq)) &#123;</span><br><span class="line">        QUEUE_INSERT_TAIL(&amp;wq, &amp;run_slow_work_message);</span><br><span class="line">        <span class="comment">// 如果有空闲线程，唤醒</span></span><br><span class="line">        <span class="keyword">if</span> (idle_threads &gt; <span class="number">0</span>)</span><br><span class="line">          uv_cond_signal(&amp;cond);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解锁 mutex</span></span><br><span class="line">    uv_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只有以下两行不涉及竞态资源读写，不需要加锁，实际也不能锁</span></span><br><span class="line">    <span class="comment">// 慢IO任务还是非慢IO任务，指的是w-&gt;work</span></span><br><span class="line">    w = QUEUE_DATA(q, struct uv__work, wq);</span><br><span class="line">    w-&gt;work(w);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为 loop 在多线程中共享，所以访问 loop 需要加锁</span></span><br><span class="line">    uv_mutex_lock(&amp;w-&gt;loop-&gt;wq_mutex);</span><br><span class="line">    w-&gt;work = <span class="literal">NULL</span>;  <span class="comment">/* Signal uv_cancel() that the work req is done</span></span><br><span class="line"><span class="comment">                        executing. */</span></span><br><span class="line">    <span class="comment">// 将完成的任务插入到 loop-&gt;wq 队列中，在主事件循环线程中处理</span></span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;w-&gt;loop-&gt;wq, &amp;w-&gt;wq);</span><br><span class="line">    <span class="comment">// 发送完成信号，唤醒事件询线程并处理</span></span><br><span class="line">    uv_async_send(&amp;w-&gt;loop-&gt;wq_async);</span><br><span class="line">    uv_mutex_unlock(&amp;w-&gt;loop-&gt;wq_mutex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Lock `mutex` since that is expected at the start of the next</span></span><br><span class="line"><span class="comment">     * iteration. */</span></span><br><span class="line">    uv_mutex_lock(&amp;mutex);</span><br><span class="line">    <span class="keyword">if</span> (is_slow_work) &#123;</span><br><span class="line">      <span class="comment">/* `slow_io_work_running` is protected by `mutex`. */</span></span><br><span class="line">      slow_io_work_running--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv_async_send</code> 已经分析过了，它向事件循环线程发送消息唤醒事件循环线程</p><h3 id="主线程中的初始化工作"><a href="#主线程中的初始化工作" class="headerlink" title="主线程中的初始化工作"></a>主线程中的初始化工作</h3><p>主线程中的初始化工作是先于线程池初始化的，这部分初始化完成了用于接收 work 线程消息的 AsyncHandle 的初始化工作。</p><p><code>uv_async_send</code> 通过 <code>loop-&gt;wq_async</code> Handle 发送了消息，字段定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">uv_mutex_t</span> wq_mutex;                                                        \</span><br><span class="line">  <span class="keyword">uv_async_t</span> wq_async;                                                        \</span><br></pre></td></tr></table></figure><p><code>loop-&gt;wq_async</code> 是在 <code>uv_loop_init</code> 初始化的，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_loop_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  err = uv_async_init(loop, &amp;loop-&gt;wq_async, uv__work_done);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">goto</span> fail_async_init;</span><br><span class="line"></span><br><span class="line">  uv__handle_unref(&amp;loop-&gt;wq_async);</span><br><span class="line">  loop-&gt;wq_async.flags |= UV_HANDLE_INTERNAL;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loop-&gt;wq_async</code> 被解引用了，所以并不会影响 <code>loop</code> 的活动状态。</p><p><code>loop-&gt;wq_async</code> 的事件处理函数是 <code>uv__work_done</code>，该函数在事件循环线程中执行，实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__work_done</span><span class="params">(<span class="keyword">uv_async_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">uv__work</span>* <span class="title">w</span>;</span></span><br><span class="line">  <span class="keyword">uv_loop_t</span>* loop;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE wq;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取出所有已完成的work，因与其他线程共享此变量，所以需要同步，因此此处可能会导致事件循环线程短暂阻塞</span></span><br><span class="line">  loop = container_of(handle, <span class="keyword">uv_loop_t</span>, wq_async);</span><br><span class="line">  uv_mutex_lock(&amp;loop-&gt;wq_mutex);</span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;wq, &amp;wq);</span><br><span class="line">  uv_mutex_unlock(&amp;loop-&gt;wq_mutex);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历所有已完成的work，调用 w-&gt;done，done 函数由用户提供</span></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;wq)) &#123;</span><br><span class="line">    q = QUEUE_HEAD(&amp;wq);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line"></span><br><span class="line">    w = container_of(q, struct uv__work, wq);</span><br><span class="line">    err = (w-&gt;work == uv__cancelled) ? UV_ECANCELED : <span class="number">0</span>;</span><br><span class="line">    w-&gt;done(w, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，从线程池初始化到线程处理任务再到线程与事件循环线程通信最后事件循环线程清理已完成的任务的整个流程已经分析完成。</p><p>下面，该了解一下，如何向线程池提交任务任务了。</p><h2 id="任务提交"><a href="#任务提交" class="headerlink" title="任务提交"></a>任务提交</h2><p>向线程池提交任务的 API 是 <code>uv_queue_work</code>，也实现线程池唯一对外暴露的 API，下面我们看它的具体实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_queue_work</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">uv_work_t</span>* req,</span></span></span><br><span class="line"><span class="function"><span class="params">                  uv_work_cb work_cb,</span></span></span><br><span class="line"><span class="function"><span class="params">                  uv_after_work_cb after_work_cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (work_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> UV_EINVAL;</span><br><span class="line"></span><br><span class="line">  uv__req_init(loop, req, UV_WORK);</span><br><span class="line">  req-&gt;loop = loop;</span><br><span class="line">  req-&gt;work_cb = work_cb;</span><br><span class="line">  req-&gt;after_work_cb = after_work_cb;</span><br><span class="line">  uv__work_submit(loop,</span><br><span class="line">                  &amp;req-&gt;work_req,</span><br><span class="line">                  UV__WORK_CPU,</span><br><span class="line">                  uv__queue_work,</span><br><span class="line">                  uv__queue_done);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv_queue_work</code> 初始化了一个 <code>uv_work_t</code> 类型的 <code>request</code>，<code>work_cb</code> 为线程池中线程执行的函数，<code>after_work_cb</code> 为 <code>work_cb</code> 执行完成之后在事件循环线程中执行的函数，<code>req-&gt;work_req</code> 是队列节点。最后通过 <code>uv__work_submit</code> 向线程池中提交任务。</p><p>最后通过调用 <code>uv__work_submit</code> 向线程池中提交任务，<code>uv__work_submit</code> 的两个实参 <code>uv__queue_work</code> 和 <code>uv__queue_done</code> 分别对 <code>work_cb</code> 和 <code>after_work_cb</code> 进行简单的封装。实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__queue_work</span><span class="params">(struct uv__work* w)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_work_t</span>* req = container_of(w, <span class="keyword">uv_work_t</span>, work_req);</span><br><span class="line"></span><br><span class="line">  req-&gt;work_cb(req);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__queue_done</span><span class="params">(struct uv__work* w, <span class="keyword">int</span> err)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_work_t</span>* req;</span><br><span class="line"></span><br><span class="line">  req = container_of(w, <span class="keyword">uv_work_t</span>, work_req);</span><br><span class="line">  uv__req_unregister(req-&gt;loop, req);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req-&gt;after_work_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  req-&gt;after_work_cb(req, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__work_submit</code> 的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__work_submit</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                     struct uv__work* w,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">enum</span> uv__work_kind kind,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">void</span> (*work)(struct uv__work* w),</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">void</span> (*done)(struct uv__work* w, <span class="keyword">int</span> status))</span> </span>&#123;</span><br><span class="line">  uv_once(&amp;once, init_once);</span><br><span class="line">  w-&gt;loop = loop;</span><br><span class="line">  w-&gt;work = work;</span><br><span class="line">  w-&gt;done = done;</span><br><span class="line">  post(&amp;w-&gt;wq, kind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__work_submit</code> 通过调用 <code>init_once</code> 初始化线程池，<code>uv_once</code> 确保线程池初始化函数 <code>init_once</code> 只会被调用一次。</p><p>然后对 <code>uv__work</code> 进行初始化，<code>w-&gt;work</code> 在工作线程 <code>worker</code> 中调用，<code>w-&gt;done</code> 在事件循环线程 <code>uv__work_done</code> 中调用</p><p>最后通过调用 <code>post</code> 提交任务，<code>post</code> 实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(QUEUE* q, <span class="keyword">enum</span> uv__work_kind kind)</span> </span>&#123;</span><br><span class="line">  uv_mutex_lock(&amp;mutex);</span><br><span class="line">  <span class="keyword">if</span> (kind == UV__WORK_SLOW_IO) &#123;</span><br><span class="line">    <span class="comment">/* Insert into a separate queue. */</span></span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;slow_io_pending_wq, q);</span><br><span class="line">    <span class="keyword">if</span> (!QUEUE_EMPTY(&amp;run_slow_work_message)) &#123;</span><br><span class="line">      <span class="comment">/* Running slow I/O tasks is already scheduled =&gt; Nothing to do here.</span></span><br><span class="line"><span class="comment">         The worker that runs said other task will schedule this one as well. */</span></span><br><span class="line">      uv_mutex_unlock(&amp;mutex);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q = &amp;run_slow_work_message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  QUEUE_INSERT_TAIL(&amp;wq, q);</span><br><span class="line">  <span class="keyword">if</span> (idle_threads &gt; <span class="number">0</span>)</span><br><span class="line">    uv_cond_signal(&amp;cond);</span><br><span class="line">  uv_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为任务队列会被线程池中的多个线程并发访问，所以在操作队列之前需要先加锁，完成之后需要解锁。如果有空闲的线程，则立即唤醒它们进行工作。</p><p>在 <code>post</code> 中，慢IO任务被插入到 <code>slow_io_pending_wq</code> 队列中，如果 <code>run_slow_work_message</code> 不在 <code>wq</code> 中，则需要将 <code>run_slow_work_message</code> 插入 <code>wq</code> 队列尾部，标识 <code>slow_io_pending_wq</code> 中存在任务，当 <code>run_slow_work_message</code> 得到被处理机会时，处理慢任务队列中的任务。</p><p>在 <code>uv_queue_work</code> 中的 <code>uv__work_submit</code> 调用时，传递的是 <code>UV__WORK_CPU</code> 表示 CPU 密集型任务。</p><p>任务可能在任意一个线程中提交，通常是在事件循环线程中提交，但是也有可能在work线程中提交，即，<code>w-&gt;work</code> 和 <code>w-&gt;done</code> 这两个函数中都有可能调用 <code>uv__work_submit</code>，这取决于实现。</p><p>将任务提交到工作队列中，这一阶段的工作就已经完成了，线程池中的线程可以开始工作了。</p><p>至此，整个线程池的工作原理已经分析完成，整个工作流程大致可分为三个阶段：</p><ol><li>提交任务；</li><li>work线程处理任务，完成后通知事件循环线程；</li><li>事件循环线程收到通知后完成收尾工作。</li></ol><p>在接口使用中，是不需要太关心以上流程和工作原理的，更应该关系 <code>work_cb</code> 和 <code>after_work_cb</code> 以及其他逻辑的实现。</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>线程池在 libuv 内部用于完成所有文件系统操作（<code>requests</code>），也用于实现 <code>getaddrinfo</code> 和 <code>getnameinfo</code> 等 DNS 相关的操作（<code>requests</code>）。搜索 <code>uv_queue_work</code> 可找到相关使用位置。可以这些内部实现作为使用示例，在内部，并不通过 <code>uv_queue_work</code> 提交任务，而是直接调用 <code>uv__work_submit</code>，因为它们都有各自不同的 <code>uv__x_work</code> 和 <code>uv__x_done</code> 实现。</p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di84LWxpYnV2LXRocmVhZHBvb2wubWQ=" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/8-libuv-threadpool.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di84LWxpYnV2LXRocmVhZHBvb2wubWQ=" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/8-libuv-threadpool.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（七）异步唤醒（Async）</title>
      <link href="/posts/node.js/libuv/7-libuv-async/"/>
      <url>/posts/node.js/libuv/7-libuv-async/</url>
      
        <content type="html"><![CDATA[<p>Async 允许用户在其他线程中唤醒主事件循环线程并触发回调函数调用。</p><p>事件循环线程在运行到 Pool 阶段会因为 <code>epoll_pwait</code> 调用阻塞一定的时间，libuv 会根据事件循环信息预估阻塞多长时间合适，也就是 <code>timeout</code>。但是在某些情境下，libuv 是无法准确预估的，例如线程池支持的异步文件操作，这些其他线程中的任务是无法有效判断多久能够运行完成的，在 libuv 中，其他线程工作完成之后，执行结果需要交给主事件循环线程，而事件循环线程可能恰好阻塞在 <code>epoll_pwait</code> 上，这时为了能够让其他线程的执行结果能够快速得到处理，需要唤醒主事件循环线程，也就是 <code>epoll_pwait</code>，而 Async 正式用来至此唤醒主事件循环的机制，简单的调用 <code>uv_async_send</code> 即可。线程池中的线程也正是利用这个机制和主事件循环线程通讯。</p><p>通过前文中对IO观察者的分析，我们知道，让 <code>epoll_pwait</code> 返回的方式，就是让 <code>epoll_pwait</code> 轮询的文件描述符中有I/O事件发生，Async 就是这么做的，通过 <code>uv_async_send</code> 向某个固定的文件描述符发送数据，使 <code>epoll_pwait</code> 返回。</p><p>Async 的入口函数共用两个：</p><ul><li>uv_async_init 初始化 Async Handle</li><li>uv_async_send 发送消息唤醒事件循环线程并触发回调函数调用</li></ul><p>首先，看一下 Async Handle 结构 <code>uv_async_s</code> 的定义：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9pbmNsdWRlL3V2LmgjTDc4OQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/include/uv.h#L789">https://github.com/libuv/libuv/blob/v1.28.0/include/uv.h#L789<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uv_async_s</span> &#123;</span></span><br><span class="line">  UV_HANDLE_FIELDS</span><br><span class="line">  UV_ASYNC_PRIVATE_FIELDS</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_ASYNC_PRIVATE_FIELDS                                               \</span></span><br><span class="line">  uv_async_cb async_cb;                                                       \</span><br><span class="line">  <span class="keyword">void</span>* <span class="built_in">queue</span>[<span class="number">2</span>];                                                             \</span><br><span class="line">  <span class="keyword">int</span> pending;                                                                \</span><br></pre></td></tr></table></figure><p>结构比较简单，<code>async_cb</code> 保存回调函数指针，<code>queue</code> 作为队列节点接入 <code>loop-&gt;async_handles</code>，<code>pending</code> 字段表示已发送了唤醒信号，初始化为 <code>0</code>, 在调用唤醒函数之后会被设置为 <code>1</code>。</p><p>继续看 <code>uv_async_init</code>：</p><p>注意：该初始化函数不同于其他初始化函数，该函数会立即启动 <code>Handle</code>，所以没有 <code>Start</code>。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L2FzeW5jLmMjTDQw" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/async.c#L40">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/async.c#L40<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_async_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv_async_t</span>* handle, uv_async_cb async_cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  err = uv__async_start(loop);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">  uv__handle_init(loop, (<span class="keyword">uv_handle_t</span>*)handle, UV_ASYNC);</span><br><span class="line">  handle-&gt;async_cb = async_cb;</span><br><span class="line">  handle-&gt;pending = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  QUEUE_INSERT_TAIL(&amp;loop-&gt;async_handles, &amp;handle-&gt;<span class="built_in">queue</span>);</span><br><span class="line">  uv__handle_start(handle);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__async_start</code> 初始化并启动了 <code>loop-&gt;async_io_watcher</code>，使事件循环能够通过 <code>loop-&gt;async_io_watcher</code> 接收到其他线程发送的唤醒消息。</p><p>在进行简单的初始化后，直接启动了 <code>handle</code>，并不需要像其他 <code>handle</code> 一样提供 <code>uv_async_start</code> 这样的方法。</p><p>我们继续看一下 <code>uv__async_start</code> 如何工作：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9hc3luYy5jI0wxNTY=" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/async.c#L156">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/async.c#L156<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__async_start</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;async_io_watcher.fd != <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  err = uv__async_eventfd();</span><br><span class="line">  <span class="keyword">if</span> (err &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    pipefd[<span class="number">0</span>] = err;</span><br><span class="line">    pipefd[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (err == UV_ENOSYS) &#123;</span><br><span class="line">    err = uv__make_pipe(pipefd, UV__F_NONBLOCK);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__linux__)</span></span><br><span class="line">    <span class="comment">/* Save a file descriptor by opening one of the pipe descriptors as</span></span><br><span class="line"><span class="comment">     * read/write through the procfs.  That file descriptor can then</span></span><br><span class="line"><span class="comment">     * function as both ends of the pipe.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (err == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line">      <span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"/proc/self/fd/%d"</span>, pipefd[<span class="number">0</span>]);</span><br><span class="line">      fd = uv__open_cloexec(buf, O_RDWR);</span><br><span class="line">      <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        uv__close(pipefd[<span class="number">0</span>]);</span><br><span class="line">        uv__close(pipefd[<span class="number">1</span>]);</span><br><span class="line">        pipefd[<span class="number">0</span>] = fd;</span><br><span class="line">        pipefd[<span class="number">1</span>] = fd;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">  uv__io_init(&amp;loop-&gt;async_io_watcher, uv__async_io, pipefd[<span class="number">0</span>]);</span><br><span class="line">  uv__io_start(loop, &amp;loop-&gt;async_io_watcher, POLLIN);</span><br><span class="line">  loop-&gt;async_wfd = pipefd[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数中，初始化并启动了 <code>loop-&gt;async_io_watcher</code>，该函数中创建了管道，其本质是一个内核缓冲区（4k），有两个文件描述符引用，用于有血缘关系的进程和线程间进行数据传递（通信），<code>pipefd</code> 保存了管道的两端的文件描述符，<code>pipefd[0]</code> 用于读数据，<code>pipefd[1]</code> 用于写数据，<code>pipefd[1]</code> 被保存到了 <code>loop-&gt;async_wfd</code>，通过I/O观察者监听 <code>pipefd[0]</code> 即可接收消息，通过向 <code>loop-&gt;async_wfd</code> 写数据，即可发送消息。<code>uv__async_start</code> 在已经初始化 <code>loop-&gt;async_io_watcher</code> 的情况下，无需再次初始化。</p><p>需要注意的是，<code>uv_async_init</code> 可能调用多次用于初始化多个不同的 Async Handle，但是 <code>loop-&gt;async_io_watcher</code> 只有一个，也就是这些 Async Handle 共享了 <code>loop-&gt;async_io_watcher</code>，那么在 <code>loop-&gt;async_io_watcher</code> 上有I/O事件时，并不知道是哪个Async Handle发送的。</p><p><code>loop-&gt;async_io_watcher</code> 上的I/O事件，由 <code>uv__async_io</code> 处理，它的实现如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L2FzeW5jLmMjTDc2" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/async.c#L76">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/async.c#L76<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__async_io</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv__io_t</span>* w, <span class="keyword">unsigned</span> <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">  <span class="keyword">ssize_t</span> r;</span><br><span class="line">  QUEUE <span class="built_in">queue</span>;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  <span class="keyword">uv_async_t</span>* h;</span><br><span class="line"></span><br><span class="line">  assert(w == &amp;loop-&gt;async_io_watcher);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    r = read(w-&gt;fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r == <span class="keyword">sizeof</span>(buf))</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;async_handles, &amp;<span class="built_in">queue</span>);</span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;<span class="built_in">queue</span>)) &#123;</span><br><span class="line">    q = QUEUE_HEAD(&amp;<span class="built_in">queue</span>);</span><br><span class="line">    h = QUEUE_DATA(q, <span class="keyword">uv_async_t</span>, <span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;loop-&gt;async_handles, q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmpxchgi(&amp;h-&gt;pending, <span class="number">1</span>, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (h-&gt;async_cb == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    h-&gt;async_cb(h);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑如下：</p><ol><li>不断的读取 <code>w-&gt;fd</code> 上的数据到 <code>buf</code> 中直到为空，<code>buf</code> 中的数据无实际用途；</li><li>遍历 <code>loop-&gt;async_handles</code> 队列，调用所有 <code>h-&gt;pending</code> 值为 <code>1</code> 的 <code>handle</code> 的 <code>async_cb</code> 函数如果存在的话。</li></ol><p><code>h-&gt;pending</code> 是在 <code>uv_async_send</code> 中被设置为 <code>1</code>。因为 <code>h-&gt;pending</code> 会在多线程中被访问到，所以存在资源争抢的临界状态，<code>cmpxchgi</code> 是原子操作，在这段代码中，如果 <code>h-&gt;pending == 1</code> 会被原子的 修改成 <code>0</code>，其他线程中对 <code>h-&gt;pending</code> 的读写也通过 <code>cmpxchgi</code> 进行原子操作，防止同时读写程序异常。</p><p>如上文所述，<code>uv__async_io</code> 并不知道是哪个 Async Handle 上调用的，<code>uv__async_io</code> 实际上调用了所有的 <code>h-&gt;pending</code> 值为 <code>1</code> 也就是发送过唤醒信号的 <code>handle</code>。实际上，Async 的设计的目的是能够唤醒主事件循环线程，所以 libuv 并需要关心是哪个 Async Handle 发送的信号，有可能同时发送。</p><p>接下来 我们了解一下 如何唤醒事件循环，简单的调用 <code>uv_async_send</code> 即可：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9hc3luYy5jI0w1OA==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/async.c#L58">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/async.c#L58<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_async_send</span><span class="params">(<span class="keyword">uv_async_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Do a cheap read first. */</span></span><br><span class="line">  <span class="keyword">if</span> (ACCESS_ONCE(<span class="keyword">int</span>, handle-&gt;pending) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cmpxchgi(&amp;handle-&gt;pending, <span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">    uv__async_send(handle-&gt;loop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__async_send</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span>* buf;</span><br><span class="line">  <span class="keyword">ssize_t</span> len;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line">  buf = <span class="string">""</span>;</span><br><span class="line">  len = <span class="number">1</span>;</span><br><span class="line">  fd = loop-&gt;async_wfd;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__linux__)</span></span><br><span class="line">  <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint64_t</span> val = <span class="number">1</span>;</span><br><span class="line">    buf = &amp;val;</span><br><span class="line">    len = <span class="keyword">sizeof</span>(val);</span><br><span class="line">    fd = loop-&gt;async_io_watcher.fd;  <span class="comment">/* eventfd */</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    r = write(fd, buf, len);</span><br><span class="line">  <span class="keyword">while</span> (r == <span class="number">-1</span> &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (r == len)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (r == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">if</span> (errno == EAGAIN || errno == EWOULDBLOCK)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv_async_send</code> 可能在多个线程中同时调用，而且有可能在同一个 Async Handle 上调用，所以要求对 <code>handle-&gt;pending</code> 进行原子性读写。</p><p><code>uv__async_send</code> 为实际进行写操作，因为管道中存在缓存区，所以需要不断的向 <code>loop-&gt;async_wfd</code> 写入数据，直到阻塞为止。</p><p>以上，就是 Async 唤醒事件循环线程的实现方式，很简单，核心在于竞态问题的解决。</p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di83LWxpYnV2LWFzeW5jLm1k" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/7-libuv-async.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di83LWxpYnV2LWFzeW5jLm1k" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/7-libuv-async.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（六）流（Stream）</title>
      <link href="/posts/node.js/libuv/6-libuv-stream/"/>
      <url>/posts/node.js/libuv/6-libuv-stream/</url>
      
        <content type="html"><![CDATA[<p>Stream 提供一个全双工的通信信道的抽象，<code>uv_stream_t</code> 是一个抽象数据类型，libuv 提供了 <code>uv_tcp_t</code>、<code>uv_pipe_t</code>、<code>uv_tty_t</code> <code>3</code> 个 <code>Stream</code> 实现。</p><h2 id="uv-stream-t"><a href="#uv-stream-t" class="headerlink" title="uv_stream_t"></a>uv_stream_t</h2><p><code>uv_stream_t</code> 并未直接提供初始化函数，如同 <code>uv_handle_t</code> 一样，<code>uv_stream_t</code> 是在派生类型初始化的时候间接初始化的。派生类型的初始化函数中都调用了 <code>uv__stream_init</code> 函数对 <code>uv_stream_t</code> 进行初始化。</p><p>先介绍一下 <code>uv_stream_t</code> 的各个字段的含义</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL2luY2x1ZGUvdXYuaCNMNDcw" title="https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv.h#L470">https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv.h#L470<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * uv_stream_t is a subclass of uv_handle_t.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * uv_stream is an abstract class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * uv_stream_t is the parent class of uv_tcp_t, uv_pipe_t and uv_tty_t.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uv_stream_s</span> &#123;</span></span><br><span class="line">  UV_HANDLE_FIELDS</span><br><span class="line">  UV_STREAM_FIELDS</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL2luY2x1ZGUvdXYuaCNMNDYy" title="https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv.h#L462">https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv.h#L462<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_STREAM_FIELDS                        \</span></span><br><span class="line">  <span class="comment">/* number of bytes queued for writing */</span>      \ 共有字段：</span><br><span class="line">  <span class="keyword">size_t</span> write_queue_size;                      \   等待写的字节数</span><br><span class="line">  uv_alloc_cb alloc_cb;                         \   用于分配空间的函数指针</span><br><span class="line">  uv_read_cb read_cb;                           \   读取数据完成之后的回调函数</span><br><span class="line">  <span class="comment">/* private */</span>                                 \</span><br><span class="line">  UV_STREAM_PRIVATE_FIELDS</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL2luY2x1ZGUvdXYvdW5peC5oI0wyODM=" title="https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv/unix.h#L283">https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv/unix.h#L283<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_STREAM_PRIVATE_FIELDS                 \ 私有字段：</span></span><br><span class="line">  <span class="keyword">uv_connect_t</span> *connect_req;                     \   连接请求</span><br><span class="line">  <span class="keyword">uv_shutdown_t</span> *shutdown_req;                   \   关闭请求</span><br><span class="line">  <span class="keyword">uv__io_t</span> io_watcher;                           \   I/O观察者（has-a）</span><br><span class="line">  <span class="keyword">void</span>* write_queue[<span class="number">2</span>];                          \   写数据队列</span><br><span class="line">  <span class="keyword">void</span>* write_completed_queue[<span class="number">2</span>];                \   完成的写数据队列</span><br><span class="line">  uv_connection_cb connection_cb;                \   有新连接时的回调函数</span><br><span class="line">  <span class="keyword">int</span> delayed_error;                             \   延迟的错误</span><br><span class="line">  <span class="keyword">int</span> accepted_fd;                               \   对端的fd</span><br><span class="line">  <span class="keyword">void</span>* queued_fds;                              \   排队的文件描述符列表</span><br><span class="line">  UV_STREAM_PRIVATE_PLATFORM_FIELDS              \</span><br></pre></td></tr></table></figure><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEueC9zcmMvdW5peC9zdHJlYW0uYyNMODQ=" title="https://github.com/libuv/libuv/blob/v1.x/src/unix/stream.c#L84">https://github.com/libuv/libuv/blob/v1.x/src/unix/stream.c#L84<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__stream_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">uv_stream_t</span>* stream,</span></span></span><br><span class="line"><span class="function"><span class="params">                     uv_handle_type type)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  uv__handle_init(loop, (<span class="keyword">uv_handle_t</span>*)stream, type);</span><br><span class="line">  stream-&gt;read_cb = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;alloc_cb = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;close_cb = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;connection_cb = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;connect_req = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;shutdown_req = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;accepted_fd = <span class="number">-1</span>;</span><br><span class="line">  stream-&gt;queued_fds = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;delayed_error = <span class="number">0</span>;</span><br><span class="line">  QUEUE_INIT(&amp;stream-&gt;write_queue);</span><br><span class="line">  QUEUE_INIT(&amp;stream-&gt;write_completed_queue);</span><br><span class="line">  stream-&gt;write_queue_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;emfile_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    err = uv__open_cloexec(<span class="string">"/dev/null"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">/* In the rare case that "/dev/null" isn't mounted open "/"</span></span><br><span class="line"><span class="comment">         * instead.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        err = uv__open_cloexec(<span class="string">"/"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (err &gt;= <span class="number">0</span>)</span><br><span class="line">      loop-&gt;emfile_fd = err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__APPLE__)</span></span><br><span class="line">  stream-&gt;select = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* defined(__APPLE_) */</span></span></span><br><span class="line"></span><br><span class="line">  uv__io_init(&amp;stream-&gt;io_watcher, uv__stream_io, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__stream_init</code> 的整体工作逻辑如下：</p><ol><li>首先调用基类（<code>uv_handle_t</code>）初始化函数 <code>uv__handle_init</code> 对基类进行初始化；</li><li>对 <code>stream</code> 结构进行初始化；<ol><li>初始化相关字段；</li><li>初始化 <code>stream-&gt;write_queue</code> 写队列；</li><li>初始化 <code>stream-&gt;write_completed_queue</code> 写完成队列；为什么有两个写相关的队列？写操作为了实现异步非阻塞，上层的写操作并不能直接写，而是丢到队列中，当下层I/O观察者触发可写事件时，在进行写入操作。</li></ol></li><li>最后调用I/O观察者初始化函数 <code>uv__io_init</code> 对 <code>stream-&gt;io_watcher</code> 进行初始化，初始化传递了异步回调函数 <code>uv__stream_io</code>。</li></ol><p><code>uv__stream_init</code> 在 <code>uv_stream_t</code> 的派生类型的初始化函数 <code>uv_tcp_init</code>、<code>uv_pipe_init</code>、<code>uv_tty_init</code> 中被调用。</p><p>接下来看看 <code>uv__stream_io</code> 都做了什么</p><h4 id="uv-stream-io"><a href="#uv-stream-io" class="headerlink" title="uv__stream_io"></a>uv__stream_io</h4><p><code>uv__stream_io</code> 是 <code>uv_stream_t</code> I/O事件的处理函数，实现如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9zdHJlYW0uYyNMMTI4MQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/stream.c#L1281">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/stream.c#L1281<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__stream_io</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv__io_t</span>* w, <span class="keyword">unsigned</span> <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_stream_t</span>* stream;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取得原 stream 实例</span></span><br><span class="line">  stream = container_of(w, <span class="keyword">uv_stream_t</span>, io_watcher);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 断言</span></span><br><span class="line">  assert(stream-&gt;type == UV_TCP ||</span><br><span class="line">         stream-&gt;type == UV_NAMED_PIPE ||</span><br><span class="line">         stream-&gt;type == UV_TTY);</span><br><span class="line">  assert(!(stream-&gt;flags &amp; UV_HANDLE_CLOSING));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 stream 上存在 连接请求，则首选需要建立连接</span></span><br><span class="line">  <span class="keyword">if</span> (stream-&gt;connect_req) &#123;</span><br><span class="line">    uv__stream_connect(stream);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 断言存在文件描述符</span></span><br><span class="line">  assert(uv__stream_fd(stream) &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 满足读数据条件，进行数据读取，读取成功后继续向下执行，读取需要多久？</span></span><br><span class="line">  <span class="comment">/* Ignore POLLHUP here. Even if it's set, there may still be data to read. */</span></span><br><span class="line">  <span class="keyword">if</span> (events &amp; (POLLIN | POLLERR | POLLHUP))</span><br><span class="line">    uv__read(stream);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// read_cb 可能会关闭 stream</span></span><br><span class="line">  <span class="keyword">if</span> (uv__stream_fd(stream) == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">/* read_cb closed stream. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Short-circuit iff POLLHUP is set, the user is still interested in read</span></span><br><span class="line"><span class="comment">   * events and uv__read() reported a partial read but not EOF. If the EOF</span></span><br><span class="line"><span class="comment">   * flag is set, uv__read() called read_cb with err=UV_EOF and we don't</span></span><br><span class="line"><span class="comment">   * have to do anything. If the partial read flag is not set, we can't</span></span><br><span class="line"><span class="comment">   * report the EOF yet because there is still data to read.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> ((events &amp; POLLHUP) &amp;&amp;</span><br><span class="line">      (stream-&gt;flags &amp; UV_HANDLE_READING) &amp;&amp;</span><br><span class="line">      (stream-&gt;flags &amp; UV_HANDLE_READ_PARTIAL) &amp;&amp;</span><br><span class="line">      !(stream-&gt;flags &amp; UV_HANDLE_READ_EOF)) &#123;</span><br><span class="line">    <span class="keyword">uv_buf_t</span> buf = &#123; <span class="literal">NULL</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    uv__stream_eof(stream, &amp;buf);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// read_cb 可能会关闭 stream</span></span><br><span class="line">  <span class="keyword">if</span> (uv__stream_fd(stream) == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">/* read_cb closed stream. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 满足写数据条件，进行数据写入，写入成功后继续向下执行，读取需要多久？</span></span><br><span class="line">  <span class="keyword">if</span> (events &amp; (POLLOUT | POLLERR | POLLHUP)) &#123;</span><br><span class="line">    uv__write(stream);</span><br><span class="line">    uv__write_callbacks(stream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Write queue drained. */</span></span><br><span class="line">    <span class="keyword">if</span> (QUEUE_EMPTY(&amp;stream-&gt;write_queue))</span><br><span class="line">      uv__drain(stream);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用 <code>uv__stream_io</code> 时，传递了事件循环对象、I/O观察者对象、事件类型等信息。</p><p>执行逻辑如下：</p><ol><li>首先，通过 <code>container_of</code> 将I/O观察者对象地址换算成 <code>stream</code> 对象地址，再进行强制类型转换，进而还原出 <code>stream</code> 类型；</li><li>验证 <code>stream</code> 类型已经状态是否正常；</li><li>如果 <code>stream-&gt;connect_req</code> 存在，说明 该 <code>stream</code> 需要 进行 <code>connect</code>，于是调用 <code>uv__stream_connect</code>；</li><li>如果 满足 可读条件 调用 <code>uv__read</code> 进行数据读操作，读的数据来源于对应的文件描述符，内部调用 <code>stream-&gt;alloc_cb</code> 分配 <code>uv_buf_t</code> 进行数据存储空间分配，然后进行数据读取，读取完成后调用读完成回调 <code>stream-&gt;read_cb</code>；</li><li>如果 满足 流结束条件 调用 <code>uv__stream_eof</code> 进行相关处理；</li><li>如果 满足 可写条件 调用 <code>uv__write</code> 进行数据写操作，写数据需要事先准备好，这些数据被放到了 <code>stream-&gt;write_queue</code> 写队列上，当底层描述符可写时，将队列上的数据写入。</li></ol><p>后续，继续分析 <code>uv__read</code> <code>uv__write</code> <code>uv__stream_eof</code> 的相关实现逻辑，因为不影响大的逻辑，所以暂时可以先留空。</p><h4 id="uv-read"><a href="#uv-read" class="headerlink" title="uv__read"></a>uv__read</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L3N0cmVhbS5jI0wxMTEw" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1110">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1110<i class="fa fa-external-link"></i></span></p><p>当I/O观察者存在可读事件时，函数 <code>uv__read</code> 会被调用，当 <code>uv__read</code> 调用时，会通过 <code>read</code> 从底层文件描述符读取数据，读取的数据写到由 <code>stream-&gt;alloc_cb</code> 分配到内存中，并在完成读取后由 <code>stream-&gt;read_cb</code> 回调给用户层代码。因为可读数据已经由底层准备好，所以读取速度是非常快的，不需要等待。</p><p>默认情况下，当底层没有数据的情况时，<code>read</code> 系统调用会阻塞，但是此处因为文件描述符工作在非阻塞模式下，所有即使没有数据，<code>read</code> 也会立即返回。所以事件循环不好因为 <code>uv__read</code> 调用而耗时过长。</p><h4 id="uv-write"><a href="#uv-write" class="headerlink" title="uv__write"></a>uv__write</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L3N0cmVhbS5jI0w4MDE=" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L801">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L801<i class="fa fa-external-link"></i></span></p><p>当I/O观察者存在可写事件时，函数 <code>uv__write</code> 会被调用，当 <code>uv__write</code> 调用时，数据已经在 <code>stream-&gt;write_queue</code> 队列上排好了，这个队列是 <code>uv_write_t</code> 类型的数据，如果队列为空没有数据可以写。用户在进行 <code>uv_write()</code> API 调用时，因为是异步操作，所以数据并不会直接执行真正的写操作，而是丢到写请求队列中后直接返回了，待到 <code>stream</code> 处于可写状态，事件处理含数 <code>uv__stream_io</code> 被调用，开始调用系统API进行真正的数据写入。</p><p>默认情况下，当底层没有更多内存缓冲区可用时，<code>write</code> 系统调用会阻塞，但是此处因为文件描述符工作在非阻塞模式下，所有即使缓冲区用完，<code>write</code> 也会立即返回。所以事件循环不好因为 <code>uv__write</code> 调用而耗时过长。</p><h4 id="uv-write-callbacks"><a href="#uv-write-callbacks" class="headerlink" title="uv__write_callbacks"></a>uv__write_callbacks</h4><p>清理 <code>stream-&gt;write_completed_queue</code> 已完成写请求的队列，清理空间，并调用回调函数。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L3N0cmVhbS5jI0w5MjY=" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L926">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L926<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__write_callbacks</span><span class="params">(<span class="keyword">uv_stream_t</span>* stream)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_write_t</span>* req;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE pq;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (QUEUE_EMPTY(&amp;stream-&gt;write_completed_queue))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  QUEUE_MOVE(&amp;stream-&gt;write_completed_queue, &amp;pq);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;pq)) &#123;</span><br><span class="line">    <span class="comment">/* Pop a req off write_completed_queue. */</span></span><br><span class="line">    q = QUEUE_HEAD(&amp;pq);</span><br><span class="line">    req = QUEUE_DATA(q, <span class="keyword">uv_write_t</span>, <span class="built_in">queue</span>);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    uv__req_unregister(stream-&gt;loop, req);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req-&gt;bufs != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      stream-&gt;write_queue_size -= uv__write_req_size(req);</span><br><span class="line">      <span class="keyword">if</span> (req-&gt;bufs != req-&gt;bufsml)</span><br><span class="line">        uv__free(req-&gt;bufs);</span><br><span class="line">      req-&gt;bufs = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* <span class="doctag">NOTE:</span> call callback AFTER freeing the request data. */</span></span><br><span class="line">    <span class="keyword">if</span> (req-&gt;cb)</span><br><span class="line">      req-&gt;cb(req, req-&gt;error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="uv-drain"><a href="#uv-drain" class="headerlink" title="uv__drain"></a>uv__drain</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__drain</span><span class="params">(<span class="keyword">uv_stream_t</span>* stream)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_shutdown_t</span>* req;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  assert(QUEUE_EMPTY(&amp;stream-&gt;write_queue));</span><br><span class="line">  uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);</span><br><span class="line">  uv__stream_osx_interrupt_select(stream);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Shutdown? */</span></span><br><span class="line">  <span class="keyword">if</span> ((stream-&gt;flags &amp; UV_HANDLE_SHUTTING) &amp;&amp;</span><br><span class="line">      !(stream-&gt;flags &amp; UV_HANDLE_CLOSING) &amp;&amp;</span><br><span class="line">      !(stream-&gt;flags &amp; UV_HANDLE_SHUT)) &#123;</span><br><span class="line">    assert(stream-&gt;shutdown_req);</span><br><span class="line"></span><br><span class="line">    req = stream-&gt;shutdown_req;</span><br><span class="line">    stream-&gt;shutdown_req = <span class="literal">NULL</span>;</span><br><span class="line">    stream-&gt;flags &amp;= ~UV_HANDLE_SHUTTING;</span><br><span class="line">    uv__req_unregister(stream-&gt;loop, req);</span><br><span class="line"></span><br><span class="line">    err = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (shutdown(uv__stream_fd(stream), SHUT_WR))</span><br><span class="line">      err = UV__ERR(errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err == <span class="number">0</span>)</span><br><span class="line">      stream-&gt;flags |= UV_HANDLE_SHUT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req-&gt;cb != <span class="literal">NULL</span>)</span><br><span class="line">      req-&gt;cb(req, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>不同于其他类型的 <code>handle</code>，提供了 <code>uv_timer_start</code> 等方法，Stream 的 Start 在命名上略有不同，对 Stream 来说，有 uv_read_start 和 uv_write 以及其他的 Start 方式。</p><h4 id="Start：uv-read-start"><a href="#Start：uv-read-start" class="headerlink" title="Start：uv_read_start"></a>Start：<code>uv_read_start</code></h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy93aW4vc3RyZWFtLmMjTDY3" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/win/stream.c#L67">https://github.com/libuv/libuv/blob/view-v1.28.0/src/win/stream.c#L67<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_read_start</span><span class="params">(<span class="keyword">uv_stream_t</span>* stream,</span></span></span><br><span class="line"><span class="function"><span class="params">                  uv_alloc_cb alloc_cb,</span></span></span><br><span class="line"><span class="function"><span class="params">                  uv_read_cb read_cb)</span> </span>&#123;</span><br><span class="line">  assert(stream-&gt;type == UV_TCP || stream-&gt;type == UV_NAMED_PIPE ||</span><br><span class="line">      stream-&gt;type == UV_TTY);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stream-&gt;flags &amp; UV_HANDLE_CLOSING)</span><br><span class="line">    <span class="keyword">return</span> UV_EINVAL;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(stream-&gt;flags &amp; UV_HANDLE_READABLE))</span><br><span class="line">    <span class="keyword">return</span> -ENOTCONN;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The UV_HANDLE_READING flag is irrelevant of the state of the tcp - it just</span></span><br><span class="line"><span class="comment">   * expresses the desired state of the user.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  stream-&gt;flags |= UV_HANDLE_READING;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* <span class="doctag">TODO:</span> try to do the read inline? */</span></span><br><span class="line">  <span class="comment">/* <span class="doctag">TODO:</span> keep track of tcp state. If we've gotten a EOF then we should</span></span><br><span class="line"><span class="comment">   * not start the IO watcher.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  assert(uv__stream_fd(stream) &gt;= <span class="number">0</span>);</span><br><span class="line">  assert(alloc_cb);</span><br><span class="line"></span><br><span class="line">  stream-&gt;read_cb = read_cb;</span><br><span class="line">  stream-&gt;alloc_cb = alloc_cb;</span><br><span class="line"></span><br><span class="line">  uv__io_start(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLIN);</span><br><span class="line">  uv__handle_start(stream);</span><br><span class="line">  uv__stream_osx_interrupt_select(stream);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uv_read_start 有三个参数：</p><ol><li>stream，数据源；</li><li>alloc_cb，读取数据时调用该函数分配内存空间；</li><li>read_cb，读取成功后触发异步回调。</li></ol><p>可以看到，启动过程同样没做什么特别的事情，将I/O观察者加入到队列中后，以便在事件循环的特定阶段进行处理。</p><h4 id="Stop：uv-read-stop"><a href="#Stop：uv-read-stop" class="headerlink" title="Stop：uv_read_stop"></a>Stop：<code>uv_read_stop</code></h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L3N0cmVhbS5jI0wxNTg0" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1584">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1584<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_read_stop</span><span class="params">(<span class="keyword">uv_stream_t</span>* stream)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(stream-&gt;flags &amp; UV_HANDLE_READING))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  stream-&gt;flags &amp;= ~UV_HANDLE_READING;</span><br><span class="line">  uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLIN);</span><br><span class="line">  <span class="keyword">if</span> (!uv__io_active(&amp;stream-&gt;io_watcher, POLLOUT))</span><br><span class="line">    uv__handle_stop(stream);</span><br><span class="line">  uv__stream_osx_interrupt_select(stream);</span><br><span class="line"></span><br><span class="line">  stream-&gt;read_cb = <span class="literal">NULL</span>;</span><br><span class="line">  stream-&gt;alloc_cb = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L3N0cmVhbS5jI0wxNDgz" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1483">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1483<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The buffers to be written must remain valid until the callback is called.</span></span><br><span class="line"><span class="comment"> * This is not required for the uv_buf_t array.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_write</span><span class="params">(<span class="keyword">uv_write_t</span>* req,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">uv_stream_t</span>* handle,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">const</span> <span class="keyword">uv_buf_t</span> bufs[],</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">unsigned</span> <span class="keyword">int</span> nbufs,</span></span></span><br><span class="line"><span class="function"><span class="params">             uv_write_cb cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> uv_write2(req, handle, bufs, nbufs, <span class="literal">NULL</span>, cb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L3N0cmVhbS5jI0wxMzg3" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1387">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1387<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_write2</span><span class="params">(<span class="keyword">uv_write_t</span>* req,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">uv_stream_t</span>* stream,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="keyword">uv_buf_t</span> bufs[],</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">unsigned</span> <span class="keyword">int</span> nbufs,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">uv_stream_t</span>* send_handle,</span></span></span><br><span class="line"><span class="function"><span class="params">              uv_write_cb cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> empty_queue;</span><br><span class="line"></span><br><span class="line">  assert(nbufs &gt; <span class="number">0</span>);</span><br><span class="line">  assert((stream-&gt;type == UV_TCP ||</span><br><span class="line">          stream-&gt;type == UV_NAMED_PIPE ||</span><br><span class="line">          stream-&gt;type == UV_TTY) &amp;&amp;</span><br><span class="line">         <span class="string">"uv_write (unix) does not yet support other types of streams"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (uv__stream_fd(stream) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> UV_EBADF;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(stream-&gt;flags &amp; UV_HANDLE_WRITABLE))</span><br><span class="line">    <span class="keyword">return</span> -EPIPE;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (send_handle) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stream-&gt;type != UV_NAMED_PIPE || !((<span class="keyword">uv_pipe_t</span>*)stream)-&gt;ipc)</span><br><span class="line">      <span class="keyword">return</span> UV_EINVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* XXX We abuse uv_write2() to send over UDP handles to child processes.</span></span><br><span class="line"><span class="comment">     * Don't call uv__stream_fd() on those handles, it's a macro that on OS X</span></span><br><span class="line"><span class="comment">     * evaluates to a function that operates on a uv_stream_t with a couple of</span></span><br><span class="line"><span class="comment">     * OS X specific fields. On other Unices it does (handle)-&gt;io_watcher.fd,</span></span><br><span class="line"><span class="comment">     * which works but only by accident.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (uv__handle_fd((<span class="keyword">uv_handle_t</span>*) send_handle) &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> UV_EBADF;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__CYGWIN__) || defined(__MSYS__)</span></span><br><span class="line">    <span class="comment">/* Cygwin recvmsg always sets msg_controllen to zero, so we cannot send it.</span></span><br><span class="line"><span class="comment">       See https://github.com/mirror/newlib-cygwin/blob/86fc4bf0/winsup/cygwin/fhandler_socket.cc#L1736-L1743 */</span></span><br><span class="line">    <span class="keyword">return</span> UV_ENOSYS;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* It's legal for write_queue_size &gt; 0 even when the write_queue is empty;</span></span><br><span class="line"><span class="comment">   * it means there are error-state requests in the write_completed_queue that</span></span><br><span class="line"><span class="comment">   * will touch up write_queue_size later, see also uv__write_req_finish().</span></span><br><span class="line"><span class="comment">   * We could check that write_queue is empty instead but that implies making</span></span><br><span class="line"><span class="comment">   * a write() syscall when we know that the handle is in error mode.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  empty_queue = (stream-&gt;write_queue_size == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize the req */</span></span><br><span class="line">  uv__req_init(stream-&gt;loop, req, UV_WRITE);</span><br><span class="line">  req-&gt;cb = cb;</span><br><span class="line">  req-&gt;handle = stream;</span><br><span class="line">  req-&gt;error = <span class="number">0</span>;</span><br><span class="line">  req-&gt;send_handle = send_handle;</span><br><span class="line">  QUEUE_INIT(&amp;req-&gt;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">  req-&gt;bufs = req-&gt;bufsml;</span><br><span class="line">  <span class="keyword">if</span> (nbufs &gt; ARRAY_SIZE(req-&gt;bufsml))</span><br><span class="line">    req-&gt;bufs = uv__malloc(nbufs * <span class="keyword">sizeof</span>(bufs[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req-&gt;bufs == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> UV_ENOMEM;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memcpy</span>(req-&gt;bufs, bufs, nbufs * <span class="keyword">sizeof</span>(bufs[<span class="number">0</span>]));</span><br><span class="line">  req-&gt;nbufs = nbufs;</span><br><span class="line">  req-&gt;write_index = <span class="number">0</span>;</span><br><span class="line">  stream-&gt;write_queue_size += uv__count_bufs(bufs, nbufs);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Append the request to write_queue. */</span></span><br><span class="line">  QUEUE_INSERT_TAIL(&amp;stream-&gt;write_queue, &amp;req-&gt;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If the queue was empty when this function began, we should attempt to</span></span><br><span class="line"><span class="comment">   * do the write immediately. Otherwise start the write_watcher and wait</span></span><br><span class="line"><span class="comment">   * for the fd to become writable.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (stream-&gt;connect_req) &#123;</span><br><span class="line">    <span class="comment">/* Still connecting, do nothing. */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (empty_queue) &#123;</span><br><span class="line">    uv__write(stream);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * blocking streams should never have anything in the queue.</span></span><br><span class="line"><span class="comment">     * if this assert fires then somehow the blocking stream isn't being</span></span><br><span class="line"><span class="comment">     * sufficiently flushed in uv__write.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    assert(!(stream-&gt;flags &amp; UV_HANDLE_BLOCKING_WRITES));</span><br><span class="line">    uv__io_start(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);</span><br><span class="line">    uv__stream_osx_interrupt_select(stream);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L3N0cmVhbS5jI0wxNTAx" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1501">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/stream.c#L1501<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_try_write</span><span class="params">(<span class="keyword">uv_stream_t</span>* stream,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="keyword">uv_buf_t</span> bufs[],</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">unsigned</span> <span class="keyword">int</span> nbufs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> has_pollout;</span><br><span class="line">  <span class="keyword">size_t</span> written;</span><br><span class="line">  <span class="keyword">size_t</span> req_size;</span><br><span class="line">  <span class="keyword">uv_write_t</span> req;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Connecting or already writing some data */</span></span><br><span class="line">  <span class="keyword">if</span> (stream-&gt;connect_req != <span class="literal">NULL</span> || stream-&gt;write_queue_size != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> UV_EAGAIN;</span><br><span class="line"></span><br><span class="line">  has_pollout = uv__io_active(&amp;stream-&gt;io_watcher, POLLOUT);</span><br><span class="line"></span><br><span class="line">  r = uv_write(&amp;req, stream, bufs, nbufs, uv_try_write_cb);</span><br><span class="line">  <span class="keyword">if</span> (r != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Remove not written bytes from write queue size */</span></span><br><span class="line">  written = uv__count_bufs(bufs, nbufs);</span><br><span class="line">  <span class="keyword">if</span> (req.bufs != <span class="literal">NULL</span>)</span><br><span class="line">    req_size = uv__write_req_size(&amp;req);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    req_size = <span class="number">0</span>;</span><br><span class="line">  written -= req_size;</span><br><span class="line">  stream-&gt;write_queue_size -= req_size;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Unqueue request, regardless of immediateness */</span></span><br><span class="line">  QUEUE_REMOVE(&amp;req.<span class="built_in">queue</span>);</span><br><span class="line">  uv__req_unregister(stream-&gt;loop, &amp;req);</span><br><span class="line">  <span class="keyword">if</span> (req.bufs != req.bufsml)</span><br><span class="line">    uv__free(req.bufs);</span><br><span class="line">  req.bufs = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Do not poll for writable, if we wasn't before calling this */</span></span><br><span class="line">  <span class="keyword">if</span> (!has_pollout) &#123;</span><br><span class="line">    uv__io_stop(stream-&gt;loop, &amp;stream-&gt;io_watcher, POLLOUT);</span><br><span class="line">    uv__stream_osx_interrupt_select(stream);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (written == <span class="number">0</span> &amp;&amp; req_size != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> UV_EAGAIN;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> written;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di82LWxpYnV2LXN0cmVhbS5tZA==" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/6-libuv-stream.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di82LWxpYnV2LXN0cmVhbS5tZA==" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/6-libuv-stream.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（五）IO观察者（io_watcher）</title>
      <link href="/posts/node.js/libuv/5-libuv-io-watcher/"/>
      <url>/posts/node.js/libuv/5-libuv-io-watcher/</url>
      
        <content type="html"><![CDATA[<p>在 libuv 内部，对所有IO操作进行了统一的抽象，在底层的操作系统IO操作基础上，结合事件循环机制，实现了IO观察者，对应结构体 <code>uv__io_s</code>。其他 <code>handle</code> 通过内嵌I/O观察者的方式获得IO的监测能力，例如有 <code>uv_stream_t</code>、<code>uv_udp_t</code>、<code>uv_poll_t</code> 及 <code>uv_stream_t</code> 的派生类型 <code>uv_tcp_t</code>、<code>uv_pipe_t</code>、<code>uv_tty_t</code>。<code>uv_stream_t</code> 是一个抽象基类，一般不直接使用。内嵌IO观察者的 <code>handle</code> 本身就是IO观察者，和面向对象语言中常提到的 <code>has-a</code> 是一样的，所以，可以说 <code>uv_stream_t</code> 是一个I/O观察者，它的派生类也是I/O观察者。这类似于多重继承，即继承 <code>uv_handle_t</code>，又继承了 <code>uv__io_t</code>，所以即是 <code>handle</code>，又是 <code>I/O观察者</code>。</p><p>应用程序 通过创建并初始化 <code>handle</code> 或 <code>request</code> 的方式创建并初始化并注册I/O观察者，注册后被插入到 <code>loop-watchers</code> 队列中，并在 <code>Start</code> 后将I/O观察者标记为准备状态，在事件循环启动后对 <code>loop-watchers</code> 队列中所有I/O观察者关注的文件描述符进行轮询（linux下使用<code>epoll</code>）并在I/O事件触发时调用对应的回调函数。</p><p>libuv 的 <code>15</code> 个 <code>handle</code> 类型中，属于I/O观察者就有 <code>7</code> 个，还有几个类型的 <code>handle</code> 虽然不直接内嵌I/O观察者，但内部实现依然依赖I/O观察者。实际上，只有 <code>uv_timer_t</code>、<code>uv_prepare_t</code>、<code>uv_check_t</code>、<code>uv_idle_t</code> 这 <code>4</code> 个 <code>handle</code> 与I/O观察者无直接关系。足以见I/O观察者在 libuv 中的重要性，理解I/O观察者对于理解 libuv 甚至是 node.js 都是十分重要的。</p><p>下面开始讲其实现细节。</p><h2 id="uv-io-s"><a href="#uv-io-s" class="headerlink" title="uv__io_s"></a><code>uv__io_s</code></h2><p><code>uv__io_s</code> 结构体 即为 I/O观察者 的抽象数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv__io_s</span> <span class="title">uv__io_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uv__io_s</span> &#123;</span></span><br><span class="line">  uv__io_cb cb;</span><br><span class="line">  <span class="keyword">void</span>* pending_queue[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">void</span>* watcher_queue[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> pevents; <span class="comment">/* Pending event mask i.e. mask at next tick. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> events;  <span class="comment">/* Current event mask. */</span></span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  UV_IO_PRIVATE_PLATFORM_FIELDS</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要字段用途介绍：</p><ul><li><code>fd</code>：感兴趣的 文件描述符；</li><li><code>cb</code>：当文件描述符 <code>fd</code> 上有I/O事件发生时，调用该函数进行处理，注意，该函数的类型 <code>uv__io_cb</code> 是内部类型，并不对外暴露，所以 <code>cb</code> 自然也是内部提供的。libuv针对不同类型的IO观察者实现了多个不同的 <code>cb</code> 函数；</li><li><code>watcher_queue</code>：作为队列节点，插入到 <code>loop-&gt;watcher_queue</code> 队列中，所有的I/O观察者都会被插入到这个队列中；</li><li><code>pending_queue</code>：作为队列节点，插入到 <code>loop-&gt;pending_queue</code> 队列中，所有被挂起的I/O观察者都会被插入到这个队列中；</li><li><code>pevents</code>：下次事件循环使用的事件掩码；</li><li><code>events</code>：当前正在使用的事件掩码。<code>events |= pevents</code>。</li></ul><p>在 <code>uv_stream_t</code>（包括 <code>uv_tcp_t</code>、<code>uv_pipe_t</code>、<code>uv_tty_t</code>）、<code>uv_udp_t</code>、<code>uv_poll_t</code> 类型结构体内部都内嵌了 <code>uv__io_t</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uv__io_t</span> io_watcher;</span><br></pre></td></tr></table></figure><p>另外，在 <code>uv_loop_s</code> 中，同样也内嵌了多个 <code>uv__io_t</code> 关联字段：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9pbmNsdWRlL3V2L3VuaXguaCNMMjE4" title="https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L218">https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L218<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">uv__io_t</span>** watchers;                                                        \</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> nwatchers;                                                     \</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds;                                                          \</span><br><span class="line">  <span class="keyword">uv__io_t</span> async_io_watcher;                                                  \</span><br><span class="line">  <span class="keyword">uv__io_t</span> signal_io_watcher;                                                 \</span><br><span class="line">  UV_PLATFORM_LOOP_FIELDS                                                     \</span><br></pre></td></tr></table></figure><p>linux 下的 <code>UV_PLATFORM_LOOP_FIELDS</code> 定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_PLATFORM_LOOP_FIELDS                                               \</span></span><br><span class="line">  <span class="keyword">uv__io_t</span> inotify_read_watcher;                                              \</span><br><span class="line">  <span class="keyword">void</span>* inotify_watchers;                                                     \</span><br><span class="line">  <span class="keyword">int</span> inotify_fd;                                                             \</span><br></pre></td></tr></table></figure><p>主要字段用途介绍：</p><ul><li><code>watchers</code>：咋看是一个二级指针，实际上是当做数组来使用的，数组的每一项存储了 <code>uv__io_t*</code> 类型的指针，使用示例：<code>w = loop-&gt;watchers[i];</code>，所有的I/O观察者都有以文件描述符 <code>fd</code> 作为数组下标保存在这个数组中，可以通过 <code>fd</code> 快速找到对应的I/O观察者。请仔细理解C语言数组和指针的关系，这里不能当做二级指针理解；<br>注意：<ul><li>该指针指向的内存空间是动态分配的，以适应I/O观察者的变化，动态分配算法见函数 <code>maybe_resize</code>；</li><li>注意：实际分别长度为 <code>nwatchers + 2</code>；</li></ul></li><li><code>nwatchers</code>：记录了能容纳的IO观察者的数量，<code>len(watchers) == nwatchers + 2</code>；</li><li><code>nfds</code>：记录了 <code>watchers</code> 中文件描述符的数量，也是实际使用量；</li><li><code>async_io_watcher</code>：<code>loop</code> 内嵌的I/O观察者，这个I/O观察者用于其他异步任务（运行在其他线程中）通过IO与主事件循环进行通讯；</li><li><code>signal_io_watcher</code>：<code>loop</code> 内嵌的I/O观察者，这个I/O观察者用于接收信号IO事件的。在 libuv 中，信号也被异步化到事件循环中去处理了；</li><li><code>inotify_read_watcher</code>：<code>UV_PLATFORM_LOOP_FIELDS</code> 宏在 linux 平台下展开之后会有一个 <code>inotify_read_watcher</code>，这个是用来在 linux 下支持 <code>uv_fs_event_t</code>的，在其他 <code>uni*</code> 平台上，有对应的 <code>event_watcher</code>。</li></ul><p>除以上介绍的 <code>handle</code> 外，<code>uv_fs_poll_t</code> 实际通过 <code>uv_async_t</code> 来支持其文件状态轮询的。</p><p>至此，我们已经把所有和I/O观察者相关的 <code>handle</code> 都提及到了，可以发现，libuv 中绝大多数 <code>handle</code> 都是I/O相关的，少部分 <code>handle</code> 简介通过I/O观察者实现功能。所以，libuv 可以说是专门为I/O而设计的，正如文档中所诉，它就是专注于异步I/O的程序库。下面，我们将介绍I/O观察者的工作原理，理解了I/O观察者就可以很容易的弄懂大部分相关的 <code>handle</code> 的工作原理。</p><p>因为 <code>uv__io_t</code> 是内部结构，并不对外暴露，所以我们以 <code>uv_poll_t</code> 作为入口，探索其内部的 <code>uv__io_t</code> 工作原理。</p><p><code>uv_poll_t</code> 用于监控文件描述符的 <code>可读/可写</code> 状态，和 <code>poll</code> 系统调用的用途类型，不过 <code>uv_poll_t</code> 是异步非阻塞，而操作系统的原生 <code>poll</code> 函数是同步阻塞的。</p><p><code>uv_poll_t</code> 是I/O观察者的简单封装后的应用程序接口，它只关心状态变化并调用用户层代码，I/O事件之后将由外部库处理。相比之下，<code>uv_stream_t</code> 则复杂的多，<code>uv_stream_t</code> 更进一步封装了数据读写操作等方面的能力，并将数据派发给不同类型的派生 <code>handle</code> 处理。</p><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><h3 id="uv-poll-init"><a href="#uv-poll-init" class="headerlink" title="uv_poll_init"></a>uv_poll_init</h3><p>使用文件描述符初始化 <code>poll</code>。</p><p>以下是 <code>uv_poll_init</code> 的具体实现：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9wb2xsLmMjTDY3" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/poll.c#L67">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/poll.c#L67<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_poll_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv_poll_t</span>* handle, <span class="keyword">int</span> fd)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (uv__fd_exists(loop, fd))</span><br><span class="line">    <span class="keyword">return</span> UV_EEXIST;</span><br><span class="line"></span><br><span class="line">  err = uv__io_check_fd(loop, fd);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* If ioctl(FIONBIO) reports ENOTTY, try fcntl(F_GETFL) + fcntl(F_SETFL).</span></span><br><span class="line"><span class="comment">   * Workaround for e.g. kqueue fds not supporting ioctls.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  err = uv__nonblock(fd, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (err == UV_ENOTTY)</span><br><span class="line">    <span class="keyword">if</span> (uv__nonblock == uv__nonblock_ioctl)</span><br><span class="line">      err = uv__nonblock_fcntl(fd, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">  uv__handle_init(loop, (<span class="keyword">uv_handle_t</span>*) handle, UV_POLL);</span><br><span class="line">  uv__io_init(&amp;handle-&gt;io_watcher, uv__poll_io, fd);</span><br><span class="line">  handle-&gt;poll_cb = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代代码先是检查了文件描述符是否存在、文件描述符是否已经纳入监控等，然后调用 <code>uv__handle_init</code> 和 <code>uv__io_init</code> 进行基类初始化，<code>uv__io_init</code> 是I/O观察者的初始化函数。</p><h3 id="uv-io-init"><a href="#uv-io-init" class="headerlink" title="uv__io_init"></a><code>uv__io_init</code></h3><p>直接上源码：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDgwNQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L805">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L805<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_init</span><span class="params">(<span class="keyword">uv__io_t</span>* w, uv__io_cb cb, <span class="keyword">int</span> fd)</span> </span>&#123;</span><br><span class="line">  assert(cb != <span class="literal">NULL</span>);</span><br><span class="line">  assert(fd &gt;= <span class="number">-1</span>);</span><br><span class="line">  QUEUE_INIT(&amp;w-&gt;pending_queue);</span><br><span class="line">  QUEUE_INIT(&amp;w-&gt;watcher_queue);</span><br><span class="line">  w-&gt;cb = cb;</span><br><span class="line">  w-&gt;fd = fd;</span><br><span class="line">  w-&gt;events = <span class="number">0</span>;</span><br><span class="line">  w-&gt;pevents = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(UV_HAVE_KQUEUE)</span></span><br><span class="line">  w-&gt;rcount = <span class="number">0</span>;</span><br><span class="line">  w-&gt;wcount = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* defined(UV_HAVE_KQUEUE) */</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__io_init</code> 初始化了两个队列，绑定了回调函数和文件描述符，基本工作就做完了。</p><p>调用 <code>uv__io_init</code> 时传递的 <code>uv__poll_io</code> 是 libuv 内部实现的，用于在I/O事件到来时调用。</p><h3 id="uv-poll-io"><a href="#uv-poll-io" class="headerlink" title="uv__poll_io"></a><code>uv__poll_io</code></h3><p>如果有I/O事件产生，<code>uv__poll_io</code> 会被 libuv 调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__poll_io</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv__io_t</span>* w, <span class="keyword">unsigned</span> <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_poll_t</span>* handle;</span><br><span class="line">  <span class="keyword">int</span> pevents;</span><br><span class="line"></span><br><span class="line">  handle = container_of(w, <span class="keyword">uv_poll_t</span>, io_watcher);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * As documented in the kernel source fs/kernfs/file.c #780</span></span><br><span class="line"><span class="comment">   * poll will return POLLERR|POLLPRI in case of sysfs</span></span><br><span class="line"><span class="comment">   * polling. This does not happen in case of out-of-band</span></span><br><span class="line"><span class="comment">   * TCP messages.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The above is the case on (at least) FreeBSD and Linux.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * So to properly determine a POLLPRI or a POLLERR we need</span></span><br><span class="line"><span class="comment">   * to check for both.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> ((events &amp; POLLERR) &amp;&amp; !(events &amp; UV__POLLPRI)) &#123;</span><br><span class="line">    uv__io_stop(loop, w, POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI);</span><br><span class="line">    uv__handle_stop(handle);</span><br><span class="line">    handle-&gt;poll_cb(handle, UV_EBADF, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pevents = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (events &amp; POLLIN)</span><br><span class="line">    pevents |= UV_READABLE;</span><br><span class="line">  <span class="keyword">if</span> (events &amp; UV__POLLPRI)</span><br><span class="line">    pevents |= UV_PRIORITIZED;</span><br><span class="line">  <span class="keyword">if</span> (events &amp; POLLOUT)</span><br><span class="line">    pevents |= UV_WRITABLE;</span><br><span class="line">  <span class="keyword">if</span> (events &amp; UV__POLLRDHUP)</span><br><span class="line">    pevents |= UV_DISCONNECT;</span><br><span class="line"></span><br><span class="line">  handle-&gt;poll_cb(handle, <span class="number">0</span>, pevents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__poll_io</code> I/O事件的时候会被调用，工作逻辑如下：</p><ol><li>首先通过 <code>container_of</code> 获取 <code>handle</code>；</li><li>如果是一些异常的I/O事件，则会进入 <code>Stop</code> 流程并调用 <code>handle-&gt;poll_cb</code>；</li><li>将事件记录到 <code>pevents</code>；</li><li>调用 <code>handle-&gt;poll_cb</code>。</li></ol><p><code>handle-&gt;poll_cb</code> 是在 <code>Start</code> 阶段设置的，所以 <code>uv__poll_io</code> 一定是在 <code>uv_poll_start</code> 调用后才能调用的，因为I/O事件在 <code>uv_poll_start</code> 后的下一次事件循环才能被处理。</p><p><code>uv__poll_io</code> 比较简单，可以说就是直接调用用户层提供的回调函数，正如 <code>uv_poll_t</code> 的用途一样，负责监控文件描述符状态变化，但是不负责处理。</p><p>除了 <code>uv__poll_io</code> 外，还有多个同样功能的 <code>uv__io_cb</code> 类型的函数存在，他们用于不同的功能，通过全局搜索 <code>uv__io_init</code> 函数即可找到 <code>uv__io_init</code> 调用传递的不同 <code>uv__io_cb</code> 函数，如下：</p><ul><li><code>uv__signal_event</code>，用于处理 <code>loop-&gt;signal_io_watcher</code> 上的I/O事件；</li><li><code>uv__async_io</code>，用于处理 <code>loop-&gt;async_io_watcher</code> 上的I/O事件；</li><li><code>uv__stream_io</code>，用于处理 <code>stream_handle-&gt;io_watcher</code> 上的I/O事件；</li><li><code>uv__udp_io</code>，用于处理 <code>udp_handle-&gt;io_watcher</code> 上的I/O事件。</li></ul><p>以上这些 <code>uv__io_cb</code> 函数就没有 <code>uv__poll_io</code> 的实现简单了，它们都有更复杂的处理逻辑，如在 <code>uv__stream_io</code> 中，开始对文件描述符进行数据读写。</p><p>除了以上几个外，还有 <code>uv_fs_event_t</code> 相关I/O观察者的 <code>uv__poll_io</code>，因各平台实现不同，<code>uv__poll_io</code> 也有不同版本，就不列举了。</p><p>这些 <code>handle</code>，在 Init、Start、Stop、Close 等阶段多有都有不同，但是最大的不同还是在于I/O事件的处理函数 <code>uv__io_cb</code> 的实现不同，也就是以上列出的函数不同。</p><p>接下来，进入 <code>Start</code> 阶段。</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><h3 id="uv-poll-start"><a href="#uv-poll-start" class="headerlink" title="uv_poll_start"></a>uv_poll_start</h3><p>开始对文件描述符进行事件轮询</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_poll_start</span><span class="params">(<span class="keyword">uv_poll_t</span>* handle, <span class="keyword">int</span> pevents, uv_poll_cb poll_cb)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> events;</span><br><span class="line"></span><br><span class="line">  assert((pevents &amp; ~(UV_READABLE | UV_WRITABLE | UV_DISCONNECT |</span><br><span class="line">                      UV_PRIORITIZED)) == <span class="number">0</span>);</span><br><span class="line">  assert(!uv__is_closing(handle));</span><br><span class="line"></span><br><span class="line">  uv__poll_stop(handle);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pevents == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  events = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (pevents &amp; UV_READABLE)</span><br><span class="line">    events |= POLLIN;</span><br><span class="line">  <span class="keyword">if</span> (pevents &amp; UV_PRIORITIZED)</span><br><span class="line">    events |= UV__POLLPRI;</span><br><span class="line">  <span class="keyword">if</span> (pevents &amp; UV_WRITABLE)</span><br><span class="line">    events |= POLLOUT;</span><br><span class="line">  <span class="keyword">if</span> (pevents &amp; UV_DISCONNECT)</span><br><span class="line">    events |= UV__POLLRDHUP;</span><br><span class="line"></span><br><span class="line">  uv__io_start(handle-&gt;loop, &amp;handle-&gt;io_watcher, events);</span><br><span class="line">  uv__handle_start(handle);</span><br><span class="line">  handle-&gt;poll_cb = poll_cb;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他部分不用太多解释了，直接看关键步骤：<code>uv__io_start</code></p><h3 id="uv-io-start"><a href="#uv-io-start" class="headerlink" title="uv__io_start"></a>uv__io_start</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_start</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv__io_t</span>* w, <span class="keyword">unsigned</span> <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">  assert(<span class="number">0</span> == (events &amp; ~(POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI)));</span><br><span class="line">  assert(<span class="number">0</span> != events);</span><br><span class="line">  assert(w-&gt;fd &gt;= <span class="number">0</span>);</span><br><span class="line">  assert(w-&gt;fd &lt; INT_MAX);</span><br><span class="line"></span><br><span class="line">  w-&gt;pevents |= events;</span><br><span class="line">  maybe_resize(loop, w-&gt;fd + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__sun)</span></span><br><span class="line">  <span class="comment">/* The event ports backend needs to rearm all file descriptors on each and</span></span><br><span class="line"><span class="comment">   * every tick of the event loop but the other backends allow us to</span></span><br><span class="line"><span class="comment">   * short-circuit here if the event mask is unchanged.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (w-&gt;events == w-&gt;pevents)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (QUEUE_EMPTY(&amp;w-&gt;watcher_queue))</span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;loop-&gt;watcher_queue, &amp;w-&gt;watcher_queue);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;watchers[w-&gt;fd] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    loop-&gt;watchers[w-&gt;fd] = w;</span><br><span class="line">    loop-&gt;nfds++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键步骤如下：</p><ol><li>将参数 <code>events</code> 或到 <code>w-&gt;pevents</code>，因为 <code>uv__io_start</code> 可以反复多次调用，相当于更新；</li><li>按需扩容，判断当前的 <code>loop-&gt;watchers</code> 没有更多空间容纳 <code>fd</code> 及关联的I/O观察者，如果没有，指数级扩容，并拷贝内容到新的内存空间；</li><li>将 <code>w-&gt;watcher_queue</code> 连接到 <code>loop-&gt;watcher_queue</code> 队列尾部，所有I/O观察者都被关联了起来。这里有个判断，为了防止重复操作。</li><li>以 <code>w-&gt;fd</code> 为下标，将 <code>w</code> 保持到 <code>loop-&gt;watchers</code>，并更新引用计数 <code>loop-&gt;nfds</code>。</li></ol><p>至此，完成了I/O观察者的准备工作，供事件循环处理。</p><h2 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_poll_stop</span><span class="params">(<span class="keyword">uv_poll_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  assert(!uv__is_closing(handle));</span><br><span class="line">  uv__poll_stop(handle);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__poll_stop</span><span class="params">(<span class="keyword">uv_poll_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  uv__io_stop(handle-&gt;loop,</span><br><span class="line">              &amp;handle-&gt;io_watcher,</span><br><span class="line">              POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI);</span><br><span class="line">  uv__handle_stop(handle);</span><br><span class="line">  uv__platform_invalidate_fd(handle-&gt;loop, handle-&gt;io_watcher.fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_stop</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv__io_t</span>* w, <span class="keyword">unsigned</span> <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">  assert(<span class="number">0</span> == (events &amp; ~(POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI)));</span><br><span class="line">  assert(<span class="number">0</span> != events);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (w-&gt;fd == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  assert(w-&gt;fd &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Happens when uv__io_stop() is called on a handle that was never started. */</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">unsigned</span>) w-&gt;fd &gt;= loop-&gt;nwatchers)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  w-&gt;pevents &amp;= ~events;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (w-&gt;pevents == <span class="number">0</span>) &#123;</span><br><span class="line">    QUEUE_REMOVE(&amp;w-&gt;watcher_queue);</span><br><span class="line">    QUEUE_INIT(&amp;w-&gt;watcher_queue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loop-&gt;watchers[w-&gt;fd] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      assert(loop-&gt;watchers[w-&gt;fd] == w);</span><br><span class="line">      assert(loop-&gt;nfds &gt; <span class="number">0</span>);</span><br><span class="line">      loop-&gt;watchers[w-&gt;fd] = <span class="literal">NULL</span>;</span><br><span class="line">      loop-&gt;nfds--;</span><br><span class="line">      w-&gt;events = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (QUEUE_EMPTY(&amp;w-&gt;watcher_queue))</span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;loop-&gt;watcher_queue, &amp;w-&gt;watcher_queue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__io_stop</code> 实际上就是将I/O观察者从 <code>loop</code> 上移除，避免事件循环继续处理这个I/O观察者。</p><h2 id="Close"><a href="#Close" class="headerlink" title="Close"></a>Close</h2><p><code>uv_poll_t</code> 并无 <code>close</code> 方法，但是存在 <code>uv__io_close</code> 方法，实现如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDg4Mg==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L882">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L882<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_close</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv__io_t</span>* w)</span> </span>&#123;</span><br><span class="line">  uv__io_stop(loop, w, POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI);</span><br><span class="line">  QUEUE_REMOVE(&amp;w-&gt;pending_queue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Remove stale events for this file descriptor */</span></span><br><span class="line">  <span class="keyword">if</span> (w-&gt;fd != <span class="number">-1</span>)</span><br><span class="line">    uv__platform_invalidate_fd(loop, w-&gt;fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了 <code>uv__io_stop</code> 完成 <code>Close</code>。</p><h2 id="Run：Poll-for-I-O"><a href="#Run：Poll-for-I-O" class="headerlink" title="Run：Poll for I/O"></a>Run：<code>Poll for I/O</code></h2><p>I/O观察者在事件循环启动后才会被真正的处理，主要是在 <code>uv__io_poll</code> 和 <code>uv__run_pending</code> 两个函数中处理的。</p><p>以下为 <code>uv__io_poll</code> 实现代码（含注释），这部分代码可以说是 libuv 中最核心的代码，因为这部分实现了 libuv 最核心功能异步IO的支持，实现了IO事件的轮询与事件的派发。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9saW51eC1jb3JlLmMjTDE5MA==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/linux-core.c#L190">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/linux-core.c#L190<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_poll</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* A bug in kernels &lt; 2.6.37 makes timeouts larger than ~30 minutes</span></span><br><span class="line"><span class="comment">   * effectively infinite on 32 bits architectures.  To avoid blocking</span></span><br><span class="line"><span class="comment">   * indefinitely, we cap the timeout and poll again if necessary.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Note that "30 minutes" is a simplification because it depends on</span></span><br><span class="line"><span class="comment">   * the value of CONFIG_HZ.  The magic constant assumes CONFIG_HZ=1200,</span></span><br><span class="line"><span class="comment">   * that being the largest value I have seen in the wild (and only once.)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> max_safe_timeout = <span class="number">1789569</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[1024];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>* <span class="title">pe</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">e</span>;</span></span><br><span class="line">  <span class="keyword">int</span> real_timeout;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  <span class="keyword">uv__io_t</span>* w;</span><br><span class="line">  <span class="keyword">sigset_t</span> sigset;</span><br><span class="line">  <span class="keyword">sigset_t</span>* psigset;</span><br><span class="line">  <span class="keyword">uint64_t</span> base;</span><br><span class="line">  <span class="keyword">int</span> have_signals;</span><br><span class="line">  <span class="keyword">int</span> nevents;</span><br><span class="line">  <span class="keyword">int</span> count;</span><br><span class="line">  <span class="keyword">int</span> nfds;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">int</span> op;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有任何观察者，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;nfds == <span class="number">0</span>) &#123;</span><br><span class="line">    assert(QUEUE_EMPTY(&amp;loop-&gt;watcher_queue));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;e, <span class="number">0</span>, <span class="keyword">sizeof</span>(e));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向 `epoll` 系统注册所有 I/O观察者</span></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;loop-&gt;watcher_queue)) &#123;</span><br><span class="line">    <span class="comment">// 获取队列头部，并将队列从 `loop-&gt;watcher_queue` 摘除</span></span><br><span class="line">    q = QUEUE_HEAD(&amp;loop-&gt;watcher_queue);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 I/O观察者 结构</span></span><br><span class="line">    w = QUEUE_DATA(q, <span class="keyword">uv__io_t</span>, watcher_queue);</span><br><span class="line">    assert(w-&gt;pevents != <span class="number">0</span>);</span><br><span class="line">    assert(w-&gt;fd &gt;= <span class="number">0</span>);</span><br><span class="line">    assert(w-&gt;fd &lt; (<span class="keyword">int</span>) loop-&gt;nwatchers);</span><br><span class="line"></span><br><span class="line">    e.events = w-&gt;pevents;</span><br><span class="line">    e.data.fd = w-&gt;fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (w-&gt;events == <span class="number">0</span>)</span><br><span class="line">      op = EPOLL_CTL_ADD;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      op = EPOLL_CTL_MOD;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向 epoll 注册文件描述符及需要监控的IO事件</span></span><br><span class="line">    <span class="comment">/* XXX Future optimization: do EPOLL_CTL_MOD lazily if we stop watching</span></span><br><span class="line"><span class="comment">     * events, skip the syscall and squelch the events after epoll_wait().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(loop-&gt;backend_fd, op, w-&gt;fd, &amp;e)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno != EEXIST)</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">      assert(op == EPOLL_CTL_ADD);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// loop-&gt;backend_fd 在事件循环初始化时也就是在 `uv_loop_init` 中 通过 `epoll_create` 创建</span></span><br><span class="line">      <span class="comment">/* We've reactivated a file descriptor that's been watched before. */</span></span><br><span class="line">      <span class="keyword">if</span> (epoll_ctl(loop-&gt;backend_fd, EPOLL_CTL_MOD, w-&gt;fd, &amp;e))</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂起的 `pevents` 设置为 `events` 将在下次事件循环中生效</span></span><br><span class="line">    w-&gt;events = w-&gt;pevents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果配置了 `UV_LOOP_BLOCK_SIGPROF`，则需要阻塞该信号</span></span><br><span class="line">  psigset = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;flags &amp; UV_LOOP_BLOCK_SIGPROF) &#123;</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line">    sigaddset(&amp;sigset, SIGPROF);</span><br><span class="line">    psigset = &amp;sigset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assert(timeout &gt;= <span class="number">-1</span>);</span><br><span class="line">  base = loop-&gt;time;</span><br><span class="line">  <span class="comment">// `count` 减少到 `0` 下面的循环跳出</span></span><br><span class="line">  count = <span class="number">48</span>; <span class="comment">/* Benchmarks suggest this gives the best throughput. */</span></span><br><span class="line">  real_timeout = timeout;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始进入 `epoll_pwait` 轮询IO事件</span></span><br><span class="line">  <span class="comment">// 通常情况下，在 `timeout` 大于 `0` 的情况下，循环不断迭代到 `timeout` 减小到 `0` 时，循环跳出</span></span><br><span class="line">  <span class="comment">// 在没有设置定时器的情况下，如果不出现错误，循环将一直不会跳出</span></span><br><span class="line">  <span class="comment">// 以下循环主要由 `timeout` 和 `count` 控制是否跳出，符合整个事件循环</span></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">/* See the comment for max_safe_timeout for an explanation of why</span></span><br><span class="line"><span class="comment">     * this is necessary.  Executive summary: kernel bug workaround.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>) == <span class="keyword">sizeof</span>(<span class="keyword">long</span>) &amp;&amp; timeout &gt;= max_safe_timeout)</span><br><span class="line">      timeout = max_safe_timeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `epoll_pwait` 在 timeout 为 `0` 时立刻返回，为 `-1` 时会一直阻塞直到有事件发生，为 `正整数` 时则会最长阻塞 `timeout` 毫秒或有事件后返回。</span></span><br><span class="line">    <span class="comment">// `nfds` 表示产生IO事件的文件描述符的数量，为 `0` 则为没有事件发生，可能因为超时时间到了，或者 `timeout=0`</span></span><br><span class="line">    <span class="comment">// `events` 保存了从内核得到的事件集合，`nfds` 实际上相当于数组内有效数据的长度。</span></span><br><span class="line">    nfds = epoll_pwait(loop-&gt;backend_fd,</span><br><span class="line">                       events,</span><br><span class="line">                       ARRAY_SIZE(events),</span><br><span class="line">                       timeout,</span><br><span class="line">                       psigset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update loop-&gt;time unconditionally. It's tempting to skip the update when</span></span><br><span class="line"><span class="comment">     * timeout == 0 (i.e. non-blocking poll) but there is no guarantee that the</span></span><br><span class="line"><span class="comment">     * operating system didn't reschedule our process while in the syscall.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SAVE_ERRNO(uv__update_time(loop));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有事件发生</span></span><br><span class="line">    <span class="keyword">if</span> (nfds == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// `timeout` 一定不为 `-1`</span></span><br><span class="line">      assert(timeout != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果`timeout`为`0`函数直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (timeout == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We may have been inside the system call for longer than |timeout|</span></span><br><span class="line"><span class="comment">       * milliseconds so we need to update the timestamp to avoid drift.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">// 减少下次 `epoll_pwait` 的 `timeout` 时间</span></span><br><span class="line">      <span class="keyword">goto</span> update_timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `epoll_wait` 返回错误</span></span><br><span class="line">    <span class="keyword">if</span> (nfds == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno != EINTR)</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果`timeout`为`-1`则继续循环</span></span><br><span class="line">      <span class="keyword">if</span> (timeout == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果`timeout`为`0`函数直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (timeout == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Interrupted by a signal. Update timeout and poll again. */</span></span><br><span class="line">      <span class="comment">// 减少下次 `epoll_pwait` 的 `timeout` 时间</span></span><br><span class="line">      <span class="keyword">goto</span> update_timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    have_signals = <span class="number">0</span>;</span><br><span class="line">    nevents = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    assert(loop-&gt;watchers != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// `loop-&gt;watchers` 的实际长度 为 `loop-&gt;nwatchers + 2`，观察者只使用 `loop-&gt;watchers` 的 `0` ~ `loop-&gt;nwatchers - 1` 项</span></span><br><span class="line">    <span class="comment">// `loop-&gt;nwatchers` ~ `loop-&gt;nwatchers + 1` 被用来存储 `events` 和 `nfds`，`uv__platform_invalidate_fd` 中会使用</span></span><br><span class="line">    <span class="comment">// 后面以下两项又被赋值为`NULL`，`for`循环部分又没有代码能够使函数返回，所以看似以下两行并无实际作用</span></span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = (<span class="keyword">void</span>*) events;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="number">1</span>] = (<span class="keyword">void</span>*) (<span class="keyword">uintptr_t</span>) nfds;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理IO事件：获取IO观察者，调用关联的回调函数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nfds; i++) &#123;</span><br><span class="line">      pe = events + i;</span><br><span class="line">      fd = pe-&gt;data.fd;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Skip invalidated events, see uv__platform_invalidate_fd */</span></span><br><span class="line">      <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      assert(fd &gt;= <span class="number">0</span>);</span><br><span class="line">      assert((<span class="keyword">unsigned</span>) fd &lt; loop-&gt;nwatchers);</span><br><span class="line"></span><br><span class="line">      w = loop-&gt;watchers[fd];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果IO观察者已经被移除，则停止轮询这个文件描述符上的IO事件</span></span><br><span class="line">      <span class="comment">// 在一次事件循环中，同一IO观察者上可能出现多次IO事件</span></span><br><span class="line">      <span class="comment">// 继而调用多次回调函数，某次回调函数中，有可能移除了`w`自己</span></span><br><span class="line">      <span class="keyword">if</span> (w == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* File descriptor that we've stopped watching, disarm it.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Ignore all errors because we may be racing with another thread</span></span><br><span class="line"><span class="comment">         * when the file descriptor is closed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        epoll_ctl(loop-&gt;backend_fd, EPOLL_CTL_DEL, fd, pe);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 进入事件处理</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Give users only events they're interested in. Prevents spurious</span></span><br><span class="line"><span class="comment">       * callbacks when previous callback invocation in this loop has stopped</span></span><br><span class="line"><span class="comment">       * the current watcher. Also, filters out events that users has not</span></span><br><span class="line"><span class="comment">       * requested us to watch.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      pe-&gt;events &amp;= w-&gt;pevents | POLLERR | POLLHUP;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Work around an epoll quirk where it sometimes reports just the</span></span><br><span class="line"><span class="comment">       * EPOLLERR or EPOLLHUP event.  In order to force the event loop to</span></span><br><span class="line"><span class="comment">       * move forward, we merge in the read/write events that the watcher</span></span><br><span class="line"><span class="comment">       * is interested in; uv__read() and uv__write() will then deal with</span></span><br><span class="line"><span class="comment">       * the error or hangup in the usual fashion.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * Note to self: happens when epoll reports EPOLLIN|EPOLLHUP, the user</span></span><br><span class="line"><span class="comment">       * reads the available data, calls uv_read_stop(), then sometime later</span></span><br><span class="line"><span class="comment">       * calls uv_read_start() again.  By then, libuv has forgotten about the</span></span><br><span class="line"><span class="comment">       * hangup and the kernel won't report EPOLLIN again because there's</span></span><br><span class="line"><span class="comment">       * nothing left to read.  If anything, libuv is to blame here.  The</span></span><br><span class="line"><span class="comment">       * current hack is just a quick bandaid; to properly fix it, libuv</span></span><br><span class="line"><span class="comment">       * needs to remember the error/hangup event.  We should get that for</span></span><br><span class="line"><span class="comment">       * free when we switch over to edge-triggered I/O.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (pe-&gt;events == POLLERR || pe-&gt;events == POLLHUP)</span><br><span class="line">        pe-&gt;events |=</span><br><span class="line">          w-&gt;pevents &amp; (POLLIN | POLLOUT | UV__POLLRDHUP | UV__POLLPRI);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果存在有效事件</span></span><br><span class="line">      <span class="keyword">if</span> (pe-&gt;events != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* Run signal watchers last.  This also affects child process watchers</span></span><br><span class="line"><span class="comment">         * because those are implemented in terms of signal watchers.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 如果 `w` 是 `loop-&gt;signal_IOWatcher` 在循环之外调用回调，避免重复触发回调</span></span><br><span class="line">        <span class="keyword">if</span> (w == &amp;loop-&gt;signal_IOWatcher)</span><br><span class="line">          have_signals = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          w-&gt;cb(loop, w, pe-&gt;events);</span><br><span class="line">        <span class="comment">// `w-&gt;cb` 是 `uv__io_cb` 类型的函数指针，对应的实现函数如`uv__async_io`已经在上文介绍</span></span><br><span class="line">        <span class="comment">// 这个回调函数指针由 libuv 内部实现的统一入口，在 `cb` 中再进行事件分发，交由特定逻辑处理</span></span><br><span class="line"></span><br><span class="line">        nevents++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果信号事件触发</span></span><br><span class="line">    <span class="keyword">if</span> (have_signals != <span class="number">0</span>)</span><br><span class="line">      loop-&gt;signal_IOWatcher.cb(loop, &amp;loop-&gt;signal_IOWatcher, POLLIN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新赋值为`NULL`</span></span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = <span class="literal">NULL</span>;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果信号事件触发</span></span><br><span class="line">    <span class="keyword">if</span> (have_signals != <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;  <span class="comment">/* Event loop should cycle now so don't poll again. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 事件计数器 不为 `0`</span></span><br><span class="line">    <span class="keyword">if</span> (nevents != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果 所有 所有文件描述符上都有事件产生 且 `count` 不为 `0`，再循环一次</span></span><br><span class="line">      <span class="keyword">if</span> (nfds == ARRAY_SIZE(events) &amp;&amp; --count != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* Poll for more events but don't block this time. */</span></span><br><span class="line">        timeout = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果`timeout`为`0`函数直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果`timeout`为`-1`则继续循环</span></span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新计算 `timeout`</span></span><br><span class="line">update_timeout:</span><br><span class="line">    assert(timeout &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    real_timeout -= (loop-&gt;time - base);</span><br><span class="line">    <span class="keyword">if</span> (real_timeout &lt;= <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 剩余 `timeout`</span></span><br><span class="line">    timeout = real_timeout;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某些情况下，IO观察者绑定的回调函数并不是立即调用的，而是被延迟到下一次事件循环的固定阶段调用的，在 <code>uv_run</code> 中调用的 <code>uv__run_pending</code> 处理这些被延迟的IO观察者，实现如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L2NvcmUuYyNMNzM3" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/core.c#L737">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/core.c#L737<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__run_pending</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE pq;</span><br><span class="line">  <span class="keyword">uv__io_t</span>* w;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (QUEUE_EMPTY(&amp;loop-&gt;pending_queue))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;pending_queue, &amp;pq);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!QUEUE_EMPTY(&amp;pq)) &#123;</span><br><span class="line">    q = QUEUE_HEAD(&amp;pq);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line">    w = QUEUE_DATA(q, <span class="keyword">uv__io_t</span>, pending_queue);</span><br><span class="line">    w-&gt;cb(loop, w, POLLOUT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数遍历 <code>loop-&gt;pending_queue</code> 队列节点，取得I/O观察者后调用 <code>cb</code>，并且指定 <code>events</code> 参数为固定值 <code>POLLOUT</code>（表示可写），因此可以猜测被插入到 <code>loop-&gt;pending_queue</code> 队列中的情形都是可写I/O事件。该队列上是用来保存被延迟到下次事件循环中处理的IO观察者。为什么需要延迟呢？</p><p>通过搜索可以找到只有 <code>uv__io_feed</code> 中存在向 <code>loop-&gt;pending_queue</code> 队列插入节点的代码，如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDg5Mg==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L892">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L892<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_feed</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv__io_t</span>* w)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (QUEUE_EMPTY(&amp;w-&gt;pending_queue))</span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;loop-&gt;pending_queue, &amp;w-&gt;pending_queue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续搜索 <code>uv__io_feed</code> 可找到多处调用，此处就不过多介绍了。</p><p>至此，整个I/O观察者工作原理已经分析完成了。</p><p>I/O观察者是 libuv 中I/O相关的基础抽象，实现了对I/O事件的监控，其他I/O相关的功能基于这个基础抽象，I/O观察者完成了基本的事件派发，事件处理中的I/O数据读写则由更高级的抽象 <code>handle</code> 和 <code>request</code> 完成。</p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di81LWxpYnV2LWlvLXdhdGNoZXIubWQ=" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/5-libuv-io-watcher.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di81LWxpYnV2LWlvLXdhdGNoZXIubWQ=" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/5-libuv-io-watcher.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（四）定时器（Timer）</title>
      <link href="/posts/node.js/libuv/4-libuv-timer/"/>
      <url>/posts/node.js/libuv/4-libuv-timer/</url>
      
        <content type="html"><![CDATA[<p>在事件循环中，处理的一个 <code>handle</code> 就是计时器，通过 <code>uv__run_timers</code>，我们可以找到 <code>timer.c</code> 文件，里面包含了 timer 的实现。</p><p>先来看一下 <code>uv__run_timers</code> 的实现源码：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdGltZXIuYyNMMTU4" title="https://github.com/libuv/libuv/blob/v1.28.0/src/timer.c#L158">https://github.com/libuv/libuv/blob/v1.28.0/src/timer.c#L158<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__run_timers</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">heap_node</span>* <span class="title">heap_node</span>;</span></span><br><span class="line">  <span class="keyword">uv_timer_t</span>* handle;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    heap_node = heap_min(timer_heap(loop));</span><br><span class="line">    <span class="keyword">if</span> (heap_node == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    handle = container_of(heap_node, <span class="keyword">uv_timer_t</span>, heap_node);</span><br><span class="line">    <span class="keyword">if</span> (handle-&gt;timeout &gt; loop-&gt;time)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    uv_timer_stop(handle);</span><br><span class="line">    uv_timer_again(handle);</span><br><span class="line">    handle-&gt;timer_cb(handle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 libuv 中，timer是按超时时间 <code>timeout</code> 存放在最小堆中的，这样，最小的的堆顶就是 <code>timeout</code> 最小的那个 timer，也就是最先到达超时时间的那个定时任务。</p><p>所以，在检查到期的定时任务时，只需要不断的获取堆顶的元素，并与当前时间比对：</p><ol><li><p>如果没有堆顶元素，则没有任何定时器存在，函数将直接返回。</p></li><li><p>如果当前时间小于定时任务的超时间，那么堆顶timer未到到超时时间，非堆顶的timer更没有达到超时时间，整个uv__run_timers也就会退出。</p></li><li><p>如果当前时间等于或大于定时任务的超时间，这个timer就是一定达到或超过执行时间的。这时，就可以从timer堆中将其取出，然后调用其回调函数<code>handle-&gt;timer_cb(handle)</code>处理定时任务，然后再次重复获取下一个出现在堆顶的timer，直到情况1或2成立。</p><p>以下有两个主要注意的点：</p><ol><li>大于或等于实际上包含两种情形，这两种情形对于实际应用程序逻辑来说可能会出现天壤之别。<ol><li>如果当前时间等于定时任务的超时间，就是最理想的状态了，因为定时任务会在定时器到来的时候准时被执行，与预期相符合。</li><li>如果当前时间大于定时任务的超时间，则是非理想的状态了，然而这种情形缺是最出现的，因为很难保证当timer的超时时间到来时，程序搞好执行到此。</li></ol></li><li>如果定时任务的回调函数<code>handle-&gt;timer_cb</code>执行时间过长，将会导致整个循环阻塞在此处，从而影响其他定时器的处理，进而也影响到整个时间循环的其他逻辑的处理，因为只有一个线程在处理各类型的回调任务。</li></ol></li></ol><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_timer_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv_timer_t</span>* handle)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_timer_start</span><span class="params">(<span class="keyword">uv_timer_t</span>* handle, uv_timer_cb cb, <span class="keyword">uint64_t</span> timeout, <span class="keyword">uint64_t</span> repeat)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_timer_stop</span><span class="params">(<span class="keyword">uv_timer_t</span>* handle)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_timer_again</span><span class="params">(<span class="keyword">uv_timer_t</span>* handle)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv_timer_set_repeat</span><span class="params">(<span class="keyword">uv_timer_t</span>* handle, <span class="keyword">uint64_t</span> repeat)</span></span></span><br><span class="line"><span class="function">uint64_t <span class="title">uv_timer_get_repeat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_timer_t</span>* handle)</span></span></span><br></pre></td></tr></table></figure><p>uv_timer_t<br>void (<em>uv_timer_cb)(uv_timer_t</em> handle)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_timer_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv_timer_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  uv__handle_init(loop, (<span class="keyword">uv_handle_t</span>*)handle, UV_TIMER);</span><br><span class="line">  handle-&gt;timer_cb = <span class="literal">NULL</span>;</span><br><span class="line">  handle-&gt;repeat = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di80LWxpYnV2LXRpbWVyLm1k" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/4-libuv-timer.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di80LWxpYnV2LXRpbWVyLm1k" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/4-libuv-timer.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（三）资源抽象：Handle 和 Request</title>
      <link href="/posts/node.js/libuv/3-libuv-handle-and-request/"/>
      <url>/posts/node.js/libuv/3-libuv-handle-and-request/</url>
      
        <content type="html"><![CDATA[<p>Handle 是 libuv 设计实现的核心部分之一，根据官方描述：<strong>Handles 代表长生命周期的对象有能力执行某些操作当它们处于激活状态下</strong>。</p><p>libuv 采用了<strong>组合的方式</strong>实现代码复用，并且达到了面向对象编程中的继承的效果。</p><p>Handle 有很多种不同的类型，这些类型有一个共同的、公共的基础结构 <code>uv_handle_s</code>，因结构体内存布局字节对齐所有子类型都可以强制类型转换成 <code>uv_handle_t</code> 类型，所以所有能够应用在 <code>uv_handle_t</code> 上的基础API都可用于子类型的 <code>handle</code>。</p><p>在开始对不同类型的 Handle 开始分析之前，将会对 Handle 进行整体分析。</p><p>首先，看一下 libuv 中的 Handle 相关的类型声明和定义：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9pbmNsdWRlL3V2LmgjTDIwMQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/include/uv.h#L201">https://github.com/libuv/libuv/blob/v1.28.0/include/uv.h#L201<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Handle types. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_loop_s</span> <span class="title">uv_loop_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_handle_s</span> <span class="title">uv_handle_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_stream_s</span> <span class="title">uv_stream_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_tcp_s</span> <span class="title">uv_tcp_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_udp_s</span> <span class="title">uv_udp_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_pipe_s</span> <span class="title">uv_pipe_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_tty_s</span> <span class="title">uv_tty_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_poll_s</span> <span class="title">uv_poll_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_timer_s</span> <span class="title">uv_timer_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_prepare_s</span> <span class="title">uv_prepare_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_check_s</span> <span class="title">uv_check_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_idle_s</span> <span class="title">uv_idle_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_async_s</span> <span class="title">uv_async_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_process_s</span> <span class="title">uv_process_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_fs_event_s</span> <span class="title">uv_fs_event_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_fs_poll_s</span> <span class="title">uv_fs_poll_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_signal_s</span> <span class="title">uv_signal_t</span>;</span></span><br></pre></td></tr></table></figure><p>以上是 libuv 中所有的 <code>handle</code> 声明，并且都起了类型别名，命名规律显而易见，<code>uv_loop_t</code> 也在其中，<code>uv_loop_t</code> 作为所有资源的统一入口同样也是一种资源，而且是生命周期最长的资源。</p><p>下面来开一下 <code>uv_handle_s</code> 的结构定义：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9pbmNsdWRlL3V2LmgjTDQxMQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/include/uv.h#L411">https://github.com/libuv/libuv/blob/v1.28.0/include/uv.h#L411<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_HANDLE_FIELDS     \</span></span><br><span class="line">  <span class="comment">/* public */</span>               \ 公有字段：</span><br><span class="line">  <span class="keyword">void</span>* data;                \    数据指针，指向实际的数据，可用于指向任意用户自定义数据地址</span><br><span class="line">  <span class="comment">/* read-only */</span>            \ 只读字段：</span><br><span class="line">  <span class="keyword">uv_loop_t</span>* loop;           \    事件循环对象指针，指向事件循环对象</span><br><span class="line">  uv_handle_type type;       \    类型</span><br><span class="line">  <span class="comment">/* private */</span>              \ 私有字段：</span><br><span class="line">  uv_close_cb close_cb;      \    关闭回调，Handle关闭时触发的回调函数</span><br><span class="line">  <span class="keyword">void</span>* handle_queue[<span class="number">2</span>];     \    队列节点，用于链接前后节点，形成双向队列，该字段是含有两个成员的数组，分别表示next、prev。</span><br><span class="line">  <span class="keyword">union</span> &#123;                    \    联合体字段，TODO：待补充作用</span><br><span class="line">    <span class="keyword">int</span> fd;                  \</span><br><span class="line">    <span class="keyword">void</span>* reserved[<span class="number">4</span>];       \</span><br><span class="line">  &#125; u;                       \</span><br><span class="line">  UV_HANDLE_PRIVATE_FIELDS   \  平台相关字段，libuv在各个不同平台上的实现是不同的，为支持不同平台，需针对不同平台进行差异化实现。</span><br></pre></td></tr></table></figure><p>宏 <code>UV_HANDLE_FIELDS</code> 被放到了 <code>struct uv_handle_s</code>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL2luY2x1ZGUvdXYuaCNMNDI2" title="https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv.h#L426">https://github.com/libuv/libuv/blob/view-v1.28.0/include/uv.h#L426<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The abstract base class of all handles. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uv_handle_s</span> &#123;</span></span><br><span class="line">  UV_HANDLE_FIELDS</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如注释所言，<code>struct uv_handle_s</code> 是所有 <code>handle</code> 的抽象基类。</p><p>在 <code>*nix</code> 平台下，<code>UV_HANDLE_PRIVATE_FIELDS</code> 宏定义如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEueC9zcmMvdXYtY29tbW9uLmgjTDYy" title="https://github.com/libuv/libuv/blob/v1.x/src/uv-common.h#L62">https://github.com/libuv/libuv/blob/v1.x/src/uv-common.h#L62<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_HANDLE_PRIVATE_FIELDS     \</span></span><br><span class="line">  <span class="keyword">uv_handle_t</span>* next_closing;         \ 下一个 处于 closing 状态的 handle 的地址，形成一个单向的链表</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> flags;                \ handle 的 标识，handle 存在很多标识，通过位运算获取。</span><br></pre></td></tr></table></figure><p><code>flags</code> 可以使用的标识如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Handle flags. Some flags are specific to Windows or UNIX. */</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">  <span class="comment">/* Used by all handles. */</span></span><br><span class="line">  UV_HANDLE_CLOSING                     = <span class="number">0x00000001</span>,</span><br><span class="line">  UV_HANDLE_CLOSED                      = <span class="number">0x00000002</span>,</span><br><span class="line">  UV_HANDLE_ACTIVE                      = <span class="number">0x00000004</span>,</span><br><span class="line">  UV_HANDLE_REF                         = <span class="number">0x00000008</span>,</span><br><span class="line">  UV_HANDLE_INTERNAL                    = <span class="number">0x00000010</span>,</span><br><span class="line">  UV_HANDLE_ENDGAME_QUEUED              = <span class="number">0x00000020</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Used by streams. */</span></span><br><span class="line">  UV_HANDLE_LISTENING                   = <span class="number">0x00000040</span>,</span><br><span class="line">  UV_HANDLE_CONNECTION                  = <span class="number">0x00000080</span>,</span><br><span class="line">  UV_HANDLE_SHUTTING                    = <span class="number">0x00000100</span>,</span><br><span class="line">  UV_HANDLE_SHUT                        = <span class="number">0x00000200</span>,</span><br><span class="line">  UV_HANDLE_READ_PARTIAL                = <span class="number">0x00000400</span>,</span><br><span class="line">  UV_HANDLE_READ_EOF                    = <span class="number">0x00000800</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 其他标识省略标识</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所有 <code>handle</code> 都具备 <code>UV_HANDLE_ACTIVE</code> <code>UV_HANDLE_CLOSED</code> 等几个公共状态，还有一些特地 <code>handle</code> 特定的状态。</p><p>以上为 <code>uv_handle_s</code> 定义，其中字段是通过 <code>UV_HANDLE_FIELDS</code> 宏定义和引入的，这样做的目的是为了复用字段定义部分的代码，能有效降低代码量，提升可维护性。相关字段的功能描述见字段后的说明。</p><p><code>uv_handle_t</code> 实际上就是作为所有其他 <code>handle</code> 的<code>基类</code>存在的，其他 <code>handle</code> 通过<code>组合</code>的方式集成了 <code>uv_handle_t</code> 字段，通过强制类型转换，可以转换为 <code>uv_handle_t</code>，之后在其上应用 <code>uv_handle_t</code> 的相关方法。</p><p>以 <code>stream</code> 为例看一下其类型定义：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEueC9pbmNsdWRlL3V2LmgjTDQ2MQ==" title="https://github.com/libuv/libuv/blob/v1.x/include/uv.h#L461">https://github.com/libuv/libuv/blob/v1.x/include/uv.h#L461<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_STREAM_FIELDS                        \</span></span><br><span class="line">  <span class="comment">/* number of bytes queued for writing */</span>      \</span><br><span class="line">  <span class="keyword">size_t</span> write_queue_size;                      \</span><br><span class="line">  uv_alloc_cb alloc_cb;                         \</span><br><span class="line">  uv_read_cb read_cb;                           \</span><br><span class="line">  <span class="comment">/* private */</span>                                 \</span><br><span class="line">  UV_STREAM_PRIVATE_FIELDS</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * uv_stream_t is a subclass of uv_handle_t.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * uv_stream is an abstract class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * uv_stream_t is the parent class of uv_tcp_t, uv_pipe_t and uv_tty_t.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uv_stream_s</span> &#123;</span></span><br><span class="line">  UV_HANDLE_FIELDS</span><br><span class="line">  UV_STREAM_FIELDS</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>uv_stream_s</code> 结构体中，包含了 <code>uv_handle_s</code> 的宏定义 <code>UV_HANDLE_FIELDS</code> 和 <code>uv_stream_s</code> 类型特定宏定义 <code>UV_STREAM_FIELDS</code>，<code>uv_stream_s</code> 和 <code>uv_handle_s</code> 在结构体内存布局上存在公共的部分且是以起始地址对齐的，<code>uv_stream_s</code> 比 <code>uv_handle_s</code> 多出一块特有的部分, 可以通过强制类型转换将 <code>uv_stream_s</code> 转换为 <code>uv_handle_s</code>。</p><p><code>uv_handle_t</code> 定义了所有 <code>handle</code> 公共的部分，作为一个抽象基类存在。<code>uv_handle_t</code> 是不直接使用的，因为它并不能支持用户需求，无实际意义，实际上，在使用其他派生类型时，会间接使用 <code>uv_handle_t</code>。所有派生类型在初始化的时候，也进行了 <code>uv_handle_t</code> 的初始化，这类似于高级语言构造函数在执行时常常需要调用基类构造函数一样。除初始化操作以外，同样还有其他操作需要调用 <code>uv_handle_t</code> 函数的相关操作。</p><p>一般来说，派生类型具备如下几个操作：</p><ul><li><code>uv_{handle}_init</code>：初始化 <code>handle</code> 结构，把各个字段设置成合理值，并插入 <code>loop-&gt;handle_queue</code> 队列；</li><li><code>uv_{handle}_start</code>：启动 <code>handle</code> 使其处于 <code>UV_HANDLE_ACTIVE</code> 状态；</li><li><code>uv_{handle}_stop</code>：停止 <code>handle</code> 使其处于 <code>UV_HANDLE_CLOSED</code> 状态，并移出 <code>loop-&gt;handle_queue</code> 队列。</li></ul><p>以上各派生类型的公共操作，提现了 <code>handle</code> 的声明周期，和 <code>loop</code> 生命周期类似，除此之外还包括一些特定 <code>handle</code> 特定处理逻辑。</p><p>因为各个派生类型的初始化/启动/停止逻辑都有不同，所以并没有公共的初始化/启动/停止方法，每个派生类型根据需要提供特定的初始化/启动/停止函数，它们都在内部初始化/启动/停止 <code>uv_handle_t</code>。对应的方法为：</p><ul><li><code>uv__handle_init</code></li><li><code>uv__handle_start</code></li><li><code>uv__handle_stop</code></li></ul><p>从命名可以看出这些都是不对外暴露的方法。</p><p>接下来我就来看一下 <code>handle</code> 的初始化。</p><h2 id="Init：uv-handle-init"><a href="#Init：uv-handle-init" class="headerlink" title="Init：uv__handle_init"></a>Init：<code>uv__handle_init</code></h2><p><code>uv_handle_t</code> 的初始化代码是用宏 <code>uv__handle_init</code> 定义的宏函数，实现如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmgjTDI4Mg==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L282">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L282<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__handle_init(loop_, h, type_)                                      \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (h)-&gt;loop = (loop_);                                                      \</span><br><span class="line">    (h)-&gt;type = (type_);                                                      \</span><br><span class="line">    (h)-&gt;flags = UV_HANDLE_REF;  <span class="comment">/* Ref the loop when active. */</span>              \</span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;(loop_)-&gt;handle_queue, &amp;(h)-&gt;handle_queue);            \</span><br><span class="line">    uv__handle_platform_init(h);                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_WIN32)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> uv__handle_platform_init(h) ((h)-&gt;u.fd = -1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> uv__handle_platform_init(h) ((h)-&gt;next_closing = NULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>uv__handle_init</code> 是一个使用宏定义的宏函数，<code>do{}while(0)</code> 是一种巧妙用法，形成代码块，且调用时后边必须加分号，会被编译器优化掉。</p><p>这段代码主要完成以下几个工作：</p><ol><li>关联 <code>loop</code> 到 <code>handle</code>，可以通过 <code>handle</code> 找到对应的 <code>loop</code>；</li><li>设置 <code>handle</code> 类型；</li><li>设置 <code>handle</code> 标识为 <code>UV_HANDLE_REF</code>，这个标识位决定了 <code>handle</code> 是否计入引用计数。后续 Start Stop 会看到其用途；</li><li>将 <code>handle</code> 插入 <code>loop-&gt;handle_queue</code> 队列的尾部，所有初始化的 <code>handle</code> 就将被插入到这个队列中；</li><li>通过 <code>uv__handle_platform_init</code> 平台特定初始化函数将 <code>handle</code> 的 <code>next_closing</code> 设置为 <code>NULL</code>，这是一个连接了所有关闭的 <code>handle</code> 的单链表。</li></ol><p>如下是 <code>uv_timer_t</code> 的初始化函数 <code>uv_timer_init</code>，它直接引用了 <code>uv__handle_init</code> 初始化 <code>uv_handle_t</code>，其他派生类型也是如此。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdGltZXIuYyNMNjI=" title="https://github.com/libuv/libuv/blob/v1.28.0/src/timer.c#L62">https://github.com/libuv/libuv/blob/v1.28.0/src/timer.c#L62<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_timer_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv_timer_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  uv__handle_init(loop, (<span class="keyword">uv_handle_t</span>*)handle, UV_TIMER);</span><br><span class="line">  handle-&gt;timer_cb = <span class="literal">NULL</span>;</span><br><span class="line">  handle-&gt;repeat = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样初始化工作就完成了，各个派生结构特定的初始化部分可能很简单，也可能很复杂。</p><h2 id="Start：uv-handle-start"><a href="#Start：uv-handle-start" class="headerlink" title="Start：uv__handle_start"></a>Start：<code>uv__handle_start</code></h2><p><code>uv_handle_t</code> 的启动代码是用宏 <code>uv__handle_start</code> 定义的宏函数，实现如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmgjTDIzOQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L239">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L239<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__handle_start(h)                                                   \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != <span class="number">0</span>) <span class="keyword">break</span>;                          \</span><br><span class="line">    (h)-&gt;flags |= UV_HANDLE_ACTIVE;                                           \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_REF) != <span class="number">0</span>) uv__active_handle_add(h);          \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>uv__handle_start</code> 将 handle 设置为 <code>UV_HANDLE_ACTIVE</code> 状态，并通过 <code>uv__active_handle_add</code> 更新活动的 <code>handle</code> 引用计数。如果不存在 <code>UV_HANDLE_REF</code> 标志位，则不会增加引用计数。</p><p>虽然对 handle 进行了 <code>Start</code> 操作，但是实际仅仅是设置了个标志位和增加了一个引用计数而已，看不到任何的 <code>Start</code>，实际上是告诉 libuv 该 <code>handle</code> 准备好了，可以 <code>Go</code> 了。因为更新引用计数间接影响了事件循环的活动状态。</p><p><code>uv_run</code> 才是真正的启动操作，向 libuv 表明 <code>Ready</code> 了之后，<code>uv_run</code> 的时候才会处理这个 <code>handle</code>。</p><h2 id="Stop：uv-handle-stop"><a href="#Stop：uv-handle-stop" class="headerlink" title="Stop：uv__handle_stop"></a>Stop：<code>uv__handle_stop</code></h2><p>handle 的 Stop： 操作 由 <code>uv__handle_stop</code> 宏实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__handle_stop(h)                                                    \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) == <span class="number">0</span>) <span class="keyword">break</span>;                          \</span><br><span class="line">    (h)-&gt;flags &amp;= ~UV_HANDLE_ACTIVE;                                          \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_REF) != <span class="number">0</span>) uv__active_handle_rm(h);           \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>uv__handle_stop</code> 将 handle 设置为 <code>~UV_HANDLE_ACTIVE</code> 状态，并通过 <code>uv__active_handle_rm</code> 更新活动的 <code>handle</code> 引用计数。如果不存在 <code>UV_HANDLE_REF</code> 标志位，则不会减少引用计数。</p><p><code>Stop</code> 是 <code>Start</code> 的反向操作，将 handle 修改为<code>非准备</code>状态。</p><h2 id="Close：uv-close"><a href="#Close：uv-close" class="headerlink" title="Close：uv_close"></a>Close：<code>uv_close</code></h2><p>对于 handle 来说，还有一个 Close 方法 <code>uv_close</code>，<code>Close</code> 可以认为是 <code>Init</code> 的反向操作，它将 <code>handle</code> 从 <code>loop-&gt;handle_queue</code> 移除，清理资源并触发回调。</p><p>不同于上面三个方法，<code>uv_close</code> 是对外开放的，适用于所有类型 <code>handle</code> 的方法，在 <code>uv_close</code> 内部根据不同的类型，调用对应的函数处理。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDEwNw==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L107">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L107<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv_close</span><span class="params">(<span class="keyword">uv_handle_t</span>* handle, uv_close_cb close_cb)</span> </span>&#123;</span><br><span class="line">  assert(!uv__is_closing(handle));</span><br><span class="line"></span><br><span class="line">  handle-&gt;flags |= UV_HANDLE_CLOSING;</span><br><span class="line">  handle-&gt;close_cb = close_cb;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (handle-&gt;type) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  uv__make_close_pending(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDIwOQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L209">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L209<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__make_close_pending</span><span class="params">(<span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  assert(handle-&gt;flags &amp; UV_HANDLE_CLOSING);</span><br><span class="line">  assert(!(handle-&gt;flags &amp; UV_HANDLE_CLOSED));</span><br><span class="line">  handle-&gt;next_closing = handle-&gt;loop-&gt;closing_handles;</span><br><span class="line">  handle-&gt;loop-&gt;closing_handles = handle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>loop</code> 上有一个 <code>closing_handles</code> 字段，这是一个单向链表，关联了处于关闭进行中的 handle，这个字段的类型是 <code>uv_handle_t*</code>，指向了 <code>uv_handle_t</code>，而 <code>uv_handle_s</code> 存在了一个 <code>uv_handle_t*</code> 类型的指针 <code>next_closing</code> 指向下一个 <code>handle</code>, 这样就形成一个单向链表。 </p><p>如下 <code>closing_handles</code> 的声明和初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">uv_handle_t</span>* closing_handles;                                               \</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_HANDLE_PRIVATE_FIELDS                                              \</span></span><br><span class="line">  <span class="keyword">uv_handle_t</span>* next_closing;                                                  \</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_loop_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  loop-&gt;closing_handles = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv_close</code> 通过调用 <code>uv__make_close_pending</code> 将待关闭的 <code>handle</code> 放到 <code>loop-&gt;closing_handles</code> 链表末尾，<code>panding</code> 的含义是延迟到下次事件循环处理。</p><p>在 <code>uv_run</code> 的 <code>Call close callbacks</code> 阶段，通过函数 <code>uv__run_closing_handles</code> 专门负责处理 <code>loop-&gt;closing_handles</code>：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDM0Mw==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L343">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L343<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_run</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (r != <span class="number">0</span> &amp;&amp; loop-&gt;stop_flag == <span class="number">0</span>) &#123;</span><br><span class="line">    uv__run_closing_handles(loop);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDI4Ng==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L286">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L286<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__run_closing_handles</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_handle_t</span>* p;</span><br><span class="line">  <span class="keyword">uv_handle_t</span>* q;</span><br><span class="line"></span><br><span class="line">  p = loop-&gt;closing_handles;</span><br><span class="line">  loop-&gt;closing_handles = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    q = p-&gt;next_closing;</span><br><span class="line">    uv__finish_close(p);</span><br><span class="line">    p = q;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDIzNg==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L236">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L236<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__finish_close</span><span class="params">(<span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  assert(handle-&gt;flags &amp; UV_HANDLE_CLOSING);</span><br><span class="line">  assert(!(handle-&gt;flags &amp; UV_HANDLE_CLOSED));</span><br><span class="line">  handle-&gt;flags |= UV_HANDLE_CLOSED;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (handle-&gt;type) &#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  uv__handle_unref(handle);</span><br><span class="line">  QUEUE_REMOVE(&amp;handle-&gt;handle_queue);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (handle-&gt;close_cb) &#123;</span><br><span class="line">    handle-&gt;close_cb(handle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先将 <code>closing_handles</code> 从 <code>loop</code> 摘除，然后遍历 <code>closing_handles</code>，通过 <code>uv__finish_close</code> 对每个 <code>handle</code> 进行最后的 <code>close</code>，<code>handle</code> 被移除 <code>loop-&gt;handle_queue</code> 并调用其关联的 <code>close_cb</code>，至此 <code>handle</code> 彻底没有了和 <code>loop</code> 的关联走完了一个完整的生命周期。</p><p><code>uv_close</code> 的处理过程被拆分成了两段，一段是调用 <code>uv__make_close_pending</code>，另一段是在事件循环中调用 <code>uv__run_closing_handles</code>，关闭的过程是异步的，用户程序无法仅仅是通过 <code>uv_close</code> 返回判断关闭是否完成，需要在 <code>close_cb</code> 中接收异步操作结果。那么问题来了，为什么要拆分成两段而不是一次性处理完呢？</p><p><code>uv_close</code> 一般来说都是在异步回调中被调用的，因为一个 <code>handle</code> 的关闭在逻辑上依赖于 <code>handle</code> 完成相关工作，而异步的逻辑中，完成工作后会调用相应的回调，所以只有在回调中调用 <code>uv_close</code> 才能使逻辑上是同步。</p><p><code>Close</code> 阶段可以看做是 <code>Init</code> 阶段的反向操作。</p><p><code>handle</code> 就这样伴随着事件循环经历了 <code>Init</code> -&gt; <code>Start</code> -&gt; <code>Stop</code> -&gt; <code>Close</code> 等生命周期。</p><h2 id="Reference-counting：Ref-amp-Unref"><a href="#Reference-counting：Ref-amp-Unref" class="headerlink" title="Reference counting：Ref &amp; Unref"></a>Reference counting：Ref &amp; Unref</h2><p>上文已经遇到过，<code>handle</code> 有个 <code>UV_HANDLE_REF</code> 标志位，这个状态用于控制 <code>handle</code> 是否计入 <code>loop-&gt;active_handles</code> 引用计数，因为 <code>handle</code> 的引用计数影响 <code>loop</code> 活动状态，所以 <code>UV_HANDLE_REF</code> 状态会间接影响 <code>loop</code> 的状态。</p><p>接下来，我们看下引用计数相关API：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91di1jb21tb24uYyNMNTAy" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/uv-common.c#L502">https://github.com/libuv/libuv/blob/view-v1.28.0/src/uv-common.c#L502<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv_ref</span><span class="params">(<span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  uv__handle_ref(handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv_unref</span><span class="params">(<span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  uv__handle_unref(handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_has_ref</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> uv__has_ref(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmgjTDI1NQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L255">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L255<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__handle_ref(h)                                                     \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_REF) != <span class="number">0</span>) <span class="keyword">break</span>;                             \</span><br><span class="line">    (h)-&gt;flags |= UV_HANDLE_REF;                                              \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_CLOSING) != <span class="number">0</span>) <span class="keyword">break</span>;                         \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != <span class="number">0</span>) uv__active_handle_add(h);       \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__handle_unref(h)                                                   \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_REF) == <span class="number">0</span>) <span class="keyword">break</span>;                             \</span><br><span class="line">    (h)-&gt;flags &amp;= ~UV_HANDLE_REF;                                             \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_CLOSING) != <span class="number">0</span>) <span class="keyword">break</span>;                         \</span><br><span class="line">    <span class="keyword">if</span> (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != <span class="number">0</span>) uv__active_handle_rm(h);        \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__has_ref(h)                                                        \</span></span><br><span class="line">  (((h)-&gt;flags &amp; UV_HANDLE_REF) != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmgjTDIyMQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L221">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L221<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__active_handle_add(h)                                              \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (h)-&gt;loop-&gt;active_handles++;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__active_handle_rm(h)                                               \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (h)-&gt;loop-&gt;active_handles--;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>存在引用计数标志 <code>UV_HANDLE_REF</code>，会计入引用计数，否则不会引用计数。</p><p>实现非常简单，在条件满足的情况下，更新 <code>loop-&gt;active_handles</code> 值。</p><p>在事件循环初始化函数 <code>uv_loop_init</code> 中，<code>loop-&gt;child_watcher</code>、<code>loop-&gt;wq_async</code> 都被 <code>Unref</code> 了，避免影响 <code>loop</code> 的存活状态。</p><h2 id="Status：Active-amp-Closing"><a href="#Status：Active-amp-Closing" class="headerlink" title="Status：Active &amp; Closing"></a>Status：Active &amp; Closing</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDQwMA==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L400">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L400<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_is_active</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> uv__is_active(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDMwMQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L301">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L301<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_is_closing</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_handle_t</span>* handle)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> uv__is_closing(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmgjTDIzMw==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L233">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L233<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__is_active(h)                                                      \</span></span><br><span class="line">  (((h)-&gt;flags &amp; UV_HANDLE_ACTIVE) != <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__is_closing(h)                                                     \</span></span><br><span class="line">  (((h)-&gt;flags &amp; (UV_HANDLE_CLOSING | UV_HANDLE_CLOSED)) != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>实现简单，无需解释。</p><h2 id="handle-和-loop-的关联关系"><a href="#handle-和-loop-的关联关系" class="headerlink" title="handle 和 loop 的关联关系"></a>handle 和 loop 的关联关系</h2><p><code>handle</code> 和 <code>loop</code> 之间的关联是最为重要的，<code>handle</code> 必须注册到 <code>loop</code> 中的各种结构中才有意义，脱离 <code>loop</code> 的 <code>handle</code> 是毫无用途的，只有关联到 <code>loop</code> 上的 <code>handle</code> 才能在事件循环的过程中被处理。以上 <code>handle</code> 生命周期的核心就是在管理这种关系。除了以上基本的关联之外，<code>handle</code> 和 <code>loop</code> 还有其他关联。</p><p>在 <code>Init</code> 和 <code>Close</code> 操作中，<code>handle</code> 被插入/移除 <code>loop-&gt;handle_queue</code> 队列，<code>uv__active_handle_add</code>、<code>uv__active_handle_rm</code> 这两个宏函数修改 <code>handle</code> 的引用计数，进而间接修改了 <code>loop</code> 的状态。</p><p>除 <code>loop-&gt;handle_queue</code> 外，<code>loop</code> 中还有多个 <code>handle</code> 有关的队列，<code>handle</code> 除了被插入 <code>loop-&gt;handle_queue</code> 队列外，还会被插入到类型特定的结构中（如：队列、链表、堆），在 <code>uv_run</code> 的各个阶段，libuv 依赖这些结构完成工作中，下面将逐个来介绍一下都有哪些关联以及都是什么用途。</p><p>在 <code>uv_loop_t</code> 中，有多个相关 <code>handle</code> 队列：</p><h3 id="uv-idle-t-uv-check-t-uv-check-t"><a href="#uv-idle-t-uv-check-t-uv-check-t" class="headerlink" title="uv_idle_t uv_check_t uv_check_t"></a>uv_idle_t uv_check_t uv_check_t</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9pbmNsdWRlL3V2L3VuaXguaCNMMjMx" title="https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L231">https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L231<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">void</span>* process_handles[<span class="number">2</span>];                                                   \</span><br><span class="line">  <span class="keyword">void</span>* prepare_handles[<span class="number">2</span>];                                                   \</span><br><span class="line">  <span class="keyword">void</span>* check_handles[<span class="number">2</span>];                                                     \</span><br><span class="line">  <span class="keyword">void</span>* idle_handles[<span class="number">2</span>];                                                      \</span><br></pre></td></tr></table></figure><ul><li><code>uv_idle_t</code> 还会被插入到 <code>loop-&gt;idle_handles</code> 队列头部，队列节点为 <code>handle-&gt;queue</code>；</li><li><code>uv_check_t</code> 还会被插入到 <code>loop-&gt;check_handles</code> 队列头部，队列节点为 <code>handle-&gt;queue</code>；</li><li><code>uv_check_t</code> 还会被插入到 <code>loop-&gt;prepare_handles</code> 队列头部，队列节点为 <code>handle-&gt;queue</code>。</li></ul><p>队列初始化：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9sb29wLmMjTDI5" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop.c#L29">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop.c#L29<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_loop_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;idle_handles);</span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;async_handles);</span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;check_handles);</span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;prepare_handles);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列插入节点：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9sb29wLXdhdGNoZXIuYyNMMjQ=" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop-watcher.c#L24">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop-watcher.c#L24<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_WATCHER_DEFINE(name, type)                                    \</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">int</span> uv_#<span class="meta">#name##_start(uv_##name##_t* handle, uv_##name##_cb cb) &#123;           \</span></span><br><span class="line">    ...</span><br><span class="line">    QUEUE_INSERT_HEAD(&amp;handle-&gt;loop-&gt;name##_handles, &amp;handle-&gt;<span class="built_in">queue</span>);         \</span><br><span class="line">    ...</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="uv-async-t"><a href="#uv-async-t" class="headerlink" title="uv_async_t"></a>uv_async_t</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">void</span>* async_handles[<span class="number">2</span>];                                                     \</span><br></pre></td></tr></table></figure><ul><li><code>uv_async_t</code> 还会被插入到 <code>loop-&gt;async_handles</code> 队列尾部，队列节点为 <code>handle-&gt;queue</code></li></ul><p>队列初始化：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEueC9zcmMvdW5peC9sb29wLmMjTDI5" title="https://github.com/libuv/libuv/blob/v1.x/src/unix/loop.c#L29">https://github.com/libuv/libuv/blob/v1.x/src/unix/loop.c#L29<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_loop_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;async_handles);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列插入节点：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEueC9zcmMvdW5peC9hc3luYy5jI0w0MA==" title="https://github.com/libuv/libuv/blob/v1.x/src/unix/async.c#L40">https://github.com/libuv/libuv/blob/v1.x/src/unix/async.c#L40<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_async_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">uv_async_t</span>* handle, uv_async_cb async_cb)</span> </span>&#123;</span><br><span class="line">  QUEUE_INSERT_TAIL(&amp;loop-&gt;async_handles, &amp;handle-&gt;<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="uv-process-t"><a href="#uv-process-t" class="headerlink" title="uv_process_t"></a>uv_process_t</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">void</span>* process_handles[<span class="number">2</span>];                                                   \</span><br></pre></td></tr></table></figure><p><code>uv_process_t</code> 还会被插入到 <code>loop-&gt;process_handles</code> 队列尾部，队列节点为 <code>handle-&gt;queue</code>。</p><p>队列初始化：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEueC9zcmMvdW5peC9sb29wLmMjTDI5" title="https://github.com/libuv/libuv/blob/v1.x/src/unix/loop.c#L29">https://github.com/libuv/libuv/blob/v1.x/src/unix/loop.c#L29<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_loop_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  uv__handle_unref(&amp;loop-&gt;child_watcher);</span><br><span class="line">  loop-&gt;child_watcher.flags |= UV_HANDLE_INTERNAL;</span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;process_handles);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列插入节点：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9wcm9jZXNzLmMjTDQxMA==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/process.c#L410">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/process.c#L410<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_spawn</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">uv_process_t</span>* process,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">const</span> <span class="keyword">uv_process_options_t</span>* options)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">/* Only activate this handle if exec() happened successfully */</span></span><br><span class="line">  <span class="keyword">if</span> (exec_errorno == <span class="number">0</span>) &#123;</span><br><span class="line">    QUEUE_INSERT_TAIL(&amp;loop-&gt;process_handles, &amp;process-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    uv__handle_start(process);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="uv-timer-t"><a href="#uv-timer-t" class="headerlink" title="uv_timer_t"></a>uv_timer_t</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span>                                                                    \</span><br><span class="line">    <span class="keyword">void</span>* min;                                                                \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nelts;                                                       \</span><br><span class="line">  &#125; timer_heap;                                                               \</span><br></pre></td></tr></table></figure><p><code>uv_timer_t</code> 还会被插入到 <code>loop-&gt;timer_heap</code> 堆（最小堆）中，堆节点为 <code>handle-&gt;heap_node</code>。</p><p>以上这些针对于不同类型的<code>队列/链表/堆</code>结构，都是为了方便的找到并统一处理相同类型的 <code>handle</code>。除了以上这些类型的 <code>handle</code> 之外，在 <code>loop</code> 上并没有这种特定类型的直接入口，而是通过其他链间接访问到 <code>handle</code> 的。</p><h3 id="uv-io-t"><a href="#uv-io-t" class="headerlink" title="uv__io_t"></a>uv__io_t</h3><p>在 <code>loop</code> 中，存在一个 <code>watchers</code> 数组，这个数组的每一项都是一个指向 <code>uv__io_t</code> 结构的指针，<code>uv__io_t</code> 是一个I/O观察者被内嵌到多个IO相关的 <code>handle</code> 结构中，所以所有的内嵌I/O观察者的 <code>handle</code> 都通过 <code>watchers</code> 被关联到 <code>loop</code> 上了。<code>uv__io_t</code> 存在多个子类型，这些子类型都可以被放到 <code>watchers</code> 数组中。</p><p>另外，还存在两个I/O观察者队列：</p><ul><li><code>watcher_queue</code>：所有的IO观察者都会被插入到这个队列中。</li><li><code>pending_queue</code>：所有的挂起IO观察者都会被插入到这个队列中。</li></ul><p><code>uv__io_t</code> 相关字段声明：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9pbmNsdWRlL3V2L3VuaXguaCNMMjE4" title="https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L218">https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L218<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">void</span>* pending_queue[<span class="number">2</span>];                                                     \</span><br><span class="line">  <span class="keyword">void</span>* watcher_queue[<span class="number">2</span>];                                                     \</span><br><span class="line">  <span class="keyword">uv__io_t</span>** watchers;                                                        \</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> nwatchers;                                                     \</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds;                                                          \</span><br></pre></td></tr></table></figure><h3 id="uv-work"><a href="#uv-work" class="headerlink" title="uv__work"></a>uv__work</h3><p><code>uv__work</code> 是 libuv 中任务的抽象，任务有线程池处理，任务在发起 <code>uv_work_t</code> request 时创建。</p><p>在 <code>loop</code> 中，存在一个任务队列，这个队列中记录了所以经线程池处理完成的任务，队列入口为：<code>loop-&gt;wq</code></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9pbmNsdWRlL3V2L3VuaXguaCNMMjE4" title="https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L218">https://github.com/libuv/libuv/blob/v1.28.0/include/uv/unix.h#L218<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_LOOP_PRIVATE_FIELDS                                                \</span></span><br><span class="line">  <span class="keyword">void</span>* wq[<span class="number">2</span>];                                                                \</span><br></pre></td></tr></table></figure><p>队列初始化：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2Ivdmlldy12MS4yOC4wL3NyYy91bml4L2xvb3AuYyNMMjk=" title="https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/loop.c#L29">https://github.com/libuv/libuv/blob/view-v1.28.0/src/unix/loop.c#L29<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_loop_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;wq);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务被处理完成或者任务取消后，都会被插入到该队里中。</p><h3 id="closing-handles"><a href="#closing-handles" class="headerlink" title="closing_handles"></a>closing_handles</h3><p><code>Close</code> 中提到过 <code>closing_handles</code> 关联了所有正在关闭的 <code>handle</code>，这也是一个关联的入口。</p><p><code>handle</code> 可能同时存在于 <code>loop-&gt;handle_queue</code> 队列、<code>loop-&gt;closing_handles</code> 链表 以及 其他某一个特定类型的 <code>handle</code> 队列中。</p><p>通过上面的描述，可以在大脑中勾勒出一幅数据结构图。</p><p>除了 通过 <code>loop</code> 可以找到每一个 Handle，每一个 Handle 也可以通过其 <code>loop</code> 字段找到其所在的 <code>loop</code>。</p><p>以上这些 <code>handle</code> 通过各种方式关联到 <code>loop</code> 上除了 <code>loop</code> 作为资源的统一入口需要管理注册记录所有资源外，还需要使 <code>事件循环</code> 在运行的时候，能够方便的高效的处理这些 <code>handle</code>。</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>Requests 一般代表一个短生命周期的<code>操作</code>，有些 Request 需要通过在 Handle 上执行，有些 Request 则可以直接执行。</p><p>在 libuv 中，有如下 Request：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Request types. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_req_s</span> <span class="title">uv_req_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_getaddrinfo_s</span> <span class="title">uv_getaddrinfo_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_getnameinfo_s</span> <span class="title">uv_getnameinfo_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_shutdown_s</span> <span class="title">uv_shutdown_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_write_s</span> <span class="title">uv_write_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_connect_s</span> <span class="title">uv_connect_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_udp_send_s</span> <span class="title">uv_udp_send_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_fs_s</span> <span class="title">uv_fs_t</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">uv_work_s</span> <span class="title">uv_work_t</span>;</span></span><br></pre></td></tr></table></figure><p><code>uv_getaddrinfo_t</code> <code>uv_getnameinfo_t</code> <code>uv_fs_t</code> <code>uv_work_t</code> 可以直接执行，不依赖于 <code>handle</code>，直接关联到 <code>loop</code> 上。</p><p><code>uv_connect_t</code> <code>uv_write_t</code> <code>uv_udp_send_t</code> <code>uv_shutdown_t</code> 都是跟读写相关的 <code>request</code>，其操作依赖于 <code>uv_stream_t</code>，也就是这些操作作用于 <code>uv_stream_t</code>，这些 <code>request</code> 通过 <code>handle</code> 关联到 <code>loop</code> 上。</p><p>同 <code>handle</code> 相似，<code>request</code> 也有一个基础结构 <code>uv_req_s</code>，其他 <code>request</code> 都通过组合复用 <code>uv_req_s</code> 的字段。</p><p><code>uv_req_s</code> 结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UV_REQ_FIELDS                   \</span></span><br><span class="line">  <span class="comment">/* public */</span>                          \</span><br><span class="line">  <span class="keyword">void</span>* data;                           \</span><br><span class="line">  <span class="comment">/* read-only */</span>                       \</span><br><span class="line">  uv_req_type type;                     \</span><br><span class="line">  <span class="comment">/* private */</span>                         \</span><br><span class="line">  <span class="keyword">void</span>* reserved[<span class="number">6</span>];                    \</span><br><span class="line">  UV_REQ_PRIVATE_FIELDS                 \</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Abstract base class of all requests. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uv_req_s</span> &#123;</span></span><br><span class="line">  UV_REQ_FIELDS</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>request</code> 并不需要在用户代码中显示的初始化，初始过程在相关的实现代码中由核心处理，通用的初始化部分 由 <code>uv__req_init</code> 函数处理，如下代码实现：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmgjTDMxMA==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L310">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L310<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__req_init(loop, req, typ)                                          \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    UV_REQ_INIT(req, typ);                                                    \</span><br><span class="line">    uv__req_register(loop, req);                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> UV_REQ_INIT(req, typ)                                                \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (req)-&gt;type = (typ);                                                      \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmgjTDIwNQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L205">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.h#L205<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__req_register(loop, req)                                           \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    (loop)-&gt;active_reqs.count++;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__req_unregister(loop, req)                                         \</span></span><br><span class="line">  <span class="keyword">do</span> &#123;                                                                        \</span><br><span class="line">    assert(uv__has_active_reqs(loop));                                        \</span><br><span class="line">    (loop)-&gt;active_reqs.count--;                                              \</span><br><span class="line">  &#125;                                                                           \</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><code>uv__req_init</code> 初始化了 <code>request</code> 的类型，并通过 <code>uv__req_register</code> 更新 <code>request</code> 的引用计数，也可以通过 <code>uv__req_unregister</code> 反注册。</p><p><code>request</code> 的更多内容，将在后续的分析中结合相关功能继续介绍。 </p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di8zLWxpYnV2LWhhbmRsZS1hbmQtcmVxdWVzdC5tZA==" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/3-libuv-handle-and-request.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di8zLWxpYnV2LWhhbmRsZS1hbmQtcmVxdWVzdC5tZA==" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/3-libuv-handle-and-request.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（二）事件循环（Eventloop）</title>
      <link href="/posts/node.js/libuv/2-libuv-event-loop/"/>
      <url>/posts/node.js/libuv/2-libuv-event-loop/</url>
      
        <content type="html"><![CDATA[<p>事件循环是 libuv 功能的核心部分。它的主要职责是对I/O进行轮询然后基于不同的事件源调度它们的回调。</p><p>事件循环主体数据结构在 libuv 中用 <code>struct uv_loop_s</code> 或类型别名 <code>uv_loop_t</code> 表示，文中统一使用 <code>loop</code> 表示其实例，它代表了事件循环，实际上它是事件循环所有资源的统一入口，所有在事件循环上运行的各类 <code>Handle/Request</code> 实例都被注册到 <code>uv_loop_s</code> 内部的各类结构中如队列、堆、伸展树等，同一实例往往被关联到多个不同的结构中，如大多数 <code>Handle</code> 都会同时存在两个队列中。</p><p><code>uv_loop_t</code> 是一种特殊的 <code>Handle</code>，它管理了同一事件循环上的所有资源。</p><p><code>uv_loop_t</code> 实例通常需要经历 <code>Init</code>、<code>Run</code>、<code>Stop</code>、<code>Close</code> 这几个生命周期，下面将分别分析几个阶段的实现。</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;uv.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uv_loop_t</span>* loop = uv_default_loop();</span><br><span class="line">    uv_run(loop, UV_RUN_DEFAULT);</span><br><span class="line">    uv_loop_close(loop);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"quit.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -luv helloworld.c -o helloworld</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./helloworld</span><br><span class="line">quit.</span><br></pre></td></tr></table></figure><p>以上是一个最基本的 libuv 程序代码，通过 <code>uv_run</code> 函数启动了 libuv 事件循环，所以 <code>uv_run</code> 做为事件循环的入口一定是阅读源码的重点，可以 <code>uv_run</code> 为起点，先看看 <code>uv_run</code> 都做了什么。</p><p>程序启动之后，打印了 <code>quit.\n</code> 立刻退出了，更具体一点说就是，所以函数调用尤其是 <code>uv_run</code> 函数立即返回了，程序自然就退出了，因为我们实际什么也有做，连上文提到的异步操作以及注册的回调函数都没有。</p><h2 id="Init：uv-loop-init"><a href="#Init：uv-loop-init" class="headerlink" title="Init：uv_loop_init"></a>Init：uv_loop_init</h2><p>在常见的使用场景中，通常都是直接调用 <code>uv_default_loop</code> 获取已经初始了的全局 <code>uv_loop_t</code> 实例，所以在分析 <code>uv_run</code> 之前，先看一下 <code>uv_loop_t</code> 初始化。</p><p>先来看一下 <code>uv_default_loop</code>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9sb29wLmMjTDMw" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop.c#L30">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop.c#L30<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">uv_loop_t</span> default_loop_struct;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uv_loop_t</span>* default_loop_ptr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">uv_loop_t</span>* uv_default_loop(<span class="keyword">void</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (default_loop_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> default_loop_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (uv_loop_init(&amp;default_loop_struct))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  default_loop_ptr = &amp;default_loop_struct;</span><br><span class="line">  <span class="keyword">return</span> default_loop_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 libuv 中存在一个全局的、静态的 <code>uv_loop_t</code> 实例 <code>default_loop_struct</code>，首次获取的时候经过 <code>uv_loop_init</code> 进行了初始化。</p><p><code>uv_default_loop</code> 调用 <code>uv_loop_init</code> 对 <code>default_loop_struct</code> 进行初始化并将地址赋给了 <code>default_loop_ptr</code>。</p><p><code>uv_loop_init</code> 实现如下（含注释）：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9sb29wLmMjTDI5" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop.c#L29">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/loop.c#L29<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_loop_init</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* saved_data;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据清零</span></span><br><span class="line">  saved_data = loop-&gt;data;</span><br><span class="line">  <span class="built_in">memset</span>(loop, <span class="number">0</span>, <span class="keyword">sizeof</span>(*loop));</span><br><span class="line">  loop-&gt;data = saved_data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定时器 uv_timer_t 相关：初始化定时器堆</span></span><br><span class="line">  heap_init((struct heap*) &amp;loop-&gt;timer_heap);</span><br><span class="line">  <span class="comment">// 初始化用于接收线程池中已完成任务的队列</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;wq);</span><br><span class="line">  <span class="comment">// 初始化 uv_idle_t 队列</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;idle_handles);</span><br><span class="line">  <span class="comment">// 初始化 uv_async_t 队列</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;async_handles);</span><br><span class="line">  <span class="comment">// 初始化 uv_check_t 队列</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;check_handles);</span><br><span class="line">  <span class="comment">// 初始化 uv_prepare_t 队列</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;prepare_handles);</span><br><span class="line">  <span class="comment">// 初始化 uv_handle_t 队列，所以初始化后的 handle 都会放到此队列中</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;handle_queue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 活跃的 handle 和 request 数量</span></span><br><span class="line">  loop-&gt;active_handles = <span class="number">0</span>;</span><br><span class="line">  loop-&gt;active_reqs.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始初始化I/O观察者相关字段</span></span><br><span class="line">  <span class="comment">// 文件描述符数量</span></span><br><span class="line">  loop-&gt;nfds = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// I/O观察者数组首地址指针</span></span><br><span class="line">  loop-&gt;watchers = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">// I/O观察者数组数量，但是 `loop-&gt;watchers` 实际长度为：nwatchers + 2</span></span><br><span class="line">  loop-&gt;nwatchers = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 初始化 挂起的I/O观察者队列，挂起的I/O观察者会被插入此队列延迟处理</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;pending_queue);</span><br><span class="line">  <span class="comment">// 初始化 I/O观察者队列，所有初始化后的I/O观察者都会被插入此队列</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;watcher_queue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭的 handle 队列，单向链表</span></span><br><span class="line">  loop-&gt;closing_handles = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">// 初始化计时器 loop-&gt;time</span></span><br><span class="line">  uv__update_time(loop);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// uv_async_t</span></span><br><span class="line">  <span class="comment">// 初始化 async_io_watcher，它是一个I/O观察者，用于 uv_async_t 唤醒事件循环</span></span><br><span class="line">  loop-&gt;async_io_watcher.fd = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// 用于写数据给 async_io_watcher</span></span><br><span class="line">  loop-&gt;async_wfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// uv_signal_t</span></span><br><span class="line">  loop-&gt;signal_pipefd[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  loop-&gt;signal_pipefd[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// epoll_create()</span></span><br><span class="line">  loop-&gt;backend_fd = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// EMFILE 错误相关</span></span><br><span class="line">  loop-&gt;emfile_fd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定时器计数器</span></span><br><span class="line">  loop-&gt;timer_counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事件循环关闭标识</span></span><br><span class="line">  loop-&gt;stop_flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 平台特定初始化：UV_LOOP_PRIVATE_FIELDS</span></span><br><span class="line">  err = uv__platform_loop_init(loop);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// uv_signal_t</span></span><br><span class="line">  <span class="comment">// 初始化进程信号</span></span><br><span class="line">  uv__signal_global_once_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// uv_proccess_t</span></span><br><span class="line">  <span class="comment">// 初始化子进程信号观察者</span></span><br><span class="line">  err = uv_signal_init(loop, &amp;loop-&gt;child_watcher);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">goto</span> fail_signal_init;</span><br><span class="line">  <span class="comment">// 解引用loop-&gt;child_watcher</span></span><br><span class="line">  uv__handle_unref(&amp;loop-&gt;child_watcher);</span><br><span class="line">  loop-&gt;child_watcher.flags |= UV_HANDLE_INTERNAL;</span><br><span class="line">  <span class="comment">// 初始化子进程 handle 队列</span></span><br><span class="line">  QUEUE_INIT(&amp;loop-&gt;process_handles);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化线程读写锁</span></span><br><span class="line">  err = uv_rwlock_init(&amp;loop-&gt;cloexec_lock);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">goto</span> fail_rwlock_init;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化线程互斥量锁</span></span><br><span class="line">  err = uv_mutex_init(&amp;loop-&gt;wq_mutex);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">goto</span> fail_mutex_init;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// uv_work_t</span></span><br><span class="line">  <span class="comment">// 初始化loop-&gt;wq_async，用于结束任务完成信号，并注册处理函数</span></span><br><span class="line">  err = uv_async_init(loop, &amp;loop-&gt;wq_async, uv__work_done);</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">    <span class="keyword">goto</span> fail_async_init;</span><br><span class="line">  <span class="comment">// 解引用</span></span><br><span class="line">  uv__handle_unref(&amp;loop-&gt;wq_async);</span><br><span class="line">  loop-&gt;wq_async.flags |= UV_HANDLE_INTERNAL;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fail_async_init:</span><br><span class="line">  uv_mutex_destroy(&amp;loop-&gt;wq_mutex);</span><br><span class="line"></span><br><span class="line">fail_mutex_init:</span><br><span class="line">  uv_rwlock_destroy(&amp;loop-&gt;cloexec_lock);</span><br><span class="line"></span><br><span class="line">fail_rwlock_init:</span><br><span class="line">  uv__signal_loop_cleanup(loop);</span><br><span class="line"></span><br><span class="line">fail_signal_init:</span><br><span class="line">  uv__platform_loop_delete(loop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv_loop_init</code> 的初始化代码是比较长的，它初始化了 libuv 运行时所有依赖的内容，这包括事件循环自身运行所需的内容，以及各类型 Handle 运行所需的共有内容和特定内容，这些都在 <code>uv_loop_t</code> 实例初始化的时候一并进行了初始化，初始化细节和很多有其他功能相关，当分析其他功能时，还会提及涉及到的该函数的部分代码块。</p><h2 id="Run：uv-run"><a href="#Run：uv-run" class="headerlink" title="Run：uv_run"></a>Run：uv_run</h2><p>下面我们就来看一下 <code>uv_run</code> 函数都干了什么：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDM0Mw==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L343">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L343<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_run</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> timeout;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> ran_pending;</span><br><span class="line"></span><br><span class="line">  r = uv__loop_alive(loop);</span><br><span class="line">  <span class="keyword">if</span> (!r)</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (r != <span class="number">0</span> &amp;&amp; loop-&gt;stop_flag == <span class="number">0</span>) &#123;</span><br><span class="line">    uv__update_time(loop);</span><br><span class="line">    uv__run_timers(loop);</span><br><span class="line">    ran_pending = uv__run_pending(loop);</span><br><span class="line">    uv__run_idle(loop);</span><br><span class="line">    uv__run_prepare(loop);</span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = uv_backend_timeout(loop);</span><br><span class="line"></span><br><span class="line">    uv__io_poll(loop, timeout);</span><br><span class="line">    uv__run_check(loop);</span><br><span class="line">    uv__run_closing_handles(loop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      <span class="comment">/* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span><br><span class="line"><span class="comment">       * been invoked when it returns. uv__io_poll() can return without doing</span></span><br><span class="line"><span class="comment">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span><br><span class="line"><span class="comment">       * have pending timers that satisfy the forward progress constraint.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from</span></span><br><span class="line"><span class="comment">       * the check.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      uv__update_time(loop);</span><br><span class="line">      uv__run_timers(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = uv__loop_alive(loop);</span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class="line"><span class="comment">   * dirtying a cache line.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;stop_flag != <span class="number">0</span>)</span><br><span class="line">    loop-&gt;stop_flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>uv_run</code> 内部就是一个 <code>while</code> 循环，在 <code>UV_RUN_ONCE</code> 和 <code>UV_RUN_NOWAIT</code> 两种模式下，循环在执行一次后就会 <code>break</code>，一次性的，实际上没有循环。另外 在 <code>uv__loop_alive(loop) == 0</code> 或者 <code>loop-&gt;stop_flag != 0</code> 时 无法进入循环，同样循环结束，<code>uv_run</code> 函数返回。</p><p>该函数就如官网给出的流程图一样简单</p><p><img src="http://docs.libuv.org/en/v1.x/_images/loop_iteration.png" alt="loop_iteration"></p><p>再看看几个关键的函数调用：</p><ol><li><code>uv__update_time(loop)</code>：对应图中 <code>Update loop time</code></li><li><code>uv__run_timers(loop)</code>：对应图中 <code>Run due timers</code>，用于 <code>uv_timer_t</code>，见 <a href="4-libuv-timer.md">Timer</a></li><li><code>uv__run_pending(loop)</code>：对应图中 <code>Call pending callbacks</code>，用于 <code>uv__io_t</code>，见 <a href="5-libuv-io-watcher.md">I/O-Watcher</a></li><li><code>uv__run_idle(loop)</code>：对应图中 <code>Run idle handles</code>，用于 <code>uv_idle_t</code></li><li><code>uv__run_prepare(loop)</code>：对应图中 <code>Run prepare handles</code>，用于 <code>uv_prepare_t</code></li><li><code>uv__io_poll(loop, timeout)</code>：对应图中 <code>Poll for I/O</code>，用于 <code>uv__io_t</code>，见 <a href="5-libuv-io-watcher.md">I/O-Watcher</a></li><li><code>uv__run_check(loop)</code>：对应图中 <code>Run check handles</code>，用于 <code>uv_check_t</code></li><li><code>uv__run_closing_handles(loop)</code>：对应图中 <code>Call close callbacks</code>，用于 <code>uv_handle_t</code>，见 <a href="3-libuv-handle-and-request.md">Handle and Requst</a></li></ol><p>以上执行逻辑正好和文档中的各个执行阶段相对应，文档中描述的各个执行阶段分别对应了不同的函数调用。整个循环迭代的不同阶段，对应于不同类型/状态的 handle 处理。除了用于 <code>uv_timer_t</code>、<code>uv_idle_t</code>、<code>uv_prepare_t</code>、<code>uv_check_t</code> 这四种类型的 handle 处理的几个阶段之外，没看到其他 handle 相关内容，倒是有个 <code>uv__io_t</code> 的处理，这是前文所提到的 libuv 内部关于I/O观察者的一个基本抽象，所有其他的 <code>handle</code> 都可以当做是一个I/O观察者，类似于双重继承。</p><p>如果这个函数处于一直不断的循环状态，所在进程岂不是会一直占用CPU？实际上不会这样的，因为线程会在 <code>uv__io_poll(loop, timeout)</code> 这个函数内部因为阻塞而挂起，挂起的时间主要由下一次到来的定时器决定。在线程挂起这段时间内，不会占用CPU。</p><p><code>uv_run</code> 启动事件循环，才使所有活动状态的 <code>handle</code> 开始工作，否则所有 <code>handle</code> 都是静止的，这一步就是 libuv 启动的按钮。 </p><p>事件循环自身存在存活状态，通过 <code>uv__loop_alive</code> 判断，实现如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDMzMQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L331">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L331<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__loop_alive</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> uv__has_active_handles(loop) ||</span><br><span class="line">         uv__has_active_reqs(loop) ||</span><br><span class="line">         loop-&gt;closing_handles != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__loop_alive</code> 判断 <code>loop</code> 是否是存活状态，满足以下三种条件之一即是存活状态：</p><ul><li>存在活跃的 handle</li><li>存在活跃的 request</li><li>正在关闭的 handle 列表不为空</li></ul><p>所以，若想成功事件事件循环一直不断的运行而不退出，必须在 <code>uv_run</code> 之前想事件循环里放入处于活跃状态的 <code>handle</code> 或 <code>request</code>。</p><p>在 <code>uv_loop_t</code> 结构中，存在记录处于活动状态的 <code>handle</code> 和 <code>request</code> 的计数器，所以通过简单的判断数量即可，实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__has_active_handles(loop)                                          \</span></span><br><span class="line">  ((loop)-&gt;active_handles &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uv__has_active_reqs(loop)                                             \</span></span><br><span class="line">  ((loop)-&gt;active_reqs.count &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>另外，除了存活状态之外，<code>loop</code> 还存在一个 <code>stop_flag</code> 字段 标识 <code>loop</code> 是否处于<code>关闭</code>状态。</p><p>所以，当 <code>loop</code> 中没有活动的 <code>handle</code> 和 <code>request</code> 时 或者 关闭标识开启时，事件循环跳出。</p><p>libuv 在运行时 有三种模式：对应模式的用途看文档上对应的描述即可，<span class="exturl" data-url="aHR0cDovL2RvY3MubGlidXYub3JnL2VuL3YxLngvbG9vcC5odG1sI2MudXZfcnVu" title="http://docs.libuv.org/en/v1.x/loop.html#c.uv_run">uv_run<i class="fa fa-external-link"></i></span>。</p><p>在 Run 的过程中，多次调用 <code>uv__update_time</code> 来更新时间</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEueC9zcmMvdW5peC9pbnRlcm5hbC5oI0wyODg=" title="https://github.com/libuv/libuv/blob/v1.x/src/unix/internal.h#L288">https://github.com/libuv/libuv/blob/v1.x/src/unix/internal.h#L288<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UV_UNUSED(<span class="keyword">static</span> <span class="keyword">void</span> uv__update_time(<span class="keyword">uv_loop_t</span>* loop)) &#123;</span><br><span class="line">  <span class="comment">/* Use a fast time source if available.  We only need millisecond precision.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  loop-&gt;time = uv__hrtime(UV_CLOCK_FAST) / <span class="number">1000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> uv__hrtime(<span class="keyword">uv_clocktype_t</span> type) &#123;</span><br><span class="line">  <span class="keyword">return</span> gethrtime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数通过调用 <code>gethrtime</code> 获取系统当前时间，精度非常高，单位是纳秒（ns），1纳秒等于十亿分之一秒。除 <code>1000000</code> 后的时间单位为 毫秒（ms）。</p><p>时间对 libuv 来说非常重要，很多机制依赖于这个时间，比如定时器，后续的分析中，我们将会看到相关的利用。</p><p>在事件循环中，还有一个 <code>timeout</code>，这个值用于控制 <code>uv__io_poll(loop, timeout)</code> 的挂起时长，这个变量的值是通过 <code>uv_backend_timeout</code> 来获取的，源码如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdW5peC9jb3JlLmMjTDMxMQ==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L311">https://github.com/libuv/libuv/blob/v1.28.0/src/unix/core.c#L311<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_backend_timeout</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;stop_flag != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!uv__has_active_handles(loop) &amp;&amp; !uv__has_active_reqs(loop))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!QUEUE_EMPTY(&amp;loop-&gt;idle_handles))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!QUEUE_EMPTY(&amp;loop-&gt;pending_queue))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;closing_handles)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> uv__next_timeout(loop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv_backend_timeout</code> 在多个情况下都返回 <code>0</code>，这些情况表明不需要等待超时，如果前面的条件都不满足，会通过 <code>uv__next_timeout</code> 计算 <code>timeout</code>，源码如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdGltZXIuYyNMMTM3" title="https://github.com/libuv/libuv/blob/v1.28.0/src/timer.c#L137">https://github.com/libuv/libuv/blob/v1.28.0/src/timer.c#L137<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv__next_timeout</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap_node</span>* <span class="title">heap_node</span>;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">uv_timer_t</span>* handle;</span><br><span class="line">  <span class="keyword">uint64_t</span> diff;</span><br><span class="line"></span><br><span class="line">  heap_node = heap_min(timer_heap(loop));</span><br><span class="line">  <span class="keyword">if</span> (heap_node == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">/* block indefinitely */</span></span><br><span class="line"></span><br><span class="line">  handle = container_of(heap_node, <span class="keyword">uv_timer_t</span>, heap_node);</span><br><span class="line">  <span class="keyword">if</span> (handle-&gt;timeout &lt;= loop-&gt;time)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  diff = handle-&gt;timeout - loop-&gt;time;</span><br><span class="line">  <span class="keyword">if</span> (diff &gt; INT_MAX)</span><br><span class="line">    diff = INT_MAX;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>) diff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__next_timeout</code> 有两种 情况：</p><ul><li>堆为空，返回 <code>-1</code></li><li>堆非空，返回 <code>堆顶定时器</code> 和 <code>当前时间的差值</code>，但是差值不能越界。</li></ul><p>综合在一起，<code>uv_backend_timeout</code> 有可能返回 <code>-1</code> <code>0</code> <code>正整数</code>。</p><p>可以看到 <code>timeout</code> 作为参数传递给了 <code>uv__io_poll</code>，而 <code>timeout</code>  正好作为 <code>epoll_pwait</code> 的超时时间，所以，这个 <code>timeout</code> 的作用主要是使 <code>epoll_pwait</code> 能够有一个合理的超时时间:</p><ul><li>当 <code>timeout</code> 为 <code>-1</code> 的时候这个函数会无限期的阻塞下去；</li><li>当 <code>timeout</code> 为 <code>0</code> 的时候，就算没有任何事件，也会立刻返回，当没有任何需要等待的资源时，<code>timeout</code> 刚好为 <code>0</code>；</li><li>当 <code>timeout</code> 等于 <code>正整数</code> 的时候，将会阻塞 <code>timeout</code> 毫秒，或有I/O事件产生。</li></ul><p><code>epoll_pwait</code> 要在定时器时间到来时返回进入以进入下一次事件循环处理定时器，如果不能返回，将会导致定时任务不能按时得到处理，即使是按时返回，也不一定能够那是处理，因为 <code>uv__io_poll</code> 之后还有其他逻辑代码要执行，甚至是有可能是耗时计算，所以，Node.js 中定时器是不精确的，浏览器中类似。</p><p>在 <code>UV_RUN_ONCE</code> 模式下，因为循环会直接跳出，不会再次进入循环处理定时器，所以需要在这种模式下，需要处理额外处理定时器。</p><p>至此，事件循环的大逻辑已经分析完成了，后续，将会在各类型的 <code>handle</code> 的处理逻辑中展开对事件循环各阶段的内容分析。</p><h2 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h2><p>Stop 将使事件循环在下一次循环因不满条件而无法进入，源码如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpYnV2L2xpYnV2L2Jsb2IvdjEuMjguMC9zcmMvdXYtY29tbW9uLmMjTDUxNw==" title="https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.c#L517">https://github.com/libuv/libuv/blob/v1.28.0/src/uv-common.c#L517<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv_stop</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  loop-&gt;stop_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>uv_stop</code> 后，事件循环同样无法进入，程序退出。</p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di8yLWxpYnV2LWV2ZW50LWxvb3AubWQ=" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/2-libuv-event-loop.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di8yLWxpYnV2LWV2ZW50LWxvb3AubWQ=" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/2-libuv-event-loop.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv源码分析（一）全局概览（Overview）</title>
      <link href="/posts/node.js/libuv/1-libuv-overview/"/>
      <url>/posts/node.js/libuv/1-libuv-overview/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>libuv 是一个专注于异步I/O的跨平台的程序库，它主要是用于支持 Node.js，但是也被如 Luvit、Julia、pyuv 等很多其他的库使用。它使得 异步I/O 变的简单。</p><p>libuv 对于经常接触 <code>c</code> 语言程序开发的开发人员来说，应该是非常容易的，但是对于没有没有相关经验的开发人员来说，阅读源码就比较吃力了，但是如果能阅读并理解 <code>libuv</code>，才能更深入的了解 <code>Node.js</code> 是怎样工作的，以及 <code>Node.js</code> 中的事件驱动、非阻塞异步I/O是怎么一回事儿，它是怎么解决这些问题的，它有哪些不足。</p><h2 id="基础要求"><a href="#基础要求" class="headerlink" title="基础要求"></a>基础要求</h2><p>阅读源代码需要 <code>c</code> 语言相关的知识和一定的系统编程基础，需要了解常见的系统API调用及相关机制。主要有以下几个方面：</p><ol><li>libuv 主要是用 <code>c</code> 实现的，所以需要有一定的 <code>c</code> 语言基础，尤其是宏、结构体、指针、函数指针、数组等内容，对 <code>c</code> 语言程序的内存布局有一定了解；</li><li>libuv 内部包含 <code>堆</code> <code>队列</code> <code>树</code> 等基础的数据结构，需要有一定的了解；</li><li>libuv 内部使用了很多系统API，所以需要对相应系统平台系统编程和操作系统原理有一定了解，了解进程、线程、文件系统、网络等，了解常见的异步IO模型，最好阅读过 <code>APUE</code>。</li></ol><p>libuv 内部实现采用的大量的<code>宏</code>来复用代码，并配合使用强制类型转换等机制实现类似于高级语言中继承的效果，这依赖于 <code>c</code> 语言结构体内存布局，<code>宏</code>本身是非常不容易阅读的，增加了阅读源代码的难度。同时内部进行一定的抽象，需要一定的理解能力。</p><p>libuv 支持多个平台，尤其是支持 <code>*nix</code> 和 <code>win</code> 两种设计实现差异很大的操作系统，其内部也大量使用宏进行条件编译，且部分功能在不同环境下的实现有可能完全不同，所以在阅读源码时只关注某一平台代码。本源码分析也仅针对 <code>linux</code> 环境的相关代码的分析。</p><h2 id="设计概述"><a href="#设计概述" class="headerlink" title="设计概述"></a>设计概述</h2><p>本部分内容主要来源于官方文档，建议对照官方文档 <span class="exturl" data-url="aHR0cDovL2RvY3MubGlidXYub3JnL2VuL3YxLngvZGVzaWduLmh0bWw=" title="http://docs.libuv.org/en/v1.x/design.html">Design overview<i class="fa fa-external-link"></i></span> 阅读。</p><p>libuv 最初是为 NodeJS 编写的跨平台支持库。它是围绕<code>事件驱动的异步I/O模型</code>设计的。提到异步非阻塞I/O模型，有经验的开发人员应该能很快意识到这是一种很常见的实现高并发的模型，这是一种不同于多进程/多线程的并发模型。并发模型可以参考知乎专栏<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NDkxNzkyMA==" title="https://zhuanlan.zhihu.com/p/44917920">并发模型之间的比较<i class="fa fa-external-link"></i></span>或其他资料。</p><p>libuv 不仅仅在多种不同I/O轮询机制之上提供了的简单抽象——I/O观察者，更通过 <code>handles</code> 和 <code>streams</code> 为套接字和其他实体提供了更高级别的抽象，同时也提供了跨平台I/O和线程管理能力，还包含一些其他功能。</p><p>下图说明了 libuv 的不同组成部分以及它们与哪些子系统相关：</p><p><img src="http://docs.libuv.org/en/v1.x/_images/architecture.png" alt="architecture"></p><p>从图中可以看到，libuv 主要部分都是和I/O相关的，主要包括网络I/O和文件I/O，其中文件I/O和其他少部分功能基于线程池实现，网络I/O在 <code>*nix</code> 平台基于 <code>uv__io_t</code>（内部抽象的I/O观察者）实现，<code>uv__io_t</code> 又基于不同环境采用了不同的底层机制，网络I/O在 <code>win</code> 平台基于 <code>IOCP</code> 机制实现。</p><h3 id="Handles-and-requests"><a href="#Handles-and-requests" class="headerlink" title="Handles and requests"></a>Handles and requests</h3><p>libuv 为用户提供了两个与实践循环结合使用的抽象：<code>handles</code> 和 <code>requests</code></p><p><code>Handles</code> 代表长生命周期的<code>对象</code>有能力执行某些操作当它们处于激活状态下。例如：</p><ul><li><code>prepare handle</code> 在激活时，每次事件循环迭代都会调用一次它的回调；</li><li><code>TCP server handle</code> 在每一次有一个新的 <code>connection</code> 进来的时候都会调用一次它的回调。</li></ul><p><code>Requests</code> 一般代表一个短生命周期的<code>操作</code>。这些操作可以通过 handle 执行：<code>write requests</code> 用于在 handle 上写数据，所以 <code>request</code> 和 <code>handle</code> 可能存在一定的数据关联；或者也可以独立执行：<code>getaddrinfo requests</code> 不需要一个 <code>handle</code>，他们直接运行在事件循环中。</p><p>相关的代码分析在 <a href="3-libuv-handle-and-request.md">Handle and Requst</a> 部分进行。</p><h3 id="The-I-O-loop"><a href="#The-I-O-loop" class="headerlink" title="The I/O loop"></a>The I/O loop</h3><p>I/O loop 也就是事件循环（Event Loop）是 libuv 的核心组成部分。它为所有 I/O 操作建立内容，实际上这意味着事件循环被绑定到一个单一的线程。可以运行多个不同的事件循环只要它们在不同的线程中。除非另有说明，事件循环（任何涉及事件循环和 handle 的API）并不是线程安全的。</p><p>所有的异步操作的结果最终在事件循环中被处理，也就是通常所说的回调函数，在事件循环中被调用。因为事件循环线程是单线程模式，所以所有用户代码都在一个线程中运行，libuv 更像是一个调度器，在合适的时候调度用户代码运行。此时，如果用户代码CPU密集型的耗时运算，将会阻塞事件循环。</p><p>事件循环是非常常见的单线程异步I/O的处理方法：所有（网络）I/O都在非阻塞的套接字上执行，这些套接字使用给定平台上可用的最佳机制进行轮询：Linux 上使用 <code>epoll</code>，OSX 和其他 BSDs 系统上使用 <code>kqueue</code>，SunOS 使用 <code>event ports</code>，Windows 上使用 <code>IOCP</code>。以上I/O轮询作为事件循环迭代的一部分，事件循环将会被阻塞在I/O轮询（例如：linux 上的 <code>epoll_pwait</code> 调用），直到被添加到轮询器中的套接字有IO活动（事件），事件循环线程将会在有IO事件时被唤醒，关联的回调函数将会被调用表明套接字有新的连接，然后便可以在 <code>handles</code> 上进行读、写或其他想要进行的操作 <code>requests</code>。</p><p>下图显示了事件循环的所有阶段：</p><p><img src="http://docs.libuv.org/en/v1.x/_images/loop_iteration.png" alt="loop_iteration"></p><p>图中主要有七个阶段，</p><p>其中 <code>idle</code>、<code>prepare</code>、<code>check</code> 的实现完全相同，调用时间不同，类似于生命周期勾子，这几个阶段目的是允许开发者在事件循环的特定阶段执行代码，在 Node.js 主要用于性能信息收集。这三个阶段的实现代码比较简单，很容易理解。因源代码几乎完全使用宏实现，所以编辑器无法跳转到对应实现，搜索关键字也无法匹配，这里给出源文件路径：<code>src/unix/loop-watcher.c</code>，便于读者找到源文件。</p><p>其余剩下的阶段就主要有 <code>Call pending callbacks</code> <code>Poll for I/O</code> <code>Call close callbacks</code>，这三个阶段主要用于处理IO操作等异步操作结果，阅读源码也主要是围绕着这三个阶段的代码展开的。</p><p>各阶段用途描述：</p><ol><li>Run due timers：处理定时任务；</li><li>Call pending callbacks：处理上一轮事件循环中因出现错误或者逻辑需要等原因挂起的任务；</li><li>Run idle handles；</li><li>Run prepare handles；</li><li>Poll for I/O：事件循环 则有可能 因为 <code>epoll_wait</code> 而阻塞在这里，这取决于 <code>timeout</code> 参数是否为 <code>0</code>，但是通常情况下，会阻塞到有关注的IO事件发送时回，这也直接避免了时间循环一直工作导致占用CPU的问题。这个阶段是整个 libuv 事件循环最重要的阶段。libuv 的大部分 <code>handle</code> （都是I/O相关的）都依赖该阶段实现。</li><li>Run check handles：</li><li>Call close callbacks：清理被关闭的 <code>handles</code>。</li></ol><p>更多详细描述，请直接阅读<span class="exturl" data-url="aHR0cDovL2RvY3MubGlidXYub3JnL2VuL3YxLngvZGVzaWduLmh0bWwjdGhlLWktby1sb29w" title="http://docs.libuv.org/en/v1.x/design.html#the-i-o-loop">The I/O loop<i class="fa fa-external-link"></i></span>的详细描述。</p><p>相关的代码分析在 <a href="2-libuv-event-loop.md">EventLoop</a> 部分进行。</p><h3 id="File-I-O"><a href="#File-I-O" class="headerlink" title="File I/O"></a>File I/O</h3><p>不同于网络IO，目前没有 libuv 可以依赖的平台特定（异步）文件IO机制，所以当前的方式是在线程池中运行阻塞式的文件IO操作。</p><p>libuv 目前采用一个全局的线程池，所有事件循环都可以在向其任务队列提交任务，目前有3种类型的操作运行在线程中：</p><ul><li>文件系统操作：<code>read</code>、<code>write</code> …</li><li>DNS功能操作：<code>getaddrinfo</code> 和 <code>getnameinfo</code></li><li>通过 <code>uv_queue_work()</code> 提交的用户特定的任务</li></ul><p>有关跨平台文件I/O现状的详尽说明：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmxpYnRvcnJlbnQub3JnLzIwMTIvMTAvYXN5bmNocm9ub3VzLWRpc2staW8v" title="https://blog.libtorrent.org/2012/10/asynchronous-disk-io/">asynchronous disk I/O<i class="fa fa-external-link"></i></span></p><p>线程池中的线程在工作完成之后，会向事件循环线程发送数据，然后再主线程中触发回调。</p><h2 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h2><p>通过以上的介绍和描述，我们可以获知几个关键概念：<code>Event-Loop</code>、<code>Async I/O</code>, <code>Handle</code>、<code>Request</code>。</p><ul><li><code>Event-Loop</code> 是一个程序结构，用于在程序中 <code>等待</code> 并 <code>派发</code> 消息和事件。它实际是一个运行时概念，表示一个运行时逻辑。<code>Event-Loop</code> 是实现 <code>Event-Driven</code> 编程的基本结构。</li><li><code>Async I/O</code> 相比 <code>Sync I/O</code>，<code>Async I/O</code> 一个典型的特征是不会阻塞，因为I/O操作通常比较慢，同步I/O操作会导致程序阻塞在I/O操作上，进而导致程序响应很慢。<code>Async I/O</code> 就是为了避免阻塞的。</li></ul><p><code>Event-Loop</code> 和 <code>Async I/O</code> 是实现高性能I/O的常见手段，这些都始于 <code>C10k</code> 问题，单服务器同时服务 10000 个客户端，当然现在远不止这些了。早期的服务器是基于进程/线程模型，每新来一个连接，就分配一个进程（线程）去处理这个连接，这是一个非常大的开销，容易达到系统软硬件瓶颈，另外，进程/线程切换上下文的成本也非常高。</p><p>一般而言，大多数网络应用服务器端软件都是I/O密集型系统，服务器系统大部分的时间都花费在等待数据的输入输出上了，而不是计算，如果CPU把时间花在等待I/O操作上，就白白浪费了CPU的处理能力了，更重要的是，此时可能还有大量的客户端请求需要处理，而CPU却在等待I/O无法脱身。最终，以此方式工作的服务器吞吐量极低，需要更多的服务支撑业务，导致成本升高。</p><p>为了充分利用CPU的计算能力，就需要避免让CPU等待I/O操作完成能够抽出身来做其他工作，例如，接收更多请求，等I/O操作完成之后再来进一步处理。这就有了 非阻塞I/O。异步I/O给编程带来了一定的麻烦，因为同步思维对于人来说更自然、更容易，也不易于调试，但是实际上限时世界原本偏向异步的。如何在I/O操作完成后能够让CPU回来继续完成工作也需要更复杂的流程逻辑控制，这些都带来了一定的设计难度。不过幸好，聪明的开发者设计了 <code>Event-Driven</code> 编程模型解决了此问题。基于此模型，也衍生出高性能IO常见实现模式：<code>Reactor</code> 模式，该模式有很多变体。Redis、Nginx、Netty、java.NIO都采用类似的模式来解决高并发的问题，libuv 自然也不例外，实现了事件驱动的异步IO。<code>Reactor</code> 模式采用同步I/O，<code>Proactor</code> 是一个采用异步I/O的模式。</p><p><img src="https://i3.wp.com/upload-images.jianshu.io/upload_images/5618238-eaf3e05931531d7e.png" alt></p><p>该部分内容参考：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXZlbnQtZHJpdmVu" title="https://en.wikipedia.org/wiki/Event-driven">https://en.wikipedia.org/wiki/Event-driven<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXZlbnQtZHJpdmVuX3Byb2dyYW1taW5n" title="https://en.wikipedia.org/wiki/Event-driven_programming">https://en.wikipedia.org/wiki/Event-driven_programming<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0aWdyYW5icy9jb25jdXJyZW5jeS12cy1ldmVudC1sb29wLXZzLWV2ZW50LWxvb3AtY29uY3VycmVuY3ktZWI1NDJhZDQwNjdi" title="https://medium.com/@tigranbs/concurrency-vs-event-loop-vs-event-loop-concurrency-eb542ad4067b">https://medium.com/@tigranbs/concurrency-vs-event-loop-vs-event-loop-concurrency-eb542ad4067b<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5rZWdlbC5jb20vYzEway5odG1s" title="http://www.kegel.com/c10k.html">http://www.kegel.com/c10k.html<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVhY3Rvcl9wYXR0ZXJu" title="https://en.wikipedia.org/wiki/Reactor_pattern">https://en.wikipedia.org/wiki/Reactor_pattern<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2dlZS5jcy5vc3dlZ28uZWR1L2RsL2NwanNsaWRlcy9uaW8ucGRm" title="http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf">http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5sYXB1dGFuLm9yZy9wdWIvc2FnL3JlYWN0b3IucGRm" title="http://www.laputan.org/pub/sag/reactor.pdf">http://www.laputan.org/pub/sag/reactor.pdf<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5kcmUudmFuZGVyYmlsdC5lZHUvfnNjaG1pZHQvUERGL3JlYWN0b3Itc2llbWVucy5wZGY=" title="http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf">http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qYXZhLWRlc2lnbi1wYXR0ZXJucy5jb20vcGF0dGVybnMvcmVhY3Rvci8=" title="https://java-design-patterns.com/patterns/reactor/">https://java-design-patterns.com/patterns/reactor/<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5saW5rZWRrZWVwZXIuY29tLzEzMi5odG1s" title="http://www.linkedkeeper.com/132.html">高性能Server - Reactor模型<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmZhbmd3ZWIuY29tLzIwMTgvMDkvMTAv55CG6Kej6auY5oCn6IO9572R57uc5qih5Z6LL3poLWNuLw==" title="https://blog.fangweb.com/2018/09/10/理解高性能网络模型/zh-cn/">理解高性能网络模型<i class="fa fa-external-link"></i></span></li></ul><h2 id="libevent-vs-libev-vs-libuv"><a href="#libevent-vs-libev-vs-libuv" class="headerlink" title="libevent vs libev vs libuv"></a>libevent vs libev vs libuv</h2><ul><li>libevent：名气最大，应用最广泛，历史悠久的跨平台事件库；</li><li>libev：较 libevent 而言，设计更简练，性能更好，但对 Windows 支持不够好；</li><li>libuv：开发 node 的过程中需要一个跨平台的事件库，他们首选了 libev，但又要支持 Windows，故重新封装了一套，linux 下用 libev 实现，Windows下用 IOCP 实现；</li></ul><p>libevent、libev、libuv 都是 c 语言实现的事件驱动（<code>Event-Driven</code>）的异步I/O（<code>Async I/O</code>）库。</p><p>异步I/O（<code>Async I/O</code>）库本质上是提供异步I/O事件通知（Asynchronous Event Notification，AEN）的。异步事件通知机制就是根据发生的事件，调用相应的回调函数进行处理。</p><ul><li><strong>事件（Event）</strong>：事件是通知机制的核心，比如I/O事件、定时器事件、信号事件事件。有时候也称事件为事件处理器（EventHandler），这个名称更形象，因为 Handler 本身表示了包含处理所需数据（或数据的地址）和处理的方法（回调函数），更像是面向对象思想中的称谓。</li><li><strong>事件循环（EventLoop）</strong>：是事件驱动（<code>Event-Driven</code>）的核心，等待并分发事件。事件循环用于管理事件。</li></ul><p>对于应用程序来说，这些只是异步事件库提供的API，封装了异步事件库跟操作系统的交互，异步事件库会选择一种操作系统提供的机制来实现某一种事件，比如利用 Unix/Linux 平台的 epoll 机制实现网络IO事件，在同时存在多种机制可以利用时，异步事件库会采用最优机制。</p><p>该部分内容参考：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpamlucWkxOTg3L2FydGljbGUvZGV0YWlscy83MTIxNDk3NA==" title="https://blog.csdn.net/lijinqi1987/article/details/71214974">网络库libevent、libev、libuv对比<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3poZW9sb25nLmdpdGh1Yi5pby9ibG9nL2xpYmV2ZW50LWxpYmV2LWxpYnV2Lw==" title="http://zheolong.github.io/blog/libevent-libev-libuv/">Libevent Libev Libuv …<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQzMzg2NC93aGF0cy10aGUtZGlmZmVyZW5jZS1iZXR3ZWVuLWxpYmV2LWFuZC1saWJldmVudA==" title="https://stackoverflow.com/questions/9433864/whats-the-difference-between-libev-and-libevent">whats-the-difference-between-libev-and-libevent<i class="fa fa-external-link"></i></span></li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout v1<span class="number">.28</span><span class="number">.0</span></span><br><span class="line">Previous HEAD position was a4fc9a66 <span class="number">2019.03</span><span class="number">.17</span>, Version <span class="number">1.27</span><span class="number">.0</span> (Stable)</span><br><span class="line">HEAD is now at <span class="number">7b</span>f8fabf <span class="number">2019.04</span><span class="number">.16</span>, Version <span class="number">1.28</span><span class="number">.0</span> (Stable)</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>以下为源码的文件结构，删掉了无关的部分</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── docs/</span><br><span class="line">├── include</span><br><span class="line">│   ├── uv</span><br><span class="line">│   │   ├── aix.h</span><br><span class="line">│   │   ├── android-ifaddrs.h</span><br><span class="line">│   │   ├── bsd.h</span><br><span class="line">│   │   ├── darwin.h</span><br><span class="line">│   │   ├── errno.h</span><br><span class="line">│   │   ├── linux.h</span><br><span class="line">│   │   ├── os390.h</span><br><span class="line">│   │   ├── posix.h</span><br><span class="line">│   │   ├── stdint-msvc2008.h</span><br><span class="line">│   │   ├── sunos.h</span><br><span class="line">│   │   ├── threadpool.h</span><br><span class="line">│   │   ├── tree.h</span><br><span class="line">│   │   ├── unix.h</span><br><span class="line">│   │   ├── version.h</span><br><span class="line">│   │   └── win.h</span><br><span class="line">│   └── uv.h</span><br><span class="line">├── src</span><br><span class="line">│   ├── fs-poll.c</span><br><span class="line">│   ├── heap-inl.h</span><br><span class="line">│   ├── idna.c</span><br><span class="line">│   ├── idna.h</span><br><span class="line">│   ├── inet.c</span><br><span class="line">│   ├── queue.h</span><br><span class="line">│   ├── strscpy.c</span><br><span class="line">│   ├── strscpy.h</span><br><span class="line">│   ├── threadpool.c</span><br><span class="line">│   ├── timer.c</span><br><span class="line">│   ├── uv-common.c</span><br><span class="line">│   ├── uv-common.h</span><br><span class="line">│   ├── uv-data-getter-setters.c</span><br><span class="line">│   ├── version.c</span><br><span class="line">│   ├── unix/</span><br><span class="line">│   └── win/</span><br><span class="line">├── <span class="built_in">test</span>/</span><br><span class="line">├── samples/</span><br><span class="line">├── uv.gyp</span><br><span class="line">└── vcbuild.bat</span><br></pre></td></tr></table></figure><p>源码主要存在于以下几个目录：</p><ul><li><p><code>include</code>：存放 <code>.h</code> 文件，这些文件主要用于对外暴露 <code>c</code> API</p><ul><li><code>include/uv.h</code> 文件存放平台无关的头文件，该文件需要被 <code>include</code> 依赖项目的源码当中。</li><li><code>include/uv/*.h</code> 路径下的文件则是针对不同平台进行的不同相关类型的声明定义等。</li></ul><p><code>include/uv.h</code> 会根据不同的环境 <code>include</code> <code>uv/win.h</code> 或 <code>uv/unix.h</code>，<code>uv/unix.h</code> 再 <code>include</code> <code>*nix</code> 系的其他系统相关头文件。如同通常的c库一样，<code>uv.h</code> 不仅作为入口文件，同时还具备文档的作用，阅读源码自然适合从此文件开始。</p><p><code>include/tree.h</code> 是个例外，该文件内通过 宏实现了 <code>伸展树</code> 和 <code>红黑树</code>，而 同样采用<code>宏</code>实现的 <code>队列</code> 存放在 <code>src/queue.h</code> 文件中</p></li><li><p><code>src</code>：存放 <code>.c</code> 文件，和一些 不对外暴露的 <code>.h</code> 文件</p><ul><li><code>uv-common.h/uv-common.c</code> 包含部分公共的内部数据结构、函数的声明和实现，会被 <code>src</code> 内部大部分其他文件 包含</li><li><code>timer.c</code> 对应于 定时器 的实现</li><li><code>threadpool.c</code> 实现了线程池，对应的线程管理实现存在于 <code>src/[unix|win]/thread.c</code> 文件中</li><li><code>queue.h</code> 基于宏实现的简单的队列</li><li><code>heap-inl.h</code> 最小二叉堆实现，未采用宏实现</li><li><code>fs-poll.c</code> 文件系统轮询相关实现</li><li><code>idna.h/idna.c</code> IDNA Punycode 相关实现代码</li><li><code>unix/</code> *nix 平台相关实现</li><li><code>win/</code> win 平台相关实现</li></ul></li><li><p><code>test</code>：存放一些 单元测试 代码，这里面的很多代码可以作为参考示例</p></li><li><p><code>samples</code>：存放 示例代码，其中 <code>samples/socks5-proxy</code> 是一个基于 <code>libuv</code> 实现的 <code>sock5</code> 代理</p></li></ul><h3 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h3><p>libuv 所有函数、结构体都采用了统一的前缀 <code>uv_</code>，名称格式为：<code>uv_ + name</code>，<code>name</code> 可以以下划线开头，表示内部成员，例如：</p><ul><li>公开名称：<code>uv_loop_t = uv_ + loop_t</code> <code>uv_loop_start = uv_ + loop_start</code></li><li>内部名称：<code>uv__io_t = uv_ + _io_t</code> <code>uv__io_poll = uv_ + _io_poll</code></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>libuv 中的数据结构（队列，堆）采用被称为<code>侵入式</code>的实现方式实现，下图为 Linux 内核 <code>/include/linux/list.h</code> 的实现示意图：</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*XTYvSNj_rT2UZwfm.png" alt></p><p>该队列与通常实现最大的不同是兄弟节点指针 <code>prev</code> 和 <code>next</code> 存储的并发数据结构首地址，而是队列节点（数据结构某个成员）的地址，图中是 <code>list_head</code>，如果需要拿到完整的数据结构，需要获得数据结构的首地址，已知条件是已知 <code>list_head</code> 的地址，<code>c</code> 语言程序中结构体的内存布局是对齐的，所以可以计算出 <code>list_head</code> 相对数据结构首地址的偏移量，这样就可以算出数据结构首地址了，<code>container_of</code> 就是完成这一换算的。这种方式实现的数据结构，图中 <code>data structure 1</code>、<code>data structure 2</code>、<code>data structure 3</code> 可以是不同的类型，所以这种方式实现的数据结构可以很通用。</p><p><code>container_of</code> 定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr, type, member) \</span></span><br><span class="line">  ((type *) ((<span class="keyword">char</span> *) (ptr) - offsetof(type, member)))</span><br></pre></td></tr></table></figure><p>在 linux 内核中也定义了这个宏，但是略微不同，宏定义如下：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXQua2VybmVsLm9yZy9wdWIvc2NtL2xpbnV4L2tlcm5lbC9naXQvc3RhYmxlL2xpbnV4LmdpdC90cmVlL2luY2x1ZGUvbGludXgva2VybmVsLmg/aWQ9cmVmcy90YWdzL3Y0LjEwLjEzI244NDI=" title="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/kernel.h?id=refs/tags/v4.10.13#n842">https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/kernel.h?id=refs/tags/v4.10.13#n842<i class="fa fa-external-link"></i></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * container_of - cast a member of a structure out to the containing structure</span></span><br><span class="line"><span class="comment"> * @ptr:        the pointer to the member.</span></span><br><span class="line"><span class="comment"> * @type:       the type of the container struct this is embedded in.</span></span><br><span class="line"><span class="comment"> * @member:     the name of the member within the struct.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> container_of(ptr, type, member) (&#123;                      \</span></span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="title">typeof</span><span class="params">( ((type *)<span class="number">0</span>)-&gt;member )</span> *__mptr </span>= (ptr);    \</span><br><span class="line">        (type *)( (<span class="keyword">char</span> *)__mptr - offsetof(type,member) );&#125;)</span><br></pre></td></tr></table></figure><p>关于 <code>container_of</code> 的实现原理可参考：</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaWRvcmF4L3AvNjc5Njg5Ny5odG1s" title="https://www.cnblogs.com/idorax/p/6796897.html">typeof, offsetof 和container_of<i class="fa fa-external-link"></i></span></li></ul><p>接下来，开始详细分析 libuv 源码的各个部分内容，请见下文。</p><hr><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvdHJlZS9tYXN0ZXIvbm9kZS5qcy9saWJ1di8xLWxpYnV2LW92ZXJ2aWV3Lm1k" title="https://github.com/liuyanjie/knowledge/tree/master/node.js/libuv/1-libuv-overview.md">查看源文件<i class="fa fa-external-link"></i></span>&nbsp;&nbsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdXlhbmppZS9rbm93bGVkZ2UvZWRpdC9tYXN0ZXIvbm9kZS5qcy9saWJ1di8xLWxpYnV2LW92ZXJ2aWV3Lm1k" title="https://github.com/liuyanjie/knowledge/edit/master/node.js/libuv/1-libuv-overview.md">编辑源文件<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
            <tag> node.js </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
